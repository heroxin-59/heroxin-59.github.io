<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/12/26/Untitled/"/>
      <url>/2023/12/26/Untitled/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内部周会（2024/1/2 18.10）</p><ol><li>项目<ul><li>预算，进入研发阶段，两周，</li></ul></li><li>团队</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/11/03/Redis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD/"/>
      <url>/2023/11/03/Redis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h1><p>缓存预热是指系统上线后，提前将相关的缓存数据加载到缓存系统。</p><p>避免在系统上线初期，大量请求访问到数据库当中，对数据库造成巨大的压力</p><p>如果不进行预热，那么 Redis 初始状态数据为空，系统上线初期，对于高并发的流 量，都会访问到数据库中， 对数据库造成流量的压力。 </p><p>缓存预热解决方案： </p><ul><li>数据量不大的时候，工程启动的时候进行加载缓存动作； </li><li>数据量大的时候，设置一个定时任务脚本，进行缓存的刷新； </li><li>数据量太大的时候，优先保证热点数据进行提前加载到缓存。</li></ul><h1 id="Redis缓存预热"><a href="#Redis缓存预热" class="headerlink" title="Redis缓存预热"></a>Redis缓存预热</h1><blockquote><p>InitializingBean是Spring提供的拓展性接口，InitializingBean接口为bean提供了属性初始化后的处理方法，它只有一个afterPropertiesSet方法，凡是继承该接口的类，在bean的属性初始化后都会执行该方法。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillController</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统初始化，把商品库存数量加载到redis  缓存预热</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *缓存操作</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring全局异常处理</title>
      <link href="/2023/10/27/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2023/10/27/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>Spring 异常处理三种方式</strong></p><ol><li> @ExceptionHandler</li><li> 实现HandlerExceptionResolver接口</li><li> @ControllerAdvice+@ExceptionHandler</li></ol></blockquote><h1 id="Spring异常处理"><a href="#Spring异常处理" class="headerlink" title="Spring异常处理"></a>Spring异常处理</h1><p>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>全局处理异常</p><p><code>@ControllerAdvice</code> 是一个Spring注解，它本质上是一个特殊类型的<code>@Component</code>。意味着当你使用</p><p><code>@ControllerAdvice</code> 注解标记一个类时，Spring会将该类注册为一个Spring Bean，并将其纳入Spring应用程序</p><p>上下文中，使它能够被自动扫描和发现。</p><p>同时<code>@ControllerAdvice</code> 是基于Spring AOP（面向切面编程）的一种实现，默认情况下会对所有Controller进行拦</p><p>截，当你使用<code>@ControllerAdvice</code>注解标记一个类时，Spring将这个类视为一个AOP切面。这个切面的目的是捕获</p><p>Controller中抛出的异常，并在一个统一的地方进行处理。在<code>@ControllerAdvice</code>类中，你可以定义多个</p><p><code>@ExceptionHandler</code>注解的方法，每个方法可以处理特定类型的异常。这些方法被视为AOP通知，它们织入到切</p><p>点（Controller方法抛出异常的地方）。</p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><ol><li>当应用程序中的某个方法抛出异常时，Spring Boot会捕获该异常。</li><li>Spring Boot会搜索在类路径下带有 <code>@ControllerAdvice</code> 注解的类。</li><li>在找到 <code>@ControllerAdvice</code> 类后，Spring Boot会查找该类中使用 <code>@ExceptionHandler</code> 注解标记的方法，以确定哪个方法能够处理抛出的异常。方法的参数应与异常类型匹配。</li><li>如果找到了匹配的 <code>@ExceptionHandler</code> 方法，Spring Boot会调用该方法，将抛出的异常传递给它。</li><li><code>@ExceptionHandler</code> 方法可以根据应用的需求执行自定义的异常处理逻辑，例如记录异常、生成响应、发送通知等。</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">GlobalException</button></li><li class="tab"><button type="button" data-href="#note-2">GlobalExceptionHandler</button></li><li class="tab"><button type="button" data-href="#note-3">RespBeanEnum</button></li><li class="tab"><button type="button" data-href="#note-4">RespBean</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBeanEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RespBeanEnum respBeanEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBean;</span><br><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBeanEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> RespBean <span class="title function_">ExceptionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> GlobalException) &#123;</span><br><span class="line">            <span class="type">GlobalException</span> <span class="variable">ex</span> <span class="operator">=</span> (GlobalException) e;</span><br><span class="line">            <span class="keyword">return</span> RespBean.error(ex.getRespBeanEnum());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line">            <span class="type">BindException</span> <span class="variable">ex</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">            <span class="type">RespBean</span> <span class="variable">respBean</span> <span class="operator">=</span> RespBean.error(RespBeanEnum.BIND_ERROR);</span><br><span class="line">            respBean.setMessage(<span class="string">&quot;参数校验异常：&quot;</span> + ex.getAllErrors().get(<span class="number">0</span>).getDefaultMessage());</span><br><span class="line">            <span class="keyword">return</span> respBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RespBean.error(RespBeanEnum.ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RespBeanEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;SUCCESS&quot;</span>),</span><br><span class="line">    ERROR(<span class="number">500</span>, <span class="string">&quot;服务端异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录模块</span></span><br><span class="line">    LOGIN_ERROR(<span class="number">500210</span>, <span class="string">&quot;用户名或者密码不正确&quot;</span>),</span><br><span class="line">    MOBILE_ERROR(<span class="number">500211</span>, <span class="string">&quot;手机号码格式不正确&quot;</span>),</span><br><span class="line">    BIND_ERROR(<span class="number">500212</span>, <span class="string">&quot;参数校验异常&quot;</span>),</span><br><span class="line">    MOBILE_NOT_EXIST(<span class="number">500213</span>, <span class="string">&quot;手机号码不存在&quot;</span>),</span><br><span class="line">    PASSWORD_UPDATE_FAIL(<span class="number">500214</span>, <span class="string">&quot;更新密码失败&quot;</span>),</span><br><span class="line">    SESSION_ERROR(<span class="number">500215</span>, <span class="string">&quot;用户SESSION不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀模块</span></span><br><span class="line">    EMPTY_STOCK(<span class="number">500500</span>, <span class="string">&quot;库存不足&quot;</span>),</span><br><span class="line">    REPEATE_ERROR(<span class="number">500501</span>, <span class="string">&quot;该商品每人限购一件&quot;</span>),</span><br><span class="line">    REQUEST_ILLEGAL(<span class="number">500502</span>, <span class="string">&quot;请求非法，请重新尝试&quot;</span>),</span><br><span class="line">    ERROR_CAPTCHA(<span class="number">500503</span>, <span class="string">&quot;验证码错误，请重新输入&quot;</span>),</span><br><span class="line">    ACCESS_LIMIT_REACHED(<span class="number">500504</span>, <span class="string">&quot;访问过于频繁，请稍后重试&quot;</span>),</span><br><span class="line">    <span class="comment">//订单模块5003xx</span></span><br><span class="line">    ORDER_NOT_EXIST(<span class="number">500300</span>, <span class="string">&quot;订单不存在&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespBean</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(RespBeanEnum.SUCCESS.getCode(), RespBeanEnum.SUCCESS.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">success</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(RespBeanEnum.SUCCESS.getCode(), RespBeanEnum.SUCCESS.getMessage(), object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">error</span><span class="params">(RespBeanEnum respBeanEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(respBeanEnum.getCode(), respBeanEnum.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">error</span><span class="params">(RespBeanEnum respBeanEnum, Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(respBeanEnum.getCode(), respBeanEnum.getMessage(), object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RespBean</span><span class="params">(<span class="type">long</span> code, String message, Object object)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>InvalidDefinitionException</title>
      <link href="/2023/10/26/InvalidDefinitionException/"/>
      <url>/2023/10/26/InvalidDefinitionException/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><div class="note danger simple"><p>com.fasterxml.jackson.databind.exc.InvalidDefinitionException</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026162750342.png"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><div class="note success simple"><p>为报错类添加无参构造方法</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026163124933.png"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>源代码时要获取 Json 中的返回信息，也就是需要反序列化</p><p><strong>反序列化过程中，它的父类如果没有实现序列化接口，那么将需要提供无参构造函数</strong></p><p>而<code>RespBean</code>并没有实现<code>Serializable</code>接口</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026164052331.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">java序列化与反序列化全讲解</a></p><p><a href="%5Bcom.fasterxml.jackson.databind.exc.InvalidDefinitionException-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/weixin_43091089/article/details/125201732)">com.fasterxml.jackson.databind.exc.InvalidDefinitionException</a></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于Validation组件自定义注解</title>
      <link href="/2023/10/25/Validation/"/>
      <url>/2023/10/25/Validation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>@Validation是一套帮助我们继续对传输的参数进行数据校验的注解，通过配置Validation可以轻松优雅的完成对数据的约束检验。</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>在请求方法的参数前面添加@Valid/@Validated注解，表示对该对象模型进行校验</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/doLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RespBean <span class="title function_">doLogin</span><span class="params">(<span class="meta">@Valid</span> LoginVo loginVo,HttpServletResponse response,HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.doLogin(loginVo,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在属性上面定义需要的校验规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>   <span class="comment">// 非空判断</span></span><br><span class="line">    <span class="meta">@IsMobile()</span>  <span class="comment">// 自定义注解，判断是否为合法手机号</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email</span><span class="comment">// 判断邮箱格式是否合法</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><blockquote><p>Validation组件已经提供了非常丰富的校验注解，但是在实际业务中，难免会碰到一些现有注解不足以校验的情况。这时，我们可以考虑自定义Validation注解。</p></blockquote><p><strong>基于 Validation 组件自定义注解 @IsMobile 判断是否为合法手机号</strong></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>新建一个 <code>Annotation</code>类型的类</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231025191705505.png"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>套用模板：</p><ul><li>更改<code>message</code>内容；</li><li>添加自定义校验规则类，见第三步（<code>IsMobileValidator.class</code>）</li><li>添加自定义方法</li><li>其他的保持不动</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        //  校验规则</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;IsMobileValidator.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsMobile &#123;</span><br><span class="line"><span class="comment">//    校验错误时返回的信息(必写)</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;手机号码格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    自定义的方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    约束注解在验证时所属的组别（必写）</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    负载（必写）</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>添加自定义校验规则类（<code>IsMobileValidator.class</code>）</p><p>实现<code>ConstraintValidator</code></p><p>重写<code>initialize</code> 与<code>isValid</code>方法</p><p><code>initialize</code>初始化方法</p><p><code>isValid</code>方法中实现具体的校验规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.validator.IsMobile;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsMobileValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;IsMobile, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">mobile_pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[1]([3-9])[0-9]&#123;9&#125;$&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   初始化，参数为 IsMobile中自定义方法返回值，用于检验前的检查</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> &#123;</span><br><span class="line">        contains = constraintAnnotation.contains();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line"><span class="comment">//        value 就是业务中被校验的值</span></span><br><span class="line">        <span class="keyword">if</span> (contains) &#123;</span><br><span class="line"><span class="comment">//            如果初始化成功，就进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> mobile_pattern.matcher(value);</span><br><span class="line">            <span class="keyword">return</span> matcher.matches();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>完成以上步骤就可以使用自定义注解了</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="ValidVS-Validated"><a href="#ValidVS-Validated" class="headerlink" title="@ValidVS@Validated"></a><code>@Valid</code>VS<code>@Validated</code></h2><ol><li>当使用仅是注解字段属性并验证规范，<code>@Validated</code> 和 <code>@Valid</code> 注解的功能是相同的。</li><li>Spring Validation 验证框架提供了 <code>@Validated</code> 注解对参数进行验证，符合<strong>Spring’s JSR-303</strong>规范；而 <code>@Valid</code> 注解是 javax 提供的，符合标准的<strong>JSR-303</strong>规范。</li><li>在注解的使用上，<code>@Validated</code> 注解可以用于类型、方法和参数上；而 <code>@Valid</code> 还可以用于属性之上。</li><li><code>@Validated</code> 注解可以使用分组校验的功能，为同一个对象属性提供不同分组，并根据分组来校验属性参数；而 @Valid 注解不支持分组验证。</li><li><code>@Valid</code> 注解支持嵌套验证，当类的属性是一个复杂对象时，可以使用 <code>@Valid</code> 对该属性对象中的属性同时进行校验；<code>@Validated</code> 并不支持在属性上使用。</li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>使用 <code>Validation</code> 校验异常后，当参数发生异常时，通常可能抛出的为<code>BindException</code>异常、<code>ValidationException</code>异常(或其子类)和<code>MethodArgumentNotValidException</code>异常，可用通过<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>来全局处理异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidationException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value = &#123;BindException.class, ValidationException.class, MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleParameterVerificationException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">log.error(<span class="string">&quot; handleParameterVerificationException has been invoked&quot;</span>, e);</span><br><span class="line">Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">resultMap.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;100001&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line"><span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ((MethodArgumentNotValidException) e).getBindingResult();</span><br><span class="line"><span class="comment">// getFieldError获取的是第一个不合法的参数(P.S.如果有多个参数不合法的话)</span></span><br><span class="line"><span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> bindingResult.getFieldError();</span><br><span class="line"><span class="keyword">if</span> (fieldError != <span class="literal">null</span>) &#123;</span><br><span class="line">msg = fieldError.getDefaultMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line"><span class="comment">// getFieldError获取的是第一个不合法的参数(P.S.如果有多个参数不合法的话)</span></span><br><span class="line"><span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> ((BindException) e).getFieldError();</span><br><span class="line"><span class="keyword">if</span> (fieldError != <span class="literal">null</span>) &#123;</span><br><span class="line">msg = fieldError.getDefaultMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ConstraintViolationException的e.getMessage()形如</span></span><br><span class="line"><span class="comment"> *     &#123;方法名&#125;.&#123;参数名&#125;: &#123;message&#125;</span></span><br><span class="line"><span class="comment"> *  这里只需要取后面的message即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">msg = e.getMessage();</span><br><span class="line"><span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> msg.lastIndexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (lastIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">msg = msg.substring(lastIndex + <span class="number">1</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ValidationException 的其它子类异常</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">msg = <span class="string">&quot;处理参数时异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">resultMap.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"><span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/m0_49496327/article/details/124121696">SpringBoot怎么使用Validation校验参数,看完你就会了@</a></p><p><a href="https://blog.csdn.net/justry_deng/article/details/86571671">SpringBoot使用Validation校验参数</a></p><p><a href="https://www.bilibili.com/video/BV1sf4y1L7KE?p=10">自定义注解参数校验</a></p>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> validation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法图解</title>
      <link href="/2023/10/23/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
      <url>/2023/10/23/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h1><p>（1）递归程序往往简洁易懂，但占用较大空间。递归层数过大会造成系统堆栈溢出。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（2）图是表示多对多关系的数据结构。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（3）Depth First Search on a graph uses Stack structure for its implementation.</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（4）只有当局部最优跟全局最优解一致的时候，贪心法才能给出正确的解。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（5）令S为活动选择问题（Activity Selection Problem）中所有活动的集合。则一定存在S的某个最大相容活动子集是包含了最早结束的活动<em>a</em></p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（6）哈夫曼编码是一种最优的前缀码。对一个给定的字符集及其字符频率，其哈夫曼编码不一定是唯一的，但是每个字</p><p>符的哈夫曼码的<strong>长度</strong>一定是唯一的。</p><ul><li><input disabled="" type="checkbox"> T       </li></ul><ul><li><input checked="" disabled="" type="checkbox"> F</li></ul><h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><p>若某线性表最常用的操作是在表尾进行插入和删除，则利用哪种存储方式最合适？</p><div class="note success simple"><p>数组</p></div><p>下列对顺序存储的有序表（长度为 <em>n</em>）实现给定操作的算法中，平均时间复杂度为 <em>O</em>(1) 的是：</p><div class="note success simple"><p>获取第 <em>i</em>（1≤<em>i</em>≤<em>n</em>）个元素的算法</p></div><p>线性表L=（a1, a2 ,……，a100 ）用一维数组存储。删除线性表中的元素a50,需要移动元素的个数是（ ）。</p><div class="note success simple"><p>50</p></div><p>顺序表中第1个元素的存储地址是2000，每个元素的长度为4，则第5个元素的地址是（ ）</p><div class="note success simple"><p>2016</p></div><p>To run binary search in a sorted sequencial list of 600 elements, the maximum number of comparisons is:</p><div class="note success simple"><p>10</p></div><p>设 0≤<em>i</em>,<em>k</em>&lt;<em>n</em>，下面这段代码的时间复杂度是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (i&gt;k) &#123;</span><br><span class="line">    for (j=i; j&lt;n; j++)</span><br><span class="line">        a[j] = a[j-k]+1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    for (j=i; j&gt;0; j--)</span><br><span class="line">        a[j] = a[k-j]+2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p>O(n)</p></div><p>下列程序段的时间复杂度是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int  sum = 0;</span><br><span class="line">for(int i=1;i&lt;n;i*=2)</span><br><span class="line">    for(int j=0;j&lt;i;j++)</span><br><span class="line">        sum++;</span><br></pre></td></tr></table></figure><div class="note success simple"><p>O(n)</p></div><p>快速排序算法是根据（ ）思想设计的算法。</p><div class="note success simple"><p>分治算法</p></div><p>（）关于分治法描述<strong>不正确</strong>的是：</p><div class="note success simple"><p>随机生成100个整数并存放在一个数组中，然后从中指定一个整数，则可用二分搜索算法在<em>O</em>(<em>l<strong>o</strong>g**n</em>)的时间内找到该整数。</p></div><p>具有n个结点的图，为了存储结点对之间的关系，可采用（ ）大小的矩阵。</p><div class="note success simple"><p>n * n</p></div><p>一个有n个顶点的简单有向图最多有 （ ） 条边</p><div class="note success simple"><p>n * (n - 1)</p></div><p>图的广度优先遍历需要借助的数据结构是</p><div class="note success simple"><p>队列</p></div><p>已知图的邻接表如下图所示，则从顶点A出发按广度优先遍历的结果是（ ）。</p><p><img src="https://images.ptausercontent.com/7cdc75b4-f301-4a9b-bb03-094f4830c217.png"></p><div class="note success simple"><p>ABCEDF</p></div><p>给定一个图的邻接矩阵如下，则从V1出发的宽度优先遍历序列（BFS，有多种选择时小标号优先）是：</p><p><img src="https://images.ptausercontent.com/165b8021-8357-409c-9ba9-b9efa4a88265.JPG"></p><div class="note success simple"><p>V1, V2, V3, V4, V5, V6, V7, V9, V8, V10</p></div><p>以下算法的功能是（）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void  graph1( adjmatrix GA, int i, int n, int *visited)</span><br><span class="line">&#123;</span><br><span class="line">   int k, j; Queue q;</span><br><span class="line">   cout&lt;&lt;i&lt;&lt;‘ ‘;   visited[i]= 1;</span><br><span class="line">   InitQueue( q);</span><br><span class="line">   EnQueue (q, i);</span><br><span class="line">   while ( !EmptyQueue(q) ) &#123;</span><br><span class="line">       k= OutQueue (q);</span><br><span class="line">       for( j=0; j&lt;n; j++) &#123;</span><br><span class="line">            if ( GA[k][j] != 0 &amp;&amp; GA[k][j] != MaxValue &amp;&amp; !visited[j] ) &#123;</span><br><span class="line">               cout&lt;&lt;j&lt;&lt;‘ ‘;  visited[j] = 1;</span><br><span class="line">               EnQueue (q, j);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note success simple"><p>从顶点 i 出发进行广度优先遍历</p></div><p>图的广度优先遍历类似于二叉树的：</p><div class="note success simple"><p>层次遍历</p></div><p>在图中自c点开始进行广度优先遍历算法可能得到的结果为：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231023130945384.png"></p><div class="note success simple"><p>c,f,a,d,e,b</p></div><p>对下图从顶点C出发进行深度优先搜索，哪个是错误的搜索序列？</p><p><img src="https://images.ptausercontent.com/ecb0590d-b6e7-4b90-b966-7619e4244e77.JPG"></p><div class="note success simple"><p>CDABEHFG</p></div><p>The following graph has Euler circuits. If the depth-first search is used to find an Euler circuit by concatenating paths, which sequence of the following is incorrect?</p><p><img src="https://images.ptausercontent.com/956b608a-c6ee-4acd-bcdc-d8d6ee2b9afa.png"></p><div class="note success simple"><p>5,3,5,4,2,5,6,1,5</p></div><p>图的深度优先遍历类似于二叉树的：</p><div class="note success simple"><p>先序遍历</p></div><p>下列说法不正确的是：</p><div class="note success simple"><p>图的深度遍历不适用于有向图</p></div><p>有向网如图所示，试用迪杰斯特拉算法求出从顶点a到其他各顶点间的最短路径，各顶点依次被确定的顺序为（ ）</p><p><img src="https://images.ptausercontent.com/7946021b-63bb-4a57-9ead-2f60967d82ff.png"></p><div class="note success simple"><p>a,c,f,e,d,g,b</p></div><p>使用 Dijkstra 算法求下图中从顶点 1 到其余各顶点的最短路径，将当前找到的从顶点 1 到顶点 2、3、4、5 的最短路径长度保存在数组 dist 中，求出第二条最短路径后，dist 中的内容更新为：</p><p><img src="https://images.ptausercontent.com/57b88fca-1a65-47b9-ac88-4d188fb92ede.png"></p><div class="note success simple"><p>21、3、14、6</p></div><p>使用迪杰斯特拉（Dijkstra）算法求下图中从顶点1到其他各顶点的最短路径，依次得到的各最短路径的目标顶点是：</p><p><img src="https://images.ptausercontent.com/ad667c00-6889-433b-bdf2-b1d9a96bec1e.JPG"></p><div class="note success simple"><p>6, 7, 5, 3, 2, 4</p></div><p>数据结构中Dijkstra算法用来解决哪个问题？</p><div class="note success simple"><p>最短路径</p></div><p>我们用一个有向图来表示航空公司所有航班的航线。下列哪种算法最适合解决找给定两城市间最经济的飞行路线问题？</p><div class="note success simple"><p>Dijkstra算法</p></div><h1 id="函数题"><a href="#函数题" class="headerlink" title="函数题"></a>函数题</h1><h2 id="递归实现指数函数"><a href="#递归实现指数函数" class="headerlink" title="递归实现指数函数"></a>递归实现指数函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calc_pow</span><span class="params">( <span class="type">double</span> x, <span class="type">int</span> n )</span>&#123;</span><br><span class="line">    <span class="type">double</span> fact=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        calc_pow(x, n<span class="number">-1</span>);c</span><br><span class="line">        fact=<span class="built_in">pow</span>(x, n);  </span><br><span class="line">        <span class="keyword">return</span> fact;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归计算P函数"><a href="#递归计算P函数" class="headerlink" title="递归计算P函数"></a>递归计算P函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">P</span><span class="params">( <span class="type">int</span> n, <span class="type">double</span> x )</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="number">2</span>*n<span class="number">-1</span>)*P(n<span class="number">-1</span>,x)-(n<span class="number">-1</span>)*P(n<span class="number">-2</span>,x))/n;c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="邻接表存储图的广度优先遍历"><a href="#邻接表存储图的广度优先遍历" class="headerlink" title="邻接表存储图的广度优先遍历"></a>邻接表存储图的广度优先遍历</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFS</span> <span class="params">( LGraph Graph, Vertex S, <span class="type">void</span> (*Visit)(Vertex) )</span>&#123;</span><br><span class="line">    Visit(S);</span><br><span class="line">    Visited[S] = <span class="literal">true</span>;</span><br><span class="line">    Vertex <span class="built_in">queue</span>[<span class="number">105</span>];</span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>[rear++] = S;</span><br><span class="line">    PtrToAdjVNode p;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear)&#123;</span><br><span class="line">        Vertex x = <span class="built_in">queue</span>[front++];</span><br><span class="line">        p = Graph-&gt;G[x].FirstEdge;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            Vertex v = p-&gt;AdjV;</span><br><span class="line">            <span class="keyword">if</span>(!Visited[v])&#123;</span><br><span class="line">                Visit(v);</span><br><span class="line">                Visited[v] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">queue</span>[rear++] = v;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="猜数字-交互版"><a href="#猜数字-交互版" class="headerlink" title="猜数字-交互版"></a>猜数字-交互版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ir.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = n;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">out.println(mid);</span><br><span class="line">out.flush();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ir.next();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">&quot;&lt;&quot;</span>)) &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">&quot;! &quot;</span> + r);</span><br><span class="line">out.flush();;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个有序序列的中位数"><a href="#两个有序序列的中位数" class="headerlink" title="两个有序序列的中位数"></a>两个有序序列的中位数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[N],b[N],c[<span class="number">2</span>*N];</span><br><span class="line">    <span class="type">int</span> n,i,ai=<span class="number">0</span>,bi=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (a[ai]&lt;=b[bi]) &#123;</span><br><span class="line">            c[i]=a[ai];</span><br><span class="line">            ai++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            c[i]=b[bi];</span><br><span class="line">            bi++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c[(<span class="number">2</span>*n<span class="number">-1</span>)/<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组循环左移"><a href="#数组循环左移" class="headerlink" title="数组循环左移"></a>数组循环左移</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">   <span class="type">int</span> a[n];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m%n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> p = a[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">       &#123;</span><br><span class="line">           a[j<span class="number">-1</span>] = a[j];</span><br><span class="line">       &#125;</span><br><span class="line">       a[n<span class="number">-1</span>] = p;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,a[i]);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merging-Linked-Lists"><a href="#Merging-Linked-Lists" class="headerlink" title="Merging Linked Lists"></a>Merging Linked Lists</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> head1, head2, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;head1, &amp;head2, &amp;n);</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; list;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; l1, l2, ans;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> address, num, next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;address, &amp;num, &amp;next);</span><br><span class="line"></span><br><span class="line">        list[address].first = num;</span><br><span class="line">        list[address].second = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = head1;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="number">-1</span>)&#123;</span><br><span class="line">        l1.<span class="built_in">emplace_back</span>(tmp, list[tmp].first);</span><br><span class="line">        tmp = list[tmp].second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = head2;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="number">-1</span>)&#123;</span><br><span class="line">        l2.<span class="built_in">emplace_back</span>(tmp, list[tmp].first);</span><br><span class="line">        tmp = list[tmp].second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len1 = l1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = l2.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first 是地址，second 是数值</span></span><br><span class="line">    <span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line">        <span class="type">int</span> pos1 = <span class="number">0</span>, pos2 = len2 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2--]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos1 &lt; len1) ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> pos2 = <span class="number">0</span>, pos1 = len1 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos1 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1--]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos2 &lt; len2) ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == ans.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>, ans[i].first, ans[i].second);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, ans[i].first, ans[i].second, ans[i + <span class="number">1</span>].first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="统计工龄"><a href="#统计工龄" class="headerlink" title="统计工龄"></a>统计工龄</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, age, N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">51</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= <span class="number">50</span>;i++)</span><br><span class="line">        arr[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">        arr[age] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,k,arr[N],i,j,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    &#125;<span class="comment">//输入数据</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                t=arr[i];</span><br><span class="line">                arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//交换数值</span></span><br><span class="line">    &#125;<span class="comment">//排序次数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;<span class="comment">//输出数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数分解为若干项之和"><a href="#整数分解为若干项之和" class="headerlink" title="整数分解为若干项之和"></a>整数分解为若干项之和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> items[MAX_SIZE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> remain_value, <span class="type">int</span> start, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(remain_value!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start; i&lt;=remain_value; i++) &#123;</span><br><span class="line">items[num] = i;</span><br><span class="line"><span class="built_in">f</span>(remain_value-i, i, num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d=%d&quot;</span>,N,items[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;num; j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+%d&quot;</span>,items[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count%<span class="number">4</span>==<span class="number">0</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(count%<span class="number">4</span>!=<span class="number">0</span>&amp;&amp;items[<span class="number">0</span>]!=N)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="built_in">f</span>(N, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="输出全排列"><a href="#输出全排列" class="headerlink" title="输出全排列"></a>输出全排列</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrange</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,num;</span><br><span class="line"><span class="keyword">if</span>(m==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(num=<span class="number">1</span>;num&lt;=n;num++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">if</span>(a[j]==num)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j==m)&#123;</span><br><span class="line">a[m]=num;</span><br><span class="line">arrange(a, n, m+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    arrange(a, n, <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哪两个点之间的距离最近"><a href="#哪两个点之间的距离最近" class="headerlink" title="哪两个点之间的距离最近"></a>哪两个点之间的距离最近</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参考的张明阳的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">double</span> x[n+<span class="number">1</span>];</span><br><span class="line">    <span class="type">double</span> y[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d1;</span><br><span class="line">    <span class="type">int</span> d2;</span><br><span class="line">    <span class="type">double</span> _min=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">t</span>&lt;_min)&#123;</span><br><span class="line">                _min=t;</span><br><span class="line">                d1=i;</span><br><span class="line">                d2=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x[d1]+y[d1])&gt;(x[d2]+y[d2]))&#123;</span><br><span class="line">        <span class="type">int</span> t=d1;</span><br><span class="line">        d1=d2;</span><br><span class="line">        d2=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%.2lf,%.2lf),(%.2lf,%.2lf),miniDist=%.3lf&quot;</span>,x[d1],y[d1],x[d2],y[d2],_min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="士兵排列"><a href="#士兵排列" class="headerlink" title="士兵排列"></a>士兵排列</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max 10000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)*((<span class="type">int</span>*)e1) - (<span class="type">int</span>)*((<span class="type">int</span>*)e2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n,<span class="type">int</span> mid)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="built_in">abs</span>(a[i]-mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x[Max] = &#123; <span class="number">0</span> &#125;, y[Max] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line">qsort(x, n, <span class="keyword">sizeof</span>(x[<span class="number">0</span>]), Compare);</span><br><span class="line">qsort(y, n, <span class="keyword">sizeof</span>(y[<span class="number">0</span>]), Compare);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">x[i] = x[i] - i;</span><br><span class="line">&#125;</span><br><span class="line">qsort(x, n, <span class="keyword">sizeof</span>(x[<span class="number">0</span>]), Compare);</span><br><span class="line"><span class="type">int</span> Y_mid = y[n / <span class="number">2</span>], X_mid = x[n / <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> y_sum = <span class="number">0</span>, x_sum = <span class="number">0</span>;</span><br><span class="line">y_sum = add(y, n, Y_mid);</span><br><span class="line">x_sum = add(x, n, X_mid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x_sum + y_sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">words = <span class="string">&quot;&quot;</span>.join([line <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin])</span><br><span class="line">words = re.<span class="built_in">compile</span>(<span class="string">r&quot;\w+&quot;</span>, re.I).findall(words.lower().split(<span class="string">&#x27;#&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">words = [each.strip() <span class="keyword">for</span> each <span class="keyword">in</span> words]</span><br><span class="line">words = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> each: each[<span class="number">0</span>:<span class="number">15</span>] <span class="keyword">if</span> <span class="built_in">len</span>(each) &gt; <span class="number">15</span> <span class="keyword">else</span> each, words))</span><br><span class="line">counter = collections.Counter(words)</span><br><span class="line">rank = <span class="built_in">sorted</span>(counter.items(), key=<span class="keyword">lambda</span> each: (-each[<span class="number">1</span>], each[<span class="number">0</span>]), reverse=<span class="literal">False</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(rank)) </span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> rank[<span class="number">0</span>:<span class="built_in">int</span>(<span class="number">0.1</span>*<span class="built_in">len</span>(rank))]: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(each[<span class="number">1</span>], each[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打印学生选课清单"><a href="#打印学生选课清单" class="headerlink" title="打印学生选课清单"></a>打印学生选课清单</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, age, N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">51</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= <span class="number">50</span>;i++)</span><br><span class="line">        arr[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">        arr[age] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">classList</span>&#123;</span></span><br><span class="line"><span class="type">int</span> cid;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classList</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;CL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">classTable</span>&#123;</span></span><br><span class="line">CL* head;</span><br><span class="line">CL* tail;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">&#125;CT;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">CT* st[<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//hash </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hs</span><span class="params">(<span class="type">char</span> s[])</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)((s[<span class="number">3</span>]-<span class="string">&#x27;0&#x27;</span>)+(s[<span class="number">2</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">10</span>+(s[<span class="number">1</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">26</span>*<span class="number">10</span>+(s[<span class="number">0</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">CT* t=(CT*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CT));</span><br><span class="line">t-&gt;head=(CL*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CL));</span><br><span class="line">t-&gt;head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">t-&gt;cnt=<span class="number">0</span>;</span><br><span class="line">t-&gt;tail=t-&gt;head;</span><br><span class="line">st[i]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> bn,stn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;bn,&amp;stn);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;stn;j++)&#123;</span><br><span class="line"><span class="type">char</span> sid[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="type">int</span> id=hs(sid);</span><br><span class="line">CL* t=(CL*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CL));</span><br><span class="line">t-&gt;cid=bn;</span><br><span class="line">t-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">st[id]-&gt;tail-&gt;next=t;</span><br><span class="line">st[id]-&gt;tail=st[id]-&gt;tail-&gt;next;</span><br><span class="line">(st[id]-&gt;cnt)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">char</span> sid[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="type">int</span> id=hs(sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,st[id]-&gt;cnt);</span><br><span class="line">CL* p=st[id]-&gt;head-&gt;next;</span><br><span class="line"><span class="comment">//桶排序 </span></span><br><span class="line"><span class="type">int</span>* bk=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(k+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">bk[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line">bk[p-&gt;cid]=<span class="number">1</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(bk[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(bk); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="深入虎穴"><a href="#深入虎穴" class="headerlink" title="深入虎穴"></a>深入虎穴</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">List&lt;Integer&gt;[] g = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.setAll(g, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"><span class="type">int</span>[] inDeg = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">x = in.nextInt();</span><br><span class="line">g[i].add(x);</span><br><span class="line">inDeg[x]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(inDeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">s = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">q.offer(s);</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">x = q.poll();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line">q.offer(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.print(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line"><span class="type">long</span>[] tree;</span><br><span class="line"><span class="type">long</span>[] tag;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">N = n;</span><br><span class="line">tree = <span class="keyword">new</span> <span class="title class_">long</span>[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">tag = <span class="keyword">new</span> <span class="title class_">long</span>[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">build(a, <span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ls</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rs</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(pl == pr) &#123;</span><br><span class="line">tree[p] = a[pl - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(a, ls(p), pl, mid);</span><br><span class="line">build(a, rs(p), mid + <span class="number">1</span>, pr);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTag</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">tree[p] = (pr - pl + <span class="number">1</span>) * val;</span><br><span class="line">tag[p] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_down</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(tag[p] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">addTag(ls(p), pl, mid, tag[p]);</span><br><span class="line">addTag(rs(p), mid + <span class="number">1</span>, pr, tag[p]);</span><br><span class="line">tag[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_up</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">tree[p] = tree[ls(p)] + tree[rs(p)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">long</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= pl &amp;&amp; pr &lt;= r) &#123;</span><br><span class="line">addTag(p, pl, pr, val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p, pl, pr);</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) update(ls(p), pl, mid, l, r, val);</span><br><span class="line"><span class="keyword">if</span>(mid &lt; r) update(rs(p), mid + <span class="number">1</span>, pr, l, r, val);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= pl &amp;&amp; pr &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p];</span><br><span class="line">&#125;</span><br><span class="line">push_down(p, pl, pr);</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) res += query(ls(p), pl, mid, l, r);</span><br><span class="line"><span class="keyword">if</span>(mid &lt; r) res += query(rs(p), mid + <span class="number">1</span>, pr, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六度空间"><a href="#六度空间" class="headerlink" title="六度空间"></a>六度空间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> List&lt;Integer&gt;[] g;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">n = in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">g = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.setAll(g, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">g[u].add(v);</span><br><span class="line">g[v].add(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span>[] ans = <span class="keyword">new</span> <span class="title class_">double</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans[i] = <span class="number">100.0</span> * bfs(i) / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">out.printf(<span class="string">&quot;%d: %.2f&quot;</span>, i, ans[i]);</span><br><span class="line">out.println(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">q.offer(e);</span><br><span class="line">vis[e] = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>, dis = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> q.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[y]) &#123;</span><br><span class="line">vis[y] = <span class="literal">true</span>;</span><br><span class="line">cnt++;</span><br><span class="line">q.offer(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis++;</span><br><span class="line"><span class="keyword">if</span>(dis &gt; <span class="number">6</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功夫传人"><a href="#功夫传人" class="headerlink" title="功夫传人"></a>功夫传人</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100005</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> winners[MAX];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;peoples[MAX];</span><br><span class="line">    <span class="type">int</span> k, id, x, N;</span><br><span class="line">    <span class="type">double</span> r,Z, sum=<span class="number">0.0</span>;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; Z &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            peoples[i].<span class="built_in">push_back</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            winners[i] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">int</span>(winners[<span class="number">0</span>]*Z);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">     <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())<span class="comment">//bfs层次遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">size</span>();</span><br><span class="line">        level++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> top=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;peoples[top].<span class="built_in">size</span>();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(peoples[top][j]);</span><br><span class="line">                <span class="type">double</span> temp=Z*winners[peoples[top][j]]*<span class="built_in">pow</span>(<span class="number">1</span>-r*<span class="number">0.01</span>,level);</span><br><span class="line">                sum+=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(sum);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列出连通集"><a href="#列出连通集" class="headerlink" title="列出连通集"></a>列出连通集</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLOSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> vertex)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> vertex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getInsideNext</span><span class="params">(<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> matrix[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="type">int</span> isVisited[<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            matrix[i][j]=CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> y,x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;y,&amp;x);</span><br><span class="line">        matrix[y][x]=<span class="number">1</span>;</span><br><span class="line">        matrix[x][y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            DFS(i);</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isVisited[j])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++)</span><br><span class="line">        isVisited[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            BFS(i);</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isVisited[j])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getInsideNext</span><span class="params">(<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;n; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[y][x]!=CLOSE)&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x+<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[y][i]!=CLOSE) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> vertex)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,vertex);</span><br><span class="line">    isVisited[vertex]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> w=getInsideNext(vertex);</span><br><span class="line">    <span class="keyword">while</span>(w!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[w])&#123;</span><br><span class="line">            DFS(w);</span><br><span class="line">        &#125;</span><br><span class="line">        w=getNext(vertex,w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> vertex)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isVisited[vertex])</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,vertex);</span><br><span class="line">    isVisited[vertex]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> da[<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;n; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[vertex][x]!=CLOSE &amp;&amp; !isVisited[x])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,x);</span><br><span class="line">            da[size++]=x;</span><br><span class="line">            isVisited[x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">        BFS(da[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="哈利波特的考试"><a href="#哈利波特的考试" class="headerlink" title="哈利波特的考试"></a>哈利波特的考试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="comment">//static Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[][] dis;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">n = in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">dis = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) Arrays.fill(dis[i], INF); <span class="comment">// 避免溢出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">u = in.nextInt() - <span class="number">1</span>;</span><br><span class="line">v = in.nextInt() - <span class="number">1</span>;</span><br><span class="line">w = in.nextInt();</span><br><span class="line">dis[u][v] = dis[v][u] = w;</span><br><span class="line">dis[u][u] = dis[v][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">floyd();</span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>, distance = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j : dis[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(j != INF) mx = Math.max(mx, j);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">out.print(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mx &lt; distance) &#123;</span><br><span class="line">distance = mx;</span><br><span class="line">pos = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.print(pos + <span class="string">&quot; &quot;</span> + distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">dis[i][j] = Math.min(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装箱问题"><a href="#装箱问题" class="headerlink" title="装箱问题"></a>装箱问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="comment">//static Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">List&lt;Integer&gt; box = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; box.size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(box.get(j) &gt;= v) &#123;</span><br><span class="line">box.set(j, box.get(j) - v);</span><br><span class="line">idx = j + <span class="number">1</span>;</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f) &#123;</span><br><span class="line">box.add(<span class="number">100</span> - v);</span><br><span class="line">idx = box.size();</span><br><span class="line">&#125;</span><br><span class="line">out.println(v + <span class="string">&quot; &quot;</span> + idx);</span><br><span class="line">&#125;</span><br><span class="line">out.println(box.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="月饼"><a href="#月饼" class="headerlink" title="月饼"></a>月饼</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>)solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">D</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">mk[] cake = <span class="keyword">new</span> <span class="title class_">mk</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cake[i] = <span class="keyword">new</span> <span class="title class_">mk</span>();</span><br><span class="line">cake[i].storage = in.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cake[i].sale = in.nextDouble();</span><br><span class="line">cake[i].unit_price = cake[i].sale / cake[i].storage;</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(cake, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;mk&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(mk a, mk b)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a.unit_price &lt; b.unit_price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a.unit_price &gt; b.unit_price) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(mk i : cake) &#123;</span><br><span class="line"><span class="keyword">if</span>(i.storage &lt; D) &#123;</span><br><span class="line">D -= i.storage;</span><br><span class="line">sum += i.sale;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">sum += D * i.unit_price;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.printf(<span class="string">&quot;%.2f&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mk</span>&#123;</span><br><span class="line"><span class="type">double</span> storage, sale;</span><br><span class="line"><span class="type">double</span> unit_price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="主观题"><a href="#主观题" class="headerlink" title="主观题"></a>主观题</h1><h2 id="一笔画"><a href="#一笔画" class="headerlink" title="一笔画"></a>一笔画</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[] deg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> in.nextInt() - <span class="number">1</span>;</span><br><span class="line">            deg[x]++;</span><br><span class="line">            deg[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : deg) <span class="keyword">if</span>((i &amp; <span class="number">1</span>) == <span class="number">1</span>) cnt++;</span><br><span class="line">        out.print(cnt == <span class="number">0</span> || cnt == <span class="number">2</span> ? <span class="string">&quot;Y&quot;</span> : <span class="string">&quot;N&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式---单例模式</title>
      <link href="/2023/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p></blockquote><p>设计模式分为三大类（23种）：</p><ul><li>创建模型模式：工厂方法模式、抽象工厂模式、**<u>单例模式</u>**、建造者模式、原型模式</li><li>结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</li><li>行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</li></ul><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>单例模式（singleton）：某个类只能生成一个实例，该类提供了一个全局访问点（一个公共方法）供外部获取该实例。</p></blockquote><p>优点：</p><ul><li><p>只有一个实例，节约内存资源，提高系统性能。</p></li><li><p>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p></li><li><p>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</p></li><li><p>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p></li></ul><p>缺点：</p><ul><li>没有抽象层，不能拓展</li></ul><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 饿汉式</span></span><br><span class="line"><span class="comment">      构造私有：其他类无法调用构造方法创建实例对象</span></span><br><span class="line"><span class="comment">      提供静态成员变量，类型为单例类型，值为私有构造创建的唯一实例</span></span><br><span class="line"><span class="comment">      公有静态方法 getInstance()，方法的实现为返回静态成员变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton01</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//      防止反射构造单例</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不能重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton01()：饿汉式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton01</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    防止反序列化构造单例</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton01.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton01.getInstance());</span><br><span class="line">        System.out.println(Singleton01.getInstance());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        反射破坏单例</span></span><br><span class="line">        <span class="comment">//        reflection(Singleton01.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        反序列化破坏单例</span></span><br><span class="line">        <span class="comment">//        serializable(Singleton01.getInstance());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializable</span><span class="params">(Object instance)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray()));</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化创建实例：&quot;</span> + ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflection</span><span class="params">(Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : clazz.getDeclaredConstructors()) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射创建实例：&quot;</span> + constructor.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="饿汉式-—-枚举"><a href="#饿汉式-—-枚举" class="headerlink" title="饿汉式 — 枚举"></a>饿汉式 — 枚举</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 枚举饿汉式</span></span><br><span class="line"><span class="comment">        不怕反射破坏单例，</span></span><br><span class="line"><span class="comment">        不怕反序列化破坏单例，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton02</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    Singleton02() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton02()：饿汉式 --- m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton02.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton02.getInstance());</span><br><span class="line">        System.out.println(Singleton02.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式</span></span><br><span class="line"><span class="comment">      懒惰式加载，只有在第一次调用时才创建</span></span><br><span class="line"><span class="comment">      在多线程下，会创建多个实例，可以通过加锁来防止</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton03</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton03()：懒汉式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton03</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton03 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        有值就不重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton03</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton03.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton03.getInstance());</span><br><span class="line">        System.out.println(Singleton03.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式-—-DCL"><a href="#懒汉式-—-DCL" class="headerlink" title="懒汉式 — DCL"></a>懒汉式 — DCL</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式 --- DCL 双检索</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton04</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton04()：懒汉式 -- DCL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton04</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//        有值就不重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton04.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton04</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton04.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton04.getInstance());</span><br><span class="line">        System.out.println(Singleton04.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式-—-内部类"><a href="#懒汉式-—-内部类" class="headerlink" title="懒汉式 — 内部类"></a>懒汉式 — 内部类</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式 --- 内部类</span></span><br><span class="line"><span class="comment">    对象的创建放在静态代码块中，由 jvm保证线程安全</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton05</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton05</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton05()：懒汉式 -- 内部类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    静态内部类，可以访问外部的私有变量，私有构造</span></span><br><span class="line">    <span class="comment">//    懒惰式加载，在调用时执行类的加载初始化链接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">Singleton05</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton05</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//        调用内部类</span></span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton05.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton05.getInstance());</span><br><span class="line">        System.out.println(Singleton05.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>参考文章：</p><p>​    <a href="https://blog.csdn.net/sugar_no1/article/details/88317950">Java中常用的设计模式</a></p><p>​    <a href="https://www.bilibili.com/video/BV15b4y117RJ/?p=60&spm_id_from=pageDriver&vd_source=58f742b47eee869bcdb1d4967d8bf5f5">单例模式</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 磁盘扩容，vgdisplay 显示为空</title>
      <link href="/2023/06/06/Centos7_vgdisplay_null/"/>
      <url>/2023/06/06/Centos7_vgdisplay_null/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本文适用情况："><a href="#本文适用情况：" class="headerlink" title="本文适用情况："></a>本文适用情况：</h1><ul><li>配置虚拟机时，分区是自行配置，没有使用默认分区</li><li>使用 vgdisplay 命令，什么也没有显示</li><li>Centos7 64x，根目录分区为 xfs 格式</li></ul><h1 id="扩容磁盘空间"><a href="#扩容磁盘空间" class="headerlink" title="扩容磁盘空间"></a>扩容磁盘空间</h1><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150810153.png"></p><h1 id="查看当前分区信息"><a href="#查看当前分区信息" class="headerlink" title="查看当前分区信息"></a>查看当前分区信息</h1><blockquote><p><strong>可见根目录挂载在 sda3</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145544073.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606151817362.png"></p><h1 id="安装分区工具"><a href="#安装分区工具" class="headerlink" title="安装分区工具"></a>安装分区工具</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install cloud-utils-growpart gdisk -y</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145606881.png"></p><h1 id="卷扩容"><a href="#卷扩容" class="headerlink" title="卷扩容"></a>卷扩容</h1><blockquote><p><strong>3 就是根目录所在分区</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">growpart /dev/sda 3</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145759615.png"></p><blockquote><p><strong>此时，分区大小已经变为调整后的大小</strong></p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145857428.png"></p><h1 id="文件系统扩容"><a href="#文件系统扩容" class="headerlink" title="文件系统扩容"></a>文件系统扩容</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150005116.png"></p><blockquote><p><strong>扩容成功</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150043589.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p>🖋 <a href="https://blog.csdn.net/qq_40068214/article/details/124812732">解决centos7 根目录扩容vgdisplay数据卷为空不能扩容问题</a></p><p>🖍<a href="https://blog.csdn.net/weixin_43730142/article/details/129067852?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-129067852-blog-124812732.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-129067852-blog-124812732.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=3">Linux操作系统之centos7根目录扩容（根目录在sda3 vgdisplay为空）</a></p><p>✏<a href="https://blog.csdn.net/Chen_qi_hai/article/details/108814596">VMware虚拟机扩展磁盘容量</a></p><p>🖌<a href="https://blog.csdn.net/weixin_44295084/article/details/125725574">对VMware已经创建的虚拟机进行磁盘扩容过程以及会遇到的问题</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5&amp;MD5加盐</title>
      <link href="/2023/06/04/MD5&amp;Salt/"/>
      <url>/2023/06/04/MD5&amp;Salt/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>👀 MD5 是一种常见的加密方式，常用于加密存储密码。全称为：Message-Digest Algoorithm 5，信息摘要算法</p><p>它具有以下特性：⛏</p><ul><li>压缩性：任意长度的数据，算出的 MD5 值都是固定的</li><li>容易计算：从原数据计算出 MD5 值很容易</li><li>抗修改性：改变原数据后，所得到的 MD5 值都有很大的差别</li><li>强抗碰撞：想找到两个不同的数据，使它们具有相同的 MD5 值是非常困难的。</li></ul><p>综上：<strong>每个数据都对应一个唯一的 MD5 值</strong></p><blockquote><p>例如：123456 的 MD5 值为：e10adc3949ba59abbe56e057f20f883e</p><p>MD5值 e10adc3949ba59abbe56e057f20f883e 对应的原数据为 123456</p></blockquote><p>也就是说，如果知道了 MD5 值，就可以反向推出加密前的数据（应为MD5是唯一的）</p><p>详情请看：<a href="https://www.zhihu.com/question/19790488">彩虹表</a></p><p><u>所以我们就无法单独使用 MD5 来进行数据的加密存储。</u></p><p>MD5 的实现方式有很多种，JDK自带的 MessageDigest 和 Spring 封装好的 DigestUtils</p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">MessageDigest</button></li><li class="tab"><button type="button" data-href="#note-2">DigestUtils</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageDigest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;heroxin&quot;</span>;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        md.update(password.getBytes());</span><br><span class="line">        <span class="type">String</span> <span class="variable">hashedPwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        System.out.println(hashedPwd);</span><br><span class="line">        <span class="comment">//            ec76c5758966b3f63639fd84f524955a</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">digestUtils</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtils.md5Hex(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h1><p>为了提高安全性，可以采取加盐的方式。</p><p>就是生成一些随机数与 MD5 值进行组合，这些随机数称为 盐 (salt)</p><p>这样获取到的新字符串是服务解密为原数据的。</p><p>在存储时，数据库同时存储 MD5 值和 salt 值。验证正确性时使用 salt 进行 MD5即可。</p><p>具体的实现可以使用 Spring Security 中的 <strong>BCryptPasswordEncoder</strong></p><blockquote><p>BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥对密码进行加密。SHA系列是<a href="https://so.csdn.net/so/search?q=Hash&spm=1001.2101.3001.7020">Hash</a>算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p><p>详情请看：<a href="https://blog.csdn.net/u012888704/article/details/107406374">BCryptPasswordEncoder</a></p></blockquote><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">加密</button></li><li class="tab"><button type="button" data-href="#note-2">验证</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">    <span class="comment">//        $2a$10$4Xvl1DviJqS.ggItgMKmTO6JjbGbiX3btz/qdneVkPmNZ.zhO6br2</span></span><br><span class="line">    System.out.println(encode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="comment">//     前者为明文，后者为密文</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> bc.matches(<span class="string">&quot;heroxin&quot;</span>, <span class="string">&quot;$2a$10$4Xvl1DviJqS.ggItgMKmTO6JjbGbiX3btz/qdneVkPmNZ.zhO6br2&quot;</span>);</span><br><span class="line">    <span class="comment">//        true</span></span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Registry</title>
      <link href="/2023/05/30/DockerRegistry/"/>
      <url>/2023/05/30/DockerRegistry/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-Registry-本地私有仓库配置"><a href="#Docker-Registry-本地私有仓库配置" class="headerlink" title="Docker Registry 本地私有仓库配置"></a>Docker Registry 本地私有仓库配置</h1><h2 id="查询本机IP"><a href="#查询本机IP" class="headerlink" title="查询本机IP"></a>查询本机IP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h2 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h2><p>要确保DockerRegistry本地镜像仓库的安全信，还需要一个安全认证证书，来保证其他Docker机器不能随意访问该机器上的本地镜像仓库。（如果已购买证书，就不需要生成了）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/docker/registry</span><br><span class="line">mkdir /usr/local/docker/registry/certs</span><br><span class="line">cd /usr/local/docker/registry/certs/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -days 3560 -subj &#x27;/CN=192.168.196.101:5000/&#x27; -nodes -newkey rsa:2048 -keyout domain.key -out domain.crt</span><br></pre></td></tr></table></figure><blockquote><ul><li>-x509：是一个自签发证书的格式</li><li>-days 3650：证书的有效时间</li><li>192.168.196.101:5000：仓库的地址和端口</li><li>rsa:2048：证书算法长度</li><li>domain.key和domain.crt：生成的证书文件</li></ul></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230530194542601.png"></p><h2 id="生成用户名和密码"><a href="#生成用户名和密码" class="headerlink" title="生成用户名和密码"></a>生成用户名和密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/docker/registry/auth</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">htpasswd -Bbn heroxin   &gt; /usr/local/docker/registry/auth/htpasswd</span><br></pre></td></tr></table></figure><h2 id="启动Docker-Registry-本地镜像仓库服务"><a href="#启动Docker-Registry-本地镜像仓库服务" class="headerlink" title="启动Docker Registry 本地镜像仓库服务"></a>启动Docker Registry 本地镜像仓库服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name registry \</span><br><span class="line">-v /usr/local/docker/registry:/var/lib/registry \</span><br><span class="line">-v /usr/local/docker/registry/auth:/auth \</span><br><span class="line">-e &quot;REGISTRY_AUTH=htpasswd&quot; \</span><br><span class="line">-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \</span><br><span class="line">-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">-v /usr/local/docker/registry/certs:/certs \</span><br><span class="line">-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">-e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">registry:2</span><br></pre></td></tr></table></figure><h2 id="配置Docker-Registry-访问接口"><a href="#配置Docker-Registry-访问接口" class="headerlink" title="配置Docker Registry 访问接口"></a>配置Docker Registry 访问接口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/192.168.196.101:5000</span><br><span class="line">cp /usr/local/docker/registry/certs/domain.crt /etc/docker/certs.d/192.168.196.101\:5000/</span><br></pre></td></tr></table></figure><h2 id="Docker-Registry-私有仓库使用登记"><a href="#Docker-Registry-私有仓库使用登记" class="headerlink" title="Docker Registry 私有仓库使用登记"></a>Docker Registry 私有仓库使用登记</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://sdo6tk7g.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.196.101:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="准备镜像文件"><a href="#准备镜像文件" class="headerlink" title="准备镜像文件"></a>准备镜像文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag tomcat:latest 192.168.196.101:5000/mytomca</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login 192.168.196.101:5000</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531090428080.png"></p><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push 192.168.196.101:5000/mytomcat</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531090636807.png"></p><h2 id="查看-DockerRegistry-仓库推送的文件"><a href="#查看-DockerRegistry-仓库推送的文件" class="headerlink" title="查看 DockerRegistry 仓库推送的文件"></a>查看 DockerRegistry 仓库推送的文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /usr/local/docker/registry/docker/registry/v2/repositories/</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531091157912.png" alt="image-20230531091157912"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2023/04/28/ThreadPool/"/>
      <url>/2023/04/28/ThreadPool/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h2><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>核心线程数，线程池创建好之后就准备就绪的线程数量，就等待来接收异步任务；只要线程池不销毁，就一直存在</td></tr><tr><td>int maximumPoolSize</td><td>最大线程数量，控制资源</td></tr><tr><td>long keepAliveTime</td><td>当前线程数量大于核心数量， 只要线程空闲大于指定时间，就会释放。核心线程是不释放的。</td></tr><tr><td>TimeUnit unit</td><td>超时单位</td></tr><tr><td>BlockingQueue<Runnable> workQueue</td><td>阻塞队列，如果任务数超过核心程数量，就会将多余的任务放到队列当中，只要线程空闲，就会从队列中取出任务</td></tr><tr><td>ThreadFactory threadFactory</td><td>线程的创建工厂，通常默认，不做修改</td></tr><tr><td>RejectedExecutionHandler handler</td><td>拒接策略，如果队列满了，按照我们的定义的拒绝策略来拒绝任务。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h2><table><thead><tr><th>拒绝策略名</th><th>释义</th></tr></thead><tbody><tr><td>AbortPolicy()</td><td>队列满了，抛出异常</td></tr><tr><td>CallerRunsPolicy()</td><td>直接 <strong>同步</strong> 调用它的这个任务的 run 方法，因为使用继承 runnable 接口实现多线程时，runnable 里的 run 方法是同步调用，想要异步调用就得使用 new thread().start();</td></tr><tr><td>DiscardPolicy()</td><td>队列满了，丢掉任务，不会抛出异常</td></tr><tr><td>DiscardOldestPolicy()</td><td>队列满了，尝试和最早进来的，还未执行的线程竞争，如果成功就执行，不成功就丢弃，不会抛出异常</td></tr></tbody></table><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">AbortPolicy</button></li><li class="tab"><button type="button" data-href="#note-2">CallerRunsPolicy</button></li><li class="tab"><button type="button" data-href="#note-3">DiscardPolicy</button></li><li class="tab"><button type="button" data-href="#note-4">DiscardOldestPolicy</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbortPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an &#123;<span class="doctag">@code</span> AbortPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbortPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RejectedExecutionException</span>(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                             <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                             e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> CallerRunsPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallerRunsPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes task r in the caller&#x27;s thread, unless the executor</span></span><br><span class="line"><span class="comment">     * has been shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DiscardPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscardPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Does nothing, which has the effect of discarding task r.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DiscardOldestPolicy&#125; for the given executor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscardOldestPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Obtains and ignores the next task that the executor</span></span><br><span class="line"><span class="comment">     * would otherwise execute, if one is immediately available,</span></span><br><span class="line"><span class="comment">     * and then retries execution of task r, unless the executor</span></span><br><span class="line"><span class="comment">     * is shut down, in which case task r is instead discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">            e.getQueue().poll();</span><br><span class="line">            e.execute(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h2><table><thead><tr><th>方法名</th><th>释义</th></tr></thead><tbody><tr><td>newSingleThreadExecutor()</td><td>单个线程</td></tr><tr><td>newFixedThreadPool(int nThreads)</td><td>创建一个固定大小的线程池</td></tr><tr><td>newCachedThreadPool()</td><td>大小可变化的线程池</td></tr></tbody></table><blockquote><p>其他方法：newScheduledThreadPool()，创建一个定长线程池，支持定时及周期性任务执行。</p></blockquote><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">newSingleThreadExecutor</button></li><li class="tab"><button type="button" data-href="#note-2">newFixedThreadPool</button></li><li class="tab"><button type="button" data-href="#note-3">newCachedThreadPool</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="线程池运行流程"><a href="#线程池运行流程" class="headerlink" title="线程池运行流程"></a>线程池运行流程</h2><p>1、线程池创建，准备好 core 数量的核心线程，准备接受任务</p><p>2、新的任务进来，用 core 准备好的空闲线程执行。</p><ul><li>core 满了，就将再进来的任务放入阻塞队列中。空闲的 core 就会自己去阻塞队 列获取任务执行 </li><li>阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量 </li><li>max 都执行好了。Max-core 数量空闲的线程会在 keepAliveTime 指定的时间后自 动销毁。最终保持到 core 大小</li><li>如果线程数开到了 max 的数量，还有新任务进来，就会使用 reject 指定的拒绝策 略进行处理</li></ul><p>3、所有的线程创建都是由指定的 factory 创建的。</p><h2 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h2><ul><li><p>降低资源的消耗</p><p>通过重复利用已经创建好的线程降低线程的创建和销毁带来的损耗 </p></li><li><p>提高响应速度</p><p>因为线程池中的线程数没有超过线程池的最大上限时，有的线程处于等待分配任务 的状态，当任务来时无需创建新的线程就能执行</p></li><li><p>提高线程的可管理性</p><p>线程池会根据当前系统特点对池内的线程进行优化处理，减少创建和销毁线程带来 的系统开销。无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使 用线程池进行统一分配</p></li></ul><h2 id="最大线程定义方法"><a href="#最大线程定义方法" class="headerlink" title="最大线程定义方法"></a>最大线程定义方法</h2><ul><li><p>CPU密集型：电脑核数为几，就定义为几，可以保证CPU效率最高</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取电脑逻辑处理器个数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure></li><li><p>IO密集型：设置为 IO 任务数量的两倍</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 线程池的三大方法</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//        单个线程</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();</span></span><br><span class="line">        <span class="comment">//        创建一个固定大小的线程池</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span><br><span class="line">        <span class="comment">//        可变化的线程池</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newCachedThreadPool();</span></span><br><span class="line">        <span class="comment">//        定时任务线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 其他方法：创建定时任务线程池</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//        ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        手动创建线程池</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            Runtime.getRuntime().availableProcessors(),</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="comment">// 有四种拒绝策略</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()   <span class="comment">// 队列满了，抛出异常</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//            最大接受 maximumPoolSize + capacity，超过就会被拒绝策略接收</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//            线程池用完，程序结束，关闭线程池</span></span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><div class="note danger simple"><p>问题：一个线程池中，core：7，max：20，queue：50，100个并发进来怎么分配 ？</p></div><div class="note success simple"><p>7个会立即得到执行，50个进入队列，再开  13 个线程进行执行。剩下的 30 个使用拒绝策略执行。</p></div>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式接口</title>
      <link href="/2023/04/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
      <url>/2023/04/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><blockquote><p>函数式接口：有且只有一个抽象方法的，可以有多个非抽象方法的接口，主要用于 Lambda 表达式</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line"> R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">     Objects.requireNonNull(before);</span><br><span class="line">     <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">     Objects.requireNonNull(after);</span><br><span class="line">     <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> t -&gt; t;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@FunctionalInterface ：用于检查是否符合函数式接口</p></blockquote><p><strong>Since jdk 1.8 ，java.util.function 包中主要是这四个方法，其他都是四个方法的拓展</strong></p> <div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">函数型接口</button></li><li class="tab"><button type="button" data-href="#note-2">断定型接口</button></li><li class="tab"><button type="button" data-href="#note-3">消费型接口</button></li><li class="tab"><button type="button" data-href="#note-4">供给型接口</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Function 函数型接口：第一个 String 为返回类型，第二个 String 为输入参数类型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FunctionFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Function&lt;String, String&gt; function = (str) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(function.apply(<span class="string">&quot;heroxin&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Predicate 断定型接口，输入参数，返回布尔值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">PredicateFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate = (str) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="string">&quot;heroxin&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Consumer 消费型接口：有输入参数，没有返回值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ConsumerFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = (str) -&gt; &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Supplier 供给型接口：没有输入参数，有返回值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SupplierFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Supplier&lt;String&gt; supplier = () -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;heroxin&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lambda</title>
      <link href="/2023/04/20/Lambda/"/>
      <url>/2023/04/20/Lambda/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (name) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven锁定版本与版本常量</title>
      <link href="/2023/04/18/Maven%E9%94%81%E5%AE%9A%E7%89%88%E6%9C%AC%E4%B8%8E%E7%89%88%E6%9C%AC%E5%B8%B8%E9%87%8F/"/>
      <url>/2023/04/18/Maven%E9%94%81%E5%AE%9A%E7%89%88%E6%9C%AC%E4%B8%8E%E7%89%88%E6%9C%AC%E5%B8%B8%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven锁定版本与版本常量"><a href="#Maven锁定版本与版本常量" class="headerlink" title="Maven锁定版本与版本常量"></a>Maven锁定版本与版本常量</h1><p>今天在添加微服务模块是出现了个有趣的现象：</p><p>​    创建了多个微服务；</p><p>​    它们都引用同一个微服务–common；</p><p>​    在common中配置这些微服务的共同依赖；</p><p>​    common中使用锁定版本与版本常量的方式配置好了 spring cloud 、spring cloud alibaba；</p><p>​    在common中配置好 nacos</p><p>​    其他的微服务是通过 Spring Initializr 的方式生成的（没选择其他依赖），所以只有 springboot 的依赖</p><p>​    启动微服务，报错：nacos 和 spring cloud 版本不兼容。</p><p>纳尼？</p><p>版本不能出错，我之前使用过。</p><p>在微服务模块中加入 spring cloud 依赖，启动成功！</p><p>纳尼？？？</p><p>我不是在 common中配置好了吗？ 根据依赖传递，其他微服务中应该不用配置啊？</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dependencyManagement 叫做版本锁定，是为了避免因依赖冲突而产生的路径声明、声明顺序等问题，它不会真正的导入依赖，只有在你导入依赖后，进行对应的版本锁定。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties 叫做版本常量，在使用坐标时，对于同一个框架，引入多次时，它的版本信息就好多次出现，所以可以借用常量的思想，将这些版本号提取出来，在需要用到的地方，直接写版本常量名就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>啊？</title>
      <link href="/2023/03/31/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
      <url>/2023/03/31/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.5.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-spring-boot.version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">aliyun-spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="OOOO"><a href="#OOOO" class="headerlink" title="OOOO"></a>OOOO</h1><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230524165805467.png"></p><ol><li><p>PO(persistant object)：持久化对象</p><p>po 就是对应数据库中某个表的一条记录，多个记录可以用 po 的集合</p></li><li><p>DO(domain object)：领域对象</p><p>就是从现实世界抽象出来的有形或无形的业务实体</p></li><li><p>TO(Transfer object)：数据传输对象</p><p>不同的应用程序之间传输的对象</p></li><li><p>DTO(Data Transfer object)：数据传输对象</p><p>这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的 数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这 里，泛指用于展示层与服务层之间的数据传输对象。</p></li><li><p>VO(Value object)：值对象</p><p>通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出的业务对象 , 可以和表对应 , 也可以不 , 这根据业务的需要 。用 new 关键字创建，由 GC 回收的。</p><p>View object：视图对象； 接受页面传递来的数据，封装对象将业务处理完成的对象，封装成页面要用的数据</p></li><li><p>BO(Business object)：业务对象</p><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对 象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。business object: 业务对象 主要作 用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简 历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经 历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每 个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p></li></ol><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        nacos--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        根据本地安装的nacos1.4.1，使用 2.2.5.RELEASE 版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        排除 netflix-ribbon ，加入 loadbalancer--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring cloud 从2021.0.5起，默认不在使用 bootstrap，需要导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    将服务注册到Nacos</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-GateWay</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># 服务地址：端口</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>开启服务注册发现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        nacos--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        根据本地安装的nacos1.4.1，使用 2.2.5.RELEASE 版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        排除 netflix-ribbon ，加入 loadbalancer--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring cloud 从2021.0.5起，默认不在使用 bootstrap，需要导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p><p><strong>bootsrtap.yaml</strong>，优先级高于 application.properties</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-Coupon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 配置中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心的文件后缀</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 配置文件所属组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#        group: prop</span></span><br><span class="line">        <span class="comment"># 配置命名空间（习惯于一个微服务开一个命名空间，用组名区分开发环境与上线环境等）</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">6b7a84db-c36c-4197-ba58-b624c56947f2</span></span><br></pre></td></tr></table></figure></li><li><p>根据配置文件在Nacos添加配置文件 <strong>GuliMall-Coupon.yaml，group：dev</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230329154811598.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230329162005945.png"></p></li><li><p>开启热部署</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新配置</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   feign   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   如果使用nacos作为注册中心的话，需要排除ribbon，并加入loadbalance依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.gulimall.common.utils.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将服务注册到spring中，指定服务提供者的名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;GuliMall-Coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line">   <span class="comment">// 服务提供者的路径   </span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">   R <span class="title function_">membercoupons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MemberEntity</span> <span class="variable">memberEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line">    memberEntity.setNickname(<span class="string">&quot;hero&quot;</span>);</span><br><span class="line"> <span class="comment">//  couponFeignService 就是调用远程w   </span></span><br><span class="line">    <span class="type">R</span> <span class="variable">membercoupons</span> <span class="operator">=</span> couponFeignService.membercoupons();</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;member&quot;</span>, memberEntity).put(<span class="string">&quot;coupons&quot;</span>,membercoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启远程调用功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加在服务消费者的启动类上</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringBoot跨域处理"><a href="#SpringBoot跨域处理" class="headerlink" title="SpringBoot跨域处理"></a>SpringBoot跨域处理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>).</span><br><span class="line">            allowedOriginPatterns(<span class="string">&quot;*&quot;</span>). <span class="comment">//允许跨域的域名，可以用*表示允许任何域名使用</span></span><br><span class="line">            <span class="comment">//                allowedOrigins(&quot;*&quot;).    //在Springboot2.4对应Spring5.3后在设置allowCredentials(true)的基础上不能直接使用通配符设置allowedOrigins，而是需要指定特定的URL。如果需要设置通配符，需要通过allowedOriginPatterns指定</span></span><br><span class="line">            allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>) . <span class="comment">//允许任何方法（post、get等）</span></span><br><span class="line">            allowedHeaders(<span class="string">&quot;*&quot;</span>). <span class="comment">//允许任何请求头</span></span><br><span class="line">            allowCredentials(<span class="literal">true</span>). <span class="comment">//带上cookie信息</span></span><br><span class="line">            exposedHeaders(HttpHeaders.SET_COOKIE).maxAge(<span class="number">3600L</span>); <span class="comment">//maxAge(3600)表明在3600秒内，不需要再发送预检验请求，可以缓存该结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    将服务注册到Nacos，需要nacos地址和服务名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-GateWay</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># 注册中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="comment"># 路由规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#        product</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_rout</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://GuliMall-Product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        thirdparty</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">thirdparty_rout</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://GuliMall-ThirdParty</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/thirdparty/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/thirdparty/(?&lt;segment&gt;/?.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="处理跨域请求"><a href="#处理跨域请求" class="headerlink" title="处理跨域请求"></a>处理跨域请求</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 处理跨域请求</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mybatis-Plus-逻辑删除"><a href="#Mybatis-Plus-逻辑删除" class="headerlink" title="Mybatis-Plus 逻辑删除"></a>Mybatis-Plus 逻辑删除</h1><ol><li><p>配置规则（高版本可以省略）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 表示已删除</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure></li><li><p>加上逻辑删除注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure></li></ol><h1 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h1><blockquote><p>在 javax 包下</p></blockquote><ol><li><p>添加规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 品牌名</span></span><br><span class="line"><span class="comment">      * jsr303 数据校验</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Not(message = &quot;品牌名不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>开启校验</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@valild</span> 开启校验功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span>  <span class="meta">@RequestBody</span> BrandEntity brand)</span>&#123;</span><br><span class="line">    brandService.save(brand);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h1><p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p>前后端进行数据传输时，只需要实体类中的某些字段或者需要表中没有的字段时，可以设置一个VO封装满足自己需求的实体类。</p><h1 id="Windows10-端口占用"><a href="#Windows10-端口占用" class="headerlink" title="Windows10 端口占用"></a>Windows10 端口占用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat –aon |findstr “80”</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TASKKILL /PID 20976 /F</span><br></pre></td></tr></table></figure><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># 默认配置</span></span><br><span class="line">    <span class="attr">password:</span>  <span class="comment"># redis没有设置密码就不要设置了</span></span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        压入缓存，缓存中的数据是 json 字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">catalogJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catalogJson)) &#123;</span><br><span class="line">        <span class="comment">//            缓存中没有数据，将查到的数据放入缓存</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catalogJsonFromdb = getCatalogJsonFromdb();</span><br><span class="line">        <span class="comment">//            序列化</span></span><br><span class="line">        <span class="comment">//            将数据转化为json，json跨语言，跨平台兼容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> JSON.toJSONString(catalogJsonFromdb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, string, <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        反序列化，将json转化为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catalogJson, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        redis分布式锁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>RedissonClient</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有对redisson的使用都是通过调用redissonclient对象实现的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">//        创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.196.101:6379&quot;</span>);</span><br><span class="line">        <span class="comment">//        根据config配置创建从redissonclient实例</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码 </p><p><a href="https://blog.csdn.net/qq_35843095/article/details/109815062">看门狗</a> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testRLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        获取一把锁，只要锁的名字相同，就是同一把锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line">    <span class="comment">//        加锁，锁的过期时间为 30 s</span></span><br><span class="line">    <span class="comment">//        锁会自动续期 watchdog ： 如果业务执行时间过长，运行期间会自动续期到 30s</span></span><br><span class="line">    <span class="comment">//                  不用担心业务运行过程中锁过期而被删除</span></span><br><span class="line">    <span class="comment">//        加锁的业务只要运行完成，就不会进行锁续期。所以及时不手动解锁，在 30s 后锁就会被删除</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//        业务代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//            解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读写锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一定能读到最新数据，修改期间，写锁是一个排它锁（互斥锁、独享锁），读锁是一个共享锁</span></span><br><span class="line"><span class="comment">     * 写锁没释放,读锁必须等待</span></span><br><span class="line"><span class="comment">     * 读 + 读 ：相当于无锁，并发读，只会在Redis中记录好，所有当前的读锁。他们都会同时加锁成功</span></span><br><span class="line"><span class="comment">     * 写 + 读 ：必须等待写锁释放</span></span><br><span class="line"><span class="comment">     * 写 + 写 ：阻塞方式</span></span><br><span class="line"><span class="comment">     * 读 + 写 ：有读锁。写也需要等待</span></span><br><span class="line"><span class="comment">     * 只要有读或者写的存都必须等待</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redissonClient.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//改数据加写锁，读数据加读锁</span></span><br><span class="line">        rLock.lock();</span><br><span class="line">        s = UUID.randomUUID().toString();</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        ops.set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testReadLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redissonClient.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="comment">//加读锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rLock.lock();</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        s = ops.get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">10</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>信号量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车库停车</span></span><br><span class="line"><span class="comment">     * 3车位，3是自己在redis中设置的，key为信号量名，值为3</span></span><br><span class="line"><span class="comment">     * 信号量也可以做分布式限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="comment">// park.acquire();     //获取一个信号、获取一个值,占一个车位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> park.tryAcquire();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//执行业务</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok=&gt;&quot;</span> + flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    park.release();     <span class="comment">//释放一个车位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>闭锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放假、锁门</span></span><br><span class="line"><span class="comment">     * 1班没人了</span></span><br><span class="line"><span class="comment">     * 5个班，全部走完，我们才可以锁大门</span></span><br><span class="line"><span class="comment">     * 分布式闭锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);</span><br><span class="line">    door.await();       <span class="comment">//等待闭锁完成</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();       <span class="comment">//计数-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;班的人都走了...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h1><blockquote><p>Spring-Cache的不足之处：</p><p>1）、读模式</p><p>缓存穿透：查询一个null数据。解决方案：缓存空数据</p><p>缓存击穿：大量并发进来同时查询一个正好过期的数据。解决方案：加锁 ? 默认是无加锁的;使用sync = true来解决击穿问题</p><p>缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间</p><p>2)、写模式：（缓存与数据库一致）</p><p>1）、读写加锁。</p><p>2）、引入Canal,感知到MySQL的更新去更新Redis</p><p>3）、读多写多，直接去数据库查询就行</p><p>总结：</p><p>常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：写模式(只要缓存的数据有过期时间就足够了)</p><p>特殊数据：特殊设计</p><p>原理：</p><p>CacheManager(RedisCacheManager)-&gt;Cache(RedisCache)-&gt;Cache负责缓存的读写</p></blockquote><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#    配置缓存</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="comment">#    使用redis作为缓存</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment">#    设置过期时间为一小时，</span></span><br><span class="line">      <span class="attr">time-to-live:</span>  <span class="number">000</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.cache.CacheProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        <span class="comment">// config = config.entryTtl();</span></span><br><span class="line">        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()));</span><br><span class="line">        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">        <span class="comment">//将配置文件中所有的配置都生效</span></span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliMallProductApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GuliMallProductApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置缓存分区、key</span></span><br><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Category</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> entities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缓存失效模式（更新后删除缓存）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    缓存失效模式使用</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;category&quot;,allEntries = true)</span>       <span class="comment">//删除某个分区下的所有数据</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascade</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.updateById(category);</span><br><span class="line">    System.out.println(category.getName());</span><br><span class="line">    categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringSession"><a href="#SpringSession" class="headerlink" title="SpringSession"></a>SpringSession</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        spring-session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line"><span class="comment">#      session 过期时间</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30m</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="comment">#    spring session</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">  <span class="comment">#存储类型</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure></li><li><p>开启注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliMallAuthApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GuliMallAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对应的对象实现序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberResponseVo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GuliMall-报错集锦</title>
      <link href="/2023/03/23/GuliMall/"/>
      <url>/2023/03/23/GuliMall/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="renren-fast"><a href="#renren-fast" class="headerlink" title="renren-fast"></a>renren-fast</h2><h3 id="pom-xml爆红，插件下载不到"><a href="#pom-xml爆红，插件下载不到" class="headerlink" title="pom.xml爆红，插件下载不到"></a>pom.xml爆红，插件下载不到</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212102463.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212117041.png"></p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>把插件注释掉就好，不影响启动。</p><p>pom.xml 此时还是爆红，别在意，启动项目</p><h3 id="项目启动失败"><a href="#项目启动失败" class="headerlink" title="项目启动失败"></a>项目启动失败</h3><p>找不到实体中的 get 和 set 方法</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212409337.png"></p><p>首先引入 lombok 插件，还是出问题。</p><p>查看lombok插件使用的版本是 1.18.24，而 renren-fast 引用的是 1.18.4，版本不一致。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212615039.png" alt="image-20230323212615039"></p><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><p>将 renren-fast 应用的版本也改为 1.18.24，启动成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212918791.png"></p><h2 id="renren-fast-vue"><a href="#renren-fast-vue" class="headerlink" title="renren-fast-vue"></a>renren-fast-vue</h2><h3 id="cnpm-install报错"><a href="#cnpm-install报错" class="headerlink" title="cnpm install报错"></a>cnpm install报错</h3><h4 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li><p>查找资料得知，nodejs 和 node-sess 有对应的版本要求 <a href="https://www.npmjs.com/package/node-sass?activeTab=readme">详见</a></p><p>我得nodejs版本是18+，所以我需要8.0+的node-sess</p><p>修改renren-fast-vue目录下的 package.json 和 package-lock.json</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323211350109.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323211436217.png"></p></li><li><p>报错：<strong><a href="mailto:&#99;&#x68;&#x72;&#111;&#x6d;&#x65;&#x64;&#x72;&#105;&#118;&#101;&#x72;&#x40;&#x32;&#46;&#50;&#55;&#x2e;&#50;&#x69;&#110;&#115;&#x74;&#x61;&#108;&#x6c;">&#99;&#x68;&#x72;&#111;&#x6d;&#x65;&#x64;&#x72;&#105;&#118;&#101;&#x72;&#x40;&#x32;&#46;&#50;&#55;&#x2e;&#50;&#x69;&#110;&#115;&#x74;&#x61;&#108;&#x6c;</a>: node install.js</strong> </p><p>解决方法：</p><p>​    先删除 renren-fast-vue 下的 node_modules 文件夹</p><p>​    执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure><p>再次执行 cnpm install ，不报错</p></li></ol><h3 id="cnpm-run-dev-报错，有些依赖未找到"><a href="#cnpm-run-dev-报错，有些依赖未找到" class="headerlink" title="cnpm run dev 报错，有些依赖未找到"></a>cnpm run dev 报错，有些依赖未找到</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323210638031.png"></p><h4 id="解决方法：-3"><a href="#解决方法：-3" class="headerlink" title="解决方法："></a>解决方法：</h4><p>​    重新下载依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install qs</span><br><span class="line">cnpm install svg-baker-runtime</span><br><span class="line">cnpm install vue-hot-reload-api</span><br></pre></td></tr></table></figure><h2 id="renren-generator"><a href="#renren-generator" class="headerlink" title="renren-generator"></a>renren-generator</h2><h3 id="ServiceImpl层报错"><a href="#ServiceImpl层报错" class="headerlink" title="ServiceImpl层报错"></a>ServiceImpl层报错</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230325190846909.png" alt="image-20230325190846909"></p><h4 id="解决方法：-4"><a href="#解决方法：-4" class="headerlink" title="解决方法："></a>解决方法：</h4><p>​    从github 上clone 的renren-generator 的项目中，pageutils和query等工具类是不全的，有很多bug，导入课程提供的utils后解决</p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="启动项目失败："><a href="#启动项目失败：" class="headerlink" title="启动项目失败："></a>启动项目失败：</h3><p><strong><u>No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</u></strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230327184014499.png" alt="image-20230327184014499"></p><h4 id="解决方法：-5"><a href="#解决方法：-5" class="headerlink" title="解决方法："></a>解决方法：</h4><blockquote><p>​    由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错</p></blockquote><p>由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错。</p><p>我们这里使用的是nacoss，所以从nacoss中排除ribbon的依赖，并加入loadbalancer依赖</p><p>在pom中引入依赖即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230329173832511.png" alt="image-20230329173832511"></p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>引入了Mybatis依赖，它是有默认的数据库配置，而网关显然没有数据库</p><h3 id="解决方法：-6"><a href="#解决方法：-6" class="headerlink" title="解决方法："></a>解决方法：</h3><p>排除数据库配置的扫描</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230329174053938.png"></p><h2 id="报错：java-找不到符号"><a href="#报错：java-找不到符号" class="headerlink" title="报错：java: 找不到符号"></a>报错：java: 找不到符号</h2><p>符号:   方法 allowedOriginPatterns(java.lang.String)<br>位置: 类 org.springframework.web.servlet.config.annotation.CorsRegistration</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330115142087.png" alt="image-20230330115142087"></p><h3 id="解决方法：-7"><a href="#解决方法：-7" class="headerlink" title="解决方法："></a>解决方法：</h3><p>​    SpringBoot升级后，Lombok版本对应的Api发生改动，这个方法名已经不对了。改为</p><p><strong>.allowedOrigins(“*”)</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330115446476.png"></p><h2 id="报错：When-allowCredentials-is-true-allowedOrigins-cannot-contain-the-special-value-“-”-since-that-cannot-be-set-on-the-“Access-Control-Allow-Origin”-response-header-To-allow-credentials-to-a-set-of-origins-list-them-explicitly-or-consider-using-“allowedOriginPatterns”-instead"><a href="#报错：When-allowCredentials-is-true-allowedOrigins-cannot-contain-the-special-value-“-”-since-that-cannot-be-set-on-the-“Access-Control-Allow-Origin”-response-header-To-allow-credentials-to-a-set-of-origins-list-them-explicitly-or-consider-using-“allowedOriginPatterns”-instead" class="headerlink" title="报错：When allowCredentials is true, allowedOrigins cannot contain the special value “*” since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using “allowedOriginPatterns” instead."></a>报错：When allowCredentials is true, allowedOrigins cannot contain the special value “*” since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using “allowedOriginPatterns” instead.</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330135620481.png"></p><h3 id="解决方法：-8"><a href="#解决方法：-8" class="headerlink" title="解决方法："></a>解决方法：</h3><p>这是因为springboot升级成2.4.0以上时对AllowedOrigin设置发生了改变，不能有”*“</p><p>将</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170025876.png" alt="image-20230402170025876"></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>前后端数据应当统一，原来项目给的是 ：后端accessId，前端accessid，改为一致即可</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170107622.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170137755.png"></p><h2 id="cascader级联菜单不显示样式"><a href="#cascader级联菜单不显示样式" class="headerlink" title="cascader级联菜单不显示样式"></a>cascader级联菜单不显示样式</h2><h3 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406095221286.png"></p><h3 id="解决方法：-9"><a href="#解决方法：-9" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在  /renren-fast-vue/src/main.js 中引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="报错：Parameter-‘name’-not-found-Available-parameters-are-arg1-arg0-param1-param2"><a href="#报错：Parameter-‘name’-not-found-Available-parameters-are-arg1-arg0-param1-param2" class="headerlink" title="报错：Parameter ‘name’ not found. Available parameters are [arg1, arg0, param1, param2]"></a>报错：Parameter ‘name’ not found. Available parameters are [arg1, arg0, param1, param2]</h2><p>说是name字段找不到，但是我前后命名都是统一的，检查了几次没问题</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406170822772.png" alt="image-20230406170822772"></p><h3 id="解决方法：-10"><a href="#解决方法：-10" class="headerlink" title="解决方法："></a>解决方法：</h3><p>错误原因是应为mapper文件中，一个方法如果有多个参数，最好使用@param来与表中字段绑定</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406171133811.png" alt="image-20230406171133811"></p><h2 id="报错：Error-in-mounted-hook-“ReferenceError-PubSub-is-not-defined”"><a href="#报错：Error-in-mounted-hook-“ReferenceError-PubSub-is-not-defined”" class="headerlink" title="报错：Error in mounted hook: “ReferenceError: PubSub is not defined”"></a>报错：Error in mounted hook: “ReferenceError: PubSub is not defined”</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230407201844387.png" alt="image-20230407201844387"></p><h2 id="使用-multi-upload-组件上传图片报错：InvalidAccessKeyId"><a href="#使用-multi-upload-组件上传图片报错：InvalidAccessKeyId" class="headerlink" title="使用 multi-upload 组件上传图片报错：InvalidAccessKeyId"></a>使用 multi-upload 组件上传图片报错：InvalidAccessKeyId</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230409155438612.png" alt="image-20230409155438612"></p><p>报错原因：</p><p>​    它说是 accessKeyId 获取不到，看请求数据中的 <strong>ossaccessKeyId</strong> 值为 undefined，也就是发送请求时，没有发送这个值。但我使用的是组件，后端发送的签名也咩问题。</p><p>​    此时应该去前端代码中看看 accessKeyId 是否被定义，名称是否一致。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230409155948788.png"></p><p>前端引用的是 accessid 而后端传的是 assessId ，改为一致即可。有事一个前后端数据不一致造成的</p><h2 id="发布商品-规格参数没有显示"><a href="#发布商品-规格参数没有显示" class="headerlink" title="发布商品-规格参数没有显示"></a>发布商品-规格参数没有显示</h2><p>上架商品时，报错sql语句有问题，查看发现：查询规格参数那步，查到一个空列表。</p><p><strong>控制台报错：Cannot read properties of null (reading ‘forEach’)</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230509195136824.png" alt="image-20230509195136824"></p><h3 id="解决方法：-27条消息-谷粒商城P85问题记录—发布商品时规格参数不显示-2022-4-8-猴急猴急的博客-CSDN博客"><a href="#解决方法：-27条消息-谷粒商城P85问题记录—发布商品时规格参数不显示-2022-4-8-猴急猴急的博客-CSDN博客" class="headerlink" title="解决方法：(27条消息) 谷粒商城P85问题记录—发布商品时规格参数不显示-2022/4/8_猴急猴急的博客-CSDN博客"></a>解决方法：<a href="https://blog.csdn.net/weixin_46626422/article/details/124030177">(27条消息) 谷粒商城P85问题记录—发布商品时规格参数不显示-2022/4/8_猴急猴急的博客-CSDN博客</a></h3><h2 id="SwitchHost：无法访问gulimall-com"><a href="#SwitchHost：无法访问gulimall-com" class="headerlink" title="SwitchHost：无法访问gulimall.com"></a>SwitchHost：无法访问gulimall.com</h2><h3 id="解决方法：关闭代理"><a href="#解决方法：关闭代理" class="headerlink" title="解决方法：关闭代理"></a>解决方法：关闭代理</h3><h2 id="添加search功能，nginx中server-name：-gulimall-com-不起作用"><a href="#添加search功能，nginx中server-name：-gulimall-com-不起作用" class="headerlink" title="添加search功能，nginx中server_name：*.gulimall.com 不起作用"></a>添加search功能，nginx中server_name：*.gulimall.com 不起作用</h2><h3 id="解决方法：server-name-gulimall-com-gulimall-com"><a href="#解决方法：server-name-gulimall-com-gulimall-com" class="headerlink" title="解决方法：server_name gulimall.com *.gulimall.com;"></a>解决方法：server_name gulimall.com *.gulimall.com;</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230514153822904.png"></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wrong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ工作模式与实现方式</title>
      <link href="/2023/03/21/RabbitMQ02/"/>
      <url>/2023/03/21/RabbitMQ02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a>Work queues</h1><ul><li>不需要设置交换机，只需指定唯一的消息队列即可进行消息传递</li><li>可以有多个消费者，多个消费者通过轮询从队列中取消息</li><li>消息被接受后，队列将消息移除</li><li>消费在可以在没有处理完消息的情况下继续获取消息</li><li>通过设置 <strong>spring.rabbitmq.listener.simple.prefetch: 1</strong> 来设置每次处理完消息后才能获取下一条</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170348663.png"></p><h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"><span class="comment">//   workqueue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;消费者02 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听队列，自动绑定消息。通过设置休眠来模拟不同的消费能力</strong></p><h2 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    workqueue</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage02</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe"></a>Publish/Subscribe</h1><ul><li>需要设置交换机，并将队列绑定到交换机</li><li>常见的交换机类型有 fanout、direct、topic</li><li>可以通过基于配置和基于注解的方式来声明交换机、声明队列、绑定队列到交换机</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170639037.png"></p><blockquote><ul><li>fanout：广播模式，路由key 为空</li><li>direct：定义路由 key</li><li>topic：路由key支持通配符<ol><li>*：匹配一个</li><li>#：匹配零个或多个</li></ol></li><li>headers：<ul><li>whereAny：匹配任意一个</li><li>whereAll：必须都满足</li></ul></li></ul></blockquote><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout</button></li><li class="tab"><button type="button" data-href="#note-2">Direct</button></li><li class="tab"><button type="button" data-href="#note-3">Topic</button></li><li class="tab"><button type="button" data-href="#note-4">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.fanout</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;heroxin.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   fanout 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   fanout 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.direct</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;heroxin.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    direct 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(directExchange()).with(<span class="string">&quot;hero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    direct 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(directExchange()).with(<span class="string">&quot;xin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.topic</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;heroxin.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    topic 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(topicExchange()).with(<span class="string">&quot;#.hero.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    topic 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(topicExchange()).with(<span class="string">&quot;*.xin.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  声明交换机  heroxin.headers</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HeadersExchange <span class="title function_">headersExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeadersExchange</span>(<span class="string">&quot;heroxin.headers&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    headers 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">headersBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(headersExchange()).whereAny(map).match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    headers 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">headersBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout</button></li><li class="tab"><button type="button" data-href="#note-2">Direct</button></li><li class="tab"><button type="button" data-href="#note-3">Topic</button></li><li class="tab"><button type="button" data-href="#note-4">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFanout</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.fanout&quot;</span>, <span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDirect01</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [hero] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.direct&quot;</span>, <span class="string">&quot;hero&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDirect02</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [xin] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.direct&quot;</span>, <span class="string">&quot;xin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopic01</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [#.hero.#] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.topic&quot;</span>, <span class="string">&quot;hero.xin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopic02</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [*.xin.*] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.topic&quot;</span>, <span class="string">&quot;hero.xin.heroxin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHeaders01</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [都能接收到] 消息&quot;</span> + msg);</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(), properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.headers&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHeaders02</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [只有队列一接受] 消息&quot;</span> + msg);</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(), properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.headers&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout,Direct,Topic</button></li><li class="tab"><button type="button" data-href="#note-2">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到queue01的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听队列二</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者02 接收到queue02的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue01</span><span class="params">(Message msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到queue01的消息为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()) + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听队列二</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue02</span><span class="params">(Message msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者02 接收到queue02的消息为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()) + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---fanout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fanout&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqFanout</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendFanout(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---direct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/direct01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqDirect01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendDirect01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/direct02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqDirect02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendDirect02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---topic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/topic01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqTopic01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendTopic01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/topic02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqTopic02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendTopic02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/headers01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqHeaders01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendHeaders01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/headers02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqHeaders02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendHeaders02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充：基于注解配置"><a href="#补充：基于注解配置" class="headerlink" title="补充：基于注解配置"></a>补充：基于注解配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    directExchange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">    bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue01&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者01 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列二</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">    bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue02&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者02 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
          <category> 异步通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Connection Failed</title>
      <link href="/2023/03/07/Connection%20Failed/"/>
      <url>/2023/03/07/Connection%20Failed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Xshell 连接不到虚拟机，显示 <strong>Connection faild</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308105905410.png"></p><p>但是之前可以连接，配置什么的也没动，防火墙也开放了</p><p>在虚拟机内查看 ens33 也发现没问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308110408855.png"></p><p>查看 ifconfg 时发现 ip 为 127.0.0.1 ，不对劲，应该是网卡出问题了</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308105844632.png"></p><p>此时查看 network 状态，发现是 faild </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><p>重启 network 报错：<strong>Job for network.service failed because the  control process exited with error code. See “systemctl status  network.service” and “journalctl -xe” for details.</strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在CentOS系统上，有NetworkManager和network两种网络管理工具。如果两种都配置会引起冲突，而且NetworkManager在网络断开的时候，会清理路由，如果一些自定义的路由，没有加入到NetworkManager的配置文件中，路由就被清理掉，网络连接后需要自定义添加上去。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li><p>关闭 NetworkManager </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br></pre></td></tr></table></figure></li><li><p>重启网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113758339.png"></p></li></ul><p>查看IP，成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113932427.png"></p><p>连接虚拟机，成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113852226.png"></p>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Wrong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2023/03/04/ElasticSearch/"/>
      <url>/2023/03/04/ElasticSearch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><blockquote><p>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中找到需要的内容</p><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。</p><p>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p></blockquote><h2 id="elasticsearch发展"><a href="#elasticsearch发展" class="headerlink" title="elasticsearch发展"></a>elasticsearch发展</h2><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><p>​        <strong>Lucene</strong>是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。基于倒排索引，提供了搜索引擎的核心API。由Java编写，有高性能，易扩展等优点。由DougCutting于1999年研发。</p><p>​        但是仅限于Java语言开发，不适用于其他语言，学习难度大，不支持分布式水平扩展</p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>​        Elasticsearch是一个开源的分布式、RESTful 风格的搜索和数据分析引擎，它的底层是开源库Apache Lucene。算是lucene外面一层华丽的包装，有支持分布式水平拓展，提供Restful接口，可被任何语言调用等优点</p><h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><p>传统数据库（如Mysql）采用的是正向索引，而elasticsearch采用的是倒排索引</p><div class="note blue icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><ul><li>倒排索引：对文档内容分词，对词条创建索引，并记录词条所在文档的信息，查询时先根据词条查询到文章id，而后获取到文章</li><li>正向索引：基于文档id创建索引，查询词条时必须先找到文档，而后判断是否包含词条</li></ul></div><ol><li>文档：对应mysql数据表中的一行数据</li><li>词条：对文档中的内容进行分词，得到的词语就是词条</li><li>词条词典：记录所有词条，以及词条和倒排列表之间的关系，会给词条创建索引，提高查询和插入效率</li><li>倒排索引：记录词条所在的文档id，词条出现的频率，词条在文档中的位置信息</li><li>索引：相同类型的文档的集合</li><li>映射：索引中文档的字段约束信息，类似表的结构约束</li></ol><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230303191503481.png"></p><h3 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h3><p>es在创建倒排索引时，需要对文档进行分词，这个操作就是分词器来完成的。</p><p>它会将一个句子分为一个个‘字’或者一个个‘词’，原版是无法对中文进行分词的，我们使用 ik 分词器来完成对中文的分词。</p><p>ik分词器包含两种模式：</p><ul><li>ik_smart:最少切分，粗粒度</li><li>ik_max_word:最细切分，细粒度</li></ul><p>ik分词器的安装见</p><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>安装过程详见：<a href="https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/">Centos7安装Elasticsearch | Heroxin</a></p></div><p>ik分词器-拓展词库</p><p>要拓展ik分词器的词库，只需要修改ik分词器目录中的config目录中的IKAnalyzer.cfg.xml 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再同一目录下的ext.dic文件中，添加自己想要拓展的词语即可</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>安装过程详见：<a href="https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/">Centos7安装Elasticsearch | Heroxin</a></p></div><h2 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h2><blockquote><p>将索引库操作联想为对数据库的操作，创建数据库、查询数据库、约束、….</p></blockquote><ol><li><p>mapping：是对所应库中文档的约束，常见的mapping包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text(可分词的文本)、keyword</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：data</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul></li><li><p>创建索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;字段名&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;false&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名3&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;子字段&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // ...略</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引库</span><br><span class="line">PUT /heroxin</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;firstName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;lastName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure></li><li><p>删除索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure></li><li><p>修改索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 所应库和mapping一旦创建就无法修改，但是可以添加新的字段</span><br><span class="line"></span><br><span class="line">PUT /索引库名/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;新字段名&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据迁移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建好索引之后，如果非得修改已存在字段，</span><br><span class="line"># 则可以创建一个新的索引，然后将原来索引中的数据导入到新的索引当中</span><br><span class="line"></span><br><span class="line"># 创建新的索引库,将字段属性进行修改，</span><br><span class="line">PUT /new_heroxin</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;firstName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;lastName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据迁移</span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">&quot;source&quot;:&#123;</span><br><span class="line">&quot;index&quot;:&quot;heroxin&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dest&quot;:&#123;</span><br><span class="line">&quot;index&quot;:&quot;new&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><blockquote><p>联想为数据库中表的操作，构表语句、新增/修改字段……</p></blockquote><ol><li><p>添加文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">    &quot;字段3&quot;: &#123;</span><br><span class="line">        &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">        &quot;子属性2&quot;: &quot;值4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /heroxin/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;:&quot;光彩斐然&quot;,</span><br><span class="line">  &quot;email&quot;:&quot;hero_xin@163.com&quot;,</span><br><span class="line">  &quot;name&quot;:&#123;</span><br><span class="line">    &quot;firstName&quot;:&quot;wen&quot;,</span><br><span class="line">    &quot;lastName&quot;:&quot;xin&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE /索引库名/_doc/文档id</span><br><span class="line">GET /heroxin/_doc/1</span><br></pre></td></tr></table></figure></li><li><p>删除文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE /索引库名/_doc/文档id</span><br><span class="line">DELETE /heroxin/_doc/1</span><br></pre></td></tr></table></figure></li><li><p>修改</p><ul><li><p>局部修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /heroxin/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;email&quot;:&quot;wen@163.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全量修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /heroxin/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;:&quot;光彩斐然&quot;,</span><br><span class="line">  &quot;email&quot;:&quot;hero_xin@163.com&quot;,</span><br><span class="line">  &quot;name&quot;:&#123;</span><br><span class="line">    &quot;firstName&quot;:&quot;wen&quot;,</span><br><span class="line">    &quot;lastName&quot;:&quot;xin&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h2><blockquote><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></blockquote><ol><li><p>导入依赖（和你的es版本一样）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>因为SpringBoot默认的ES版本是和咱的不一样，所以我们需要覆盖默认的ES版本</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    创建索引库</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建Request对象</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        请求参数，MAPPING_TEMPLATE是静态常量字符串，内容是创建索引库的DSL语句</span></span><br><span class="line">        request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    删除索引库</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建Request对象</span></span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    判断索引库是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testExistsHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建request对象</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">request</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        输出</span></span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 文档查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.查询数据库hotel数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">47478</span>);</span><br><span class="line">        <span class="comment">// 2.转换为HotelDoc</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 3.转JSON</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());</span><br><span class="line">        <span class="comment">// 2.准备请求参数DSL，其实就是文档的JSON字符串</span></span><br><span class="line">        request.source(json, XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request      // GET /hotel/_doc/&#123;id&#125;</span></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 3.解析响应结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line"></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request      // DELETE /hotel/_doc/&#123;id&#125;</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备参数</span></span><br><span class="line">        request.doc(</span><br><span class="line">                <span class="string">&quot;price&quot;</span>, <span class="string">&quot;870&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询所有的酒店数据</span></span><br><span class="line">        List&lt;Hotel&gt; list = hotelService.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        <span class="comment">// 2.准备参数</span></span><br><span class="line">        <span class="keyword">for</span> (Hotel hotel : list) &#123;</span><br><span class="line">            <span class="comment">// 2.1.转为HotelDoc</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">            <span class="comment">// 2.2.转json</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line">            <span class="comment">// 2.3.添加请求</span></span><br><span class="line">            request.add(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotel.getId().toString())</span><br><span class="line">                    .source(json, XContentType.JSON)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DSL查询语法"><a href="#DSL查询语法" class="headerlink" title="DSL查询语法"></a>DSL查询语法</h2><blockquote><p>联想mysql的查询</p></blockquote><ol><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;查询类型&quot;: &#123;</span><br><span class="line">      &quot;查询条件&quot;: &quot;条件值&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">// 查询所有</span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全文检索查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;字段&quot;: &quot;字段内容&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#演示</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;all&quot;: &quot;上海&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>精确查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 精确查询</span><br><span class="line">#    一般是查找keyword，数值，日期，Boolean等类型字段，不会对搜索条件 分词</span><br><span class="line">#   term：根据词条精确值查询</span><br><span class="line">#   range：根据值的范围查询</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;上海&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 10,</span><br><span class="line">        &quot;lte&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复合查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复合查</span><br><span class="line">#   function score 查询 （加分）</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;all&quot;: &quot;外滩&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;&quot;term&quot;: &#123;</span><br><span class="line">            &quot;brand&quot;: &quot;如家&quot;</span><br><span class="line">          &#125;&#125;,</span><br><span class="line">          &quot;weight&quot;: 10</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   Boolean Query 查询，布尔查询是一个或多个子查询的组合</span><br><span class="line"></span><br><span class="line"># 搜索名字包含&quot;如家&quot;，价格不高于400，坐标在指定范围内10km的酒店</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;如家&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gt&quot;: 400</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_distance&quot;: &#123;</span><br><span class="line">            &quot;distance&quot;: &quot;10km&quot;,</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;lat&quot;: 31.21,</span><br><span class="line">              &quot;lon&quot;: 121.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  默认更具_score排序  </span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#   默认返回10条数据</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ], </span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>高亮处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  默认情况下搜索字段必须与高亮字段一致</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">   &quot;match&quot;: &#123;</span><br><span class="line">     &quot;all&quot;: &quot;如家&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;highlight&quot;: &#123;</span><br><span class="line">   &quot;fields&quot;: &#123;</span><br><span class="line">     &quot;name&quot;: &#123;</span><br><span class="line">       &quot;require_field_match&quot;: &quot;false&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RestClient操作搜索"><a href="#RestClient操作搜索" class="headerlink" title="RestClient操作搜索"></a>RestClient操作搜索</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testmatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits1) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testtrem</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.termQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits1) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> ElasticSearch </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装Elasticsearch</title>
      <link href="/2023/03/03/Centos7_Install_Elasticsearch/"/>
      <url>/2023/03/03/Centos7_Install_Elasticsearch/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-部署单点es"><a href="#1-部署单点es" class="headerlink" title="1.部署单点es"></a>1.部署单点es</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h2><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><h2 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2.加载镜像"></a>1.2.加载镜像</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.12.1</span><br><span class="line">docker pull kibana:7.12.1</span><br></pre></td></tr></table></figure><h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h2><p>运行docker命令，部署单点es：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name es \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115333903.png"></p><h1 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h1><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h2 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1.部署"></a>2.1.部署</h2><p>运行docker命令，部署kibana</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115500954.png"></p><h2 id="2-2-DevTools"><a href="#2-2-DevTools" class="headerlink" title="2.2.DevTools"></a>2.2.DevTools</h2><p>kibana中提供了一个DevTools界面</p><p>这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115548862.png"></p><h1 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h1><h2 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1.在线安装ik插件（较慢）"></a>3.1.在线安装ik插件（较慢）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部</span></span><br><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><h2 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2.离线安装ik插件（推荐）"></a>3.2.离线安装ik插件（推荐）</h2><h3 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h3><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es-plugins&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><h3 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h3><p>下面我们需要把课前资料中的ik分词器解压缩，重命名为ik</p><p><img src="assets/image-20210506110249144.png" alt="image-20210506110249144"></p><h3 id="3）上传到es容器的插件数据卷中"><a href="#3）上传到es容器的插件数据卷中" class="headerlink" title="3）上传到es容器的插件数据卷中"></a>3）上传到es容器的插件数据卷中</h3><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p><p><img src="assets/image-20210506110704293.png" alt="image-20210506110704293"></p><h3 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、重启容器</span></span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看es日志</span></span><br><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure><h3 id="5）测试："><a href="#5）测试：" class="headerlink" title="5）测试："></a>5）测试：</h3><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-扩展词词典"><a href="#3-3-扩展词词典" class="headerlink" title="3.3 扩展词词典"></a>3.3 扩展词词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p><p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p><p>1）打开IK分词器config目录：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304151647033.png"></p><p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">传智播客</span></span><br><span class="line"><span class="attr">奥力给</span></span><br></pre></td></tr></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart es</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure><p>日志中已经成功加载ext.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业超过90%,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="3-4-停用词词典"><a href="#3-4-停用词词典" class="headerlink" title="3.4 停用词词典"></a>3.4 停用词词典</h2><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p><p>1）IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）在 stopword.dic 添加停用词</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">习大大</span></span><br></pre></td></tr></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">docker restart elasticsearch</span><br><span class="line">docker restart kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure><p>日志中已经成功加载stopword.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业率超过95%,习大大都点赞,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h1 id="4-部署es集群"><a href="#4-部署es集群" class="headerlink" title="4.部署es集群"></a>4.部署es集群</h1><p>部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有<strong>4G</strong>的内存空间</p><p>首先编写一个docker-compose文件，内容如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data03:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  data01:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data02:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data03:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><p>Run <code>docker-compose</code> to bring up the cluster:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装手册 </tag>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Screen</title>
      <link href="/2023/03/02/Screen/"/>
      <url>/2023/03/02/Screen/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Screen（Linux）"><a href="#Screen（Linux）" class="headerlink" title="Screen（Linux）"></a>Screen（Linux）</h1><div id="zm_mhz">之前开饥荒服务器就一直使用screen命令，但具体的细节都封装在脚本内。知其然而不知其所以然</div><h2 id="screen的功能"><a href="#screen的功能" class="headerlink" title="screen的功能"></a>screen的功能</h2><h3 id="会话恢复"><a href="#会话恢复" class="headerlink" title="会话恢复"></a>会话恢复</h3><p>​        只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p><h3 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h3><p>​        在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。</p><h3 id="会话共享"><a href="#会话共享" class="headerlink" title="会话共享"></a>会话共享</h3><p>​        Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p><h2 id="状态介绍"><a href="#状态介绍" class="headerlink" title="状态介绍"></a>状态介绍</h2><h3 id="Attached："><a href="#Attached：" class="headerlink" title="Attached："></a>Attached：</h3><p>​    表示当前screen正在作为主终端使用，为活跃状态</p><h3 id="Detached："><a href="#Detached：" class="headerlink" title="Detached："></a>Detached：</h3><p>​    表示当前screen正在后台使用，为非激发状态</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">yum install screen</span><br><span class="line"><span class="comment"># Debian/Ubuntu</span></span><br><span class="line">apt install screen</span><br></pre></td></tr></table></figure><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><div id="zm_tkzj">screen [-opts] [cmd [args]]</div><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">screen -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个叫做 heroxin 的虚拟终端</span></span><br><span class="line">screen -S heroxin  <span class="comment"># 如果存在，则创建同名screen</span></span><br><span class="line">screen -R heroxin  <span class="comment"># 如果存在，则进入 heroxin</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出</span></span><br><span class="line">ctrl + a + d</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 回到 scree</span></span><br><span class="line">screen -R heroxin/pid</span><br><span class="line">screen -r heroxin/pid</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清除终端</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">screen -R heroxin/pid -X quit</span><br></pre></td></tr></table></figure><div class="note red icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>参考：<a href="https://cloud.tencent.com/developer/article/1844735">Linux终端命令神器–Screen命令详解。助力Linux使用和管理 - 腾讯云开发者社区-腾讯云 (tencent.com)</a></p></div>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/02/28/RabbitMQ/"/>
      <url>/2023/02/28/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><blockquote><p>MQ（MessageQueue），消息队列，用来存放消息的队列</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228154952550.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228154912614.png"></p><h2 id="Docker安装RabbitMQ"><a href="#Docker安装RabbitMQ" class="headerlink" title="Docker安装RabbitMQ"></a>Docker安装RabbitMQ</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3-management</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=heroxin \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=heroxin \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq1 \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3-management</span><br></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>服务器IP:15672</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228155422009.png"></p><h2 id="SpringAMQP初体验"><a href="#SpringAMQP初体验" class="headerlink" title="SpringAMQP初体验"></a>SpringAMQP初体验</h2><blockquote><p><strong>A</strong>dvanced <strong>M</strong>essage <strong>Q</strong>ueuing <strong>P</strong>rotocol，是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p><p>Spring AMQP是基于AMQP协议定义的一套API规范，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p><p>SpringAmqp网址：<a href="https://spring.io/projects/spring-amqp">Spring AMQP</a></p></blockquote><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.amqp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-rabbit-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h3><h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heroxin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heroxin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="test-java"><a href="#test-java" class="headerlink" title="test-java"></a>test-java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAMQP</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp&quot;</span>;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228161841551.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228161910891.png"></p><h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><h4 id="yml-1"><a href="#yml-1" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">heroxin</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">heroxin</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//   监听队列,自动绑定消息</span></span><br><span class="line">   <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;消费者接收到simple.queue的消息为：&quot;</span>+msg);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="运行启动类"><a href="#运行启动类" class="headerlink" title="运行启动类"></a>运行启动类</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228162734853.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228162859899.png"></p><h2 id="WorkQueue模式"><a href="#WorkQueue模式" class="headerlink" title="WorkQueue模式"></a>WorkQueue模式</h2><blockquote><p>模拟workqueue，实现一个队列绑定多个消费者</p><ol><li>在publisher服务中，定义测试方法，每秒产生50条消息，发送到simple.queue</li><li>在consumer服务中定义两个监听者，都监听simple.queue</li><li>消费者01每秒处理50条消息，消费者02每秒处理10条消息</li></ol></blockquote><p>Publisher发布的消息存于 queue 消息队列中，两个 consumer 消费者绑定这个消息队列，两个消费者获取不到相同的消息</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170348663.png"></p><h3 id="publisher-1"><a href="#publisher-1" class="headerlink" title="publisher"></a>publisher</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage02</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + <span class="number">1</span>);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="consumer-1"><a href="#consumer-1" class="headerlink" title="consumer"></a>consumer</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者01 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;消费者02 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p>先启动 consumer ，后启动 publisher 发布消息，通过查看日志得知，50条消息被两个消费者平均分配</p><p><strong>这是因为消息预取机制（虽然没有处理完消息，但是可以获取下一条消息），消息发布到队列当中时，两个消费者轮流从中接收消息，应为消费者02处理较慢，所以最后的日志都是消费者02</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_0,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.241</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_1,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.273</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_3,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.336</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_5,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.397</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_2,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.441</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_7,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.459</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_9,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.520</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_11,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.585</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_4,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.643</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_13,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.644</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_15,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.706</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_17,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.770</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_19,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.829</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_6,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.845</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_21,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.891</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_23,<span class="number">16</span>:<span class="number">48</span>:<span class="number">51.953</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_25,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.014</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_8,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.061</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_27,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.078</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_29,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.138</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_31,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.202</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_10,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.262</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_33,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.262</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_35,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.326</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_37,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.389</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_39,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.452</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_12,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.465</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_41,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.512</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_43,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.583</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_45,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.638</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_14,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.668</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_47,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.705</span></span><br><span class="line">消费者<span class="number">01</span> 接收到simple.queue的消息为：hello,spring amqp_49,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.764</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_16,<span class="number">16</span>:<span class="number">48</span>:<span class="number">52.874</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_18,<span class="number">16</span>:<span class="number">48</span>:<span class="number">53.076</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_20,<span class="number">16</span>:<span class="number">48</span>:<span class="number">53.279</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_22,<span class="number">16</span>:<span class="number">48</span>:<span class="number">53.481</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_24,<span class="number">16</span>:<span class="number">48</span>:<span class="number">53.685</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_26,<span class="number">16</span>:<span class="number">48</span>:<span class="number">53.887</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_28,<span class="number">16</span>:<span class="number">48</span>:<span class="number">54.101</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_30,<span class="number">16</span>:<span class="number">48</span>:<span class="number">54.304</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_32,<span class="number">16</span>:<span class="number">48</span>:<span class="number">54.505</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_34,<span class="number">16</span>:<span class="number">48</span>:<span class="number">54.708</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_36,<span class="number">16</span>:<span class="number">48</span>:<span class="number">54.911</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_38,<span class="number">16</span>:<span class="number">48</span>:<span class="number">55.112</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_40,<span class="number">16</span>:<span class="number">48</span>:<span class="number">55.328</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_42,<span class="number">16</span>:<span class="number">48</span>:<span class="number">55.529</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_44,<span class="number">16</span>:<span class="number">48</span>:<span class="number">55.734</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_46,<span class="number">16</span>:<span class="number">48</span>:<span class="number">55.939</span></span><br><span class="line">消费者<span class="number">02</span> 接收到simple.queue的消息为：hello,spring amqp_48,<span class="number">16</span>:<span class="number">48</span>:<span class="number">56.144</span></span><br></pre></td></tr></table></figure><p>可以通过更改配置来解决这个问题</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment">#  每次只能获取一条消息，处理完成才能获取下一条消息</span></span><br></pre></td></tr></table></figure><h2 id="发布，订阅模式"><a href="#发布，订阅模式" class="headerlink" title="发布，订阅模式"></a>发布，订阅模式</h2><blockquote><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange（交换机）。</p><p>常见的exchange类型：</p><ul><li>Fanout：广播</li><li>Direct：路由</li><li>Topic：话题</li></ul><p>exchange 负责消息路由，而不是存储，路由失败则消息丢失</p></blockquote><p><strong>交换机将消息路由给两个队列，这样与queue01绑定的消费者和与queue02绑定的消费者接收的消息就一样了</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170639037.png"></p><h3 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h3><blockquote><p>FanoutExchange会将接收到的消息路由到每一个跟其绑定的queue</p><p>实现方法：</p><ol><li>在consumer服务中，利用代码声明队列和交换机，并将两者绑定</li><li>在consumer服务中，编写两个消费者的方法，分别监听fanout.queue01和fanout.queue02</li><li>在publisher中编写测试方法，向 itcast.fanout发送消息</li></ol></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228175728702.png"></p><h4 id="consumer-2"><a href="#consumer-2" class="headerlink" title="consumer"></a>consumer</h4><p><strong>添加配置类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.consumer.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.FanoutExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line"><span class="comment">//  交换机  heroxin.fanout</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;heroxin.fanout&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//  队列一 heroxin.queue01</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue01</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue01&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//  队列二 heroxin.queue02</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue02</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue02&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//   绑定队列一到交换机</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding01</span><span class="params">(Queue fanoutQueue01,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue01).to(fanoutExchange);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//   绑定队列二到交换机</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding02</span><span class="params">(Queue fanoutQueue02,FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue02).to(fanoutExchange);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>新建两个消费者</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者01 接收到fanout.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;fanout.queue02&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenFanoutQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者02 接收到fanout.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 consumer，可以看到成功添加了交换机</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228180833370.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228180932886.png"></p><h4 id="publisher-2"><a href="#publisher-2" class="headerlink" title="publisher"></a>publisher</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendFanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//        交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;heroxin.fanout&quot;</span>;</span><br><span class="line">    <span class="comment">//        消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello , my exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//        发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName,<span class="string">&quot;&quot;</span>,message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布消息"><a href="#发布消息" class="headerlink" title="发布消息"></a>发布消息</h4><p>两个消费者都接收到了相同的消息</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228182320998.png"></p><h3 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h3><blockquote><p>Direct Exchange 会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）。</p><ul><li>每一个Queue都与Exchange设置一个BindingKey</li><li>发布者发布消息时，指定消息的RoutingKey</li><li>Exchange将消息路由到BindingKey与RoutingKey移植的队列。</li></ul><p>实现思路：</p><ol><li>利用@RabbitListener声明Exchange，Queue，Routingkey</li><li>在consumer服务中，编写两个消费者方法，分别监听direct.queue01和direct.queue02</li><li>在publisher中编写测试方法，向heroxin.direct发送消息</li></ol></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228182917543.png"></p><h4 id="consumer-3"><a href="#consumer-3" class="headerlink" title="consumer"></a>consumer</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue01&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;,&quot;blue&quot;&#125;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者01 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue02&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;,&quot;yellow&quot;&#125;))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者02 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228184151922.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228184234795.png"></p><h4 id="publisher-3"><a href="#publisher-3" class="headerlink" title="publisher"></a>publisher</h4><p>此时，设定的 routing key 为 ‘blue’，只有binding key 为 ‘blue’ 的消费者能接收到消息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendDirectExchange</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        交换机名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;heroxin.direct&quot;</span>;</span><br><span class="line">    <span class="comment">//        消息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello , my direct exchange&quot;</span>;</span><br><span class="line">    <span class="comment">//        发送消息</span></span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;blue&quot;</span>, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228184738653.png"></p><h3 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h3><blockquote><p>TopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以 <strong>.</strong> 分割。</p><p>Queue与Exchange指定BindingKey时可以使用通配符：</p><ul><li>#：代指0个或多个单词</li><li>*：代指一个单词</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228185301033.png"></p></blockquote><p>这个写法和DirectExchange一样，只是消费者的routing不一样，这里就不演示了</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
          <category> 异步通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装Docker</title>
      <link href="/2023/02/23/Centos7_Install_Docker/"/>
      <url>/2023/02/23/Centos7_Install_Docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0-安装Docker"><a href="#0-安装Docker" class="headerlink" title="0.安装Docker"></a>0.安装Docker</h1><p>Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。</p><p>Docker CE 分为 <code>stable</code> <code>test</code> 和 <code>nightly</code> 三个更新频道。</p><p>官方网站上有各种环境下的 <a href="https://docs.docker.com/install/">安装指南</a>，这里主要介绍 Docker CE 在 CentOS上的安装。</p><h1 id="1-CentOS安装Docker"><a href="#1-CentOS安装Docker" class="headerlink" title="1.CentOS安装Docker"></a>1.CentOS安装Docker</h1><p>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10， CentOS 7 满足最低内核的要求，所以我们在CentOS 7安装Docker。</p><h2 id="1-1-卸载（可选）"><a href="#1-1-卸载（可选）" class="headerlink" title="1.1.卸载（可选）"></a>1.1.卸载（可选）</h2><p>如果之前安装过旧版本的Docker，可以使用下面命令卸载：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine \</span><br><span class="line">                  docker-ce</span><br></pre></td></tr></table></figure><h2 id="1-2-安装docker"><a href="#1-2-安装docker" class="headerlink" title="1.2.安装docker"></a>1.2.安装docker</h2><p>首先需要大家虚拟机联网，安装yum工具</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2 --skip-broken</span><br></pre></td></tr></table></figure><p>然后更新本地镜像源：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置docker镜像源</span></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">sed -i &#x27;s/download.docker.com/mirrors.aliyun.com\/docker-ce/g&#x27; /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"></span><br><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>然后输入命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>docker-ce为社区免费版本。稍等片刻，docker即可安装成功。</p><h2 id="1-3-启动docker"><a href="#1-3-启动docker" class="headerlink" title="1.3.启动docker"></a>1.3.启动docker</h2><p>通过命令启动docker：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">systemctl start docker  <span class="comment"># 启动docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl stop docker  <span class="comment"># 停止docker服务</span></span><br><span class="line"></span><br><span class="line">systemctl restart docker  <span class="comment"># 重启docker服务</span></span><br></pre></td></tr></table></figure><p>然后输入命令，可以查看docker版本：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><h2 id="1-4-配置镜像加速"><a href="#1-4-配置镜像加速" class="headerlink" title="1.4.配置镜像加速"></a>1.4.配置镜像加速</h2><p>docker官方镜像仓库网速较差，我们需要设置国内镜像服务：</p><p>参考阿里云的镜像加速文档：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://sdo6tk7g.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="2-CentOS7安装DockerCompose"><a href="#2-CentOS7安装DockerCompose" class="headerlink" title="2.CentOS7安装DockerCompose"></a>2.CentOS7安装DockerCompose</h1><h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1.下载"></a>2.1.下载</h2><p>Linux下需要通过命令下载：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.1/docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>如果下载速度较慢，或者下载失败，可以使用资料提供的 <a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/docker-compose">docker-compose</a> 文件：</p><p>上传到<code>/usr/local/bin/</code>目录也可以。</p><h2 id="2-2-修改文件权限"><a href="#2-2-修改文件权限" class="headerlink" title="2.2.修改文件权限"></a>2.2.修改文件权限</h2><p>修改文件权限：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="2-3-Base自动补全命令："><a href="#2-3-Base自动补全命令：" class="headerlink" title="2.3.Base自动补全命令："></a>2.3.Base自动补全命令：</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.29.1/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><p>如果这里出现错误，需要修改自己的hosts文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;199.232.28.133 raw.githubusercontent.com&quot;</span> &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><p>还是不行的话，多尝试几次</p><h1 id="以下操作需要在熟悉-docker-后，根据需求来设置"><a href="#以下操作需要在熟悉-docker-后，根据需求来设置" class="headerlink" title="以下操作需要在熟悉 docker 后，根据需求来设置"></a>以下操作需要在熟悉 docker 后，根据需求来设置</h1><h1 id="3-Docker镜像仓库"><a href="#3-Docker镜像仓库" class="headerlink" title="3.Docker镜像仓库"></a>3.Docker镜像仓库</h1><p>搭建镜像仓库可以基于Docker官方提供的DockerRegistry来实现。</p><p>官网地址：<a href="https://hub.docker.com/_/registry">https://hub.docker.com/_/registry</a></p><h2 id="3-1-简化版镜像仓库"><a href="#3-1-简化版镜像仓库" class="headerlink" title="3.1.简化版镜像仓库"></a>3.1.简化版镜像仓库</h2><p>Docker官方的Docker Registry是一个基础版本的Docker镜像仓库，具备仓库管理的完整功能，但是没有图形化界面。</p><p>搭建方式比较简单，命令如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --name registry\</span><br><span class="line">    -p 5000:5000 \</span><br><span class="line">    -v registry-data:/var/lib/registry \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><p>命令中挂载了一个数据卷registry-data到容器内的/var/lib/registry 目录，这是私有镜像库存放数据的目录。</p><p>访问<a href="http://yourip:5000/v2/_catalog">http://YourIp:5000/v2/_catalog</a> 可以查看当前私有镜像服务中包含的镜像</p><h2 id="3-2-带有图形化界面版本"><a href="#3-2-带有图形化界面版本" class="headerlink" title="3.2.带有图形化界面版本"></a>3.2.带有图形化界面版本</h2><p>使用DockerCompose部署带有图象界面的DockerRegistry，命令如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.0&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">registry:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./registry-data:/var/lib/registry</span></span><br><span class="line">  <span class="attr">ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">joxit/docker-registry-ui:static</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:80</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_TITLE=传智教育私有仓库</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">REGISTRY_URL=http://registry:5000</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">registry</span></span><br></pre></td></tr></table></figure><h2 id="3-3-配置Docker信任地址"><a href="#3-3-配置Docker信任地址" class="headerlink" title="3.3.配置Docker信任地址"></a>3.3.配置Docker信任地址</h2><p>我们的私服采用的是http协议，默认不被Docker信任，所以需要做一个配置：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开要修改的文件</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 添加内容：</span></span><br><span class="line"><span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;http://192.168.150.101:8080&quot;</span>]</span><br><span class="line"><span class="comment"># 重加载</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装手册 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/02/23/Docker/"/>
      <url>/2023/02/23/Docker/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE [COMMOND] [ARGS...]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--name=&quot;容器新名字&quot;: 为容器指定一个名称；</span><br><span class="line">-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">-i：以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-P: 随机端口映射；</span><br><span class="line">-p: 指定端口映射，有以下四种格式</span><br><span class="line">      ip:hostPort:containerPort</span><br><span class="line">      ip::containerPort</span><br><span class="line">      hostPort:containerPort</span><br><span class="line">      containerPort</span><br><span class="line">-w: 指定命令执行时，所在的路径</span><br></pre></td></tr></table></figure></blockquote><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>systemctl start docker</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker version</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker pull zookeeper:3.6  /  docker pull zookeeper （latest）</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker images</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker save -o zookeeper.tar zookeeper:3.6</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker rmi zookeeper:3.6</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker load -i zookeeper.tar</p></div><h2 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h2><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker run –name nginx -p 80:80 -d nginx:latest</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker logs nginx  /  docker logs -f nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker ps  /  docker ps -a</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker pause nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker unpause nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker stop nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker start nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker rm nginx  /  docker rm -f nginx</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker exec -it nginx bash</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker rename [旧容器名] [新容器名]</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>设置容器自动重启</p><p>参数：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">--restart=always</span><br></pre></td></tr></table></figure><p>​            no // 默认策略</p><p>​            no-failure // 在容器非正常退出时（退出状态非 0 ）才重新启动容器</p><p>​            no-failure // 在容器非正常退出时重启容器，最多重启 3 次</p><p>​            always // 无论退出状态如何，都重启容器</p><p>​            unless-stopped // 在容器退出时总书重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</p><ol><li><p>在创建容器时设置</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always -- name name</span><br></pre></td></tr></table></figure></li><li><p>修改已创建的容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker update --restart=always name</span><br></pre></td></tr></table></figure></li></ol></div><h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>查看网络：docker network ls</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>查看网络详情：docker network inspect bridge </p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>创建自定义网络：docker network create name</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>运行容器时，加入到网络中，使用参数 –network=name</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>移除网络：docker network rm name</p></div><h2 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h2><blockquote><p>数据卷的作用：将容器与数据分离，解耦合，方便操作容器内数据，保证数据安全</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230224142744932.png"></p><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker volume create html</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker volume ls</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker volume inspect html</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker volume rm html</p></div><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>docker run –name mn -p 80:80 -v html:/usr/share/nginx/html -d nginx</p></div><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7.16</span><br></pre></td></tr></table></figure><p>设置了密码，挂载到 /usr/local/docker/mysql</p><p>mysql 8.0</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=heroxin \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -v /usr/local/docker/mysql/conf/hmy.cnf:/etc/mysql/conf.d/hmy.cnf \</span><br><span class="line">    -v /usr/local/docker/mysql/data:/var/lib/mysql \</span><br><span class="line">-d mysql:latest</span><br></pre></td></tr></table></figure><p>mysql 5.7</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name mysql-5.7 \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=12345 \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">-v /usr/local/docker/mysql-5.7/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /usr/local/docker/mysql-5.7/logs:/logs \</span><br><span class="line">-v /usr/local/docker/mysql-5.7/data:/var/lib/mysql \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull webcenter/activemq</span><br></pre></td></tr></table></figure><p>设置了用户名和密码，挂载到 /usr/local/docker/activemq</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name=<span class="string">&#x27;activemq&#x27;</span> \</span><br><span class="line">    -itd \</span><br><span class="line">    -p 8161:8161 \</span><br><span class="line">    -p 61616:61616 \</span><br><span class="line">    -e ACTIVEMQ_ADMIN_LOGIN=heroxin \</span><br><span class="line">    -e ACTIVEMQ_ADMIN_PASSWORD=heroxin \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -v /usr/local/docker/activemq/data:/data/activemq \</span><br><span class="line">    -v /usr/local/docker/activemq/log:/var/log/activemq \</span><br><span class="line">webcenter/activemq:latest</span><br></pre></td></tr></table></figure><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.12.1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><p>指定jvm内存大小，挂载到数据卷，连接到 es-net</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name elasticsearch \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name kibana \</span><br><span class="line">    -e ELASTICSEARCH_HOSTS=http://elasticsearch:9200 \</span><br><span class="line">    --network=es-net \</span><br><span class="line">    -p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run --name redis -p 6379:6379 -d redis redis-server --appendonly <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>先随便启动一个nginx</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx -d nginx</span><br></pre></td></tr></table></figure><p>将容器内的配置文件复制到当前目录</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx .</span><br></pre></td></tr></table></figure><p>当前目录会生成一个 nginx 的文件夹，改名为conf，并移动到nginx下</p><p>删除容器，重新创建容器</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /usr/local/docker/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /usr/local/docker/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /usr/local/docker/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gateway统一网关</title>
      <link href="/2023/02/01/Gateway/"/>
      <url>/2023/02/01/Gateway/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h1><h2 id="Gateway是什么"><a href="#Gateway是什么" class="headerlink" title="Gateway是什么"></a>Gateway是什么</h2><blockquote><p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p></blockquote><p><u><strong>简单来说就是用于处理前来访问服务的每一个请求。可以对这些请求做出身份认证和权限校验，服务路由，负载均衡，请求限流等操作</strong></u></p><ul><li>服务路由：将请求发往具体的服务</li><li>负载均衡：每个服务都有多个实例，从中挑一个实例 </li><li>请求限流：限制请求数量</li><li>断言：表示为一些布尔表达式，用于判断；路由断言即为判断路由请求是否合规</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230201110256858.png" alt="image-20230201110256858"></p><h2 id="SpringCloudGatew搭建"><a href="#SpringCloudGatew搭建" class="headerlink" title="SpringCloudGatew搭建"></a>SpringCloudGatew搭建</h2><h3 id="引入module"><a href="#引入module" class="headerlink" title="引入module"></a>引入module</h3><p>​    SpringCloudGateway的依赖和Nacos的服务发现依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建启动器"><a href="#创建启动器" class="headerlink" title="创建启动器"></a>创建启动器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GatewayApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GatewayApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置gateway与nacos"><a href="#配置gateway与nacos" class="headerlink" title="配置gateway与nacos"></a>配置gateway与nacos</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10010</span> <span class="comment">#网关端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span> <span class="comment"># 服务器名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span> <span class="comment"># nacos地址</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">        <span class="attr">routes:</span> <span class="comment"># 网关路由配置</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">user-service</span> <span class="comment">#路由 id ，自定义，只要唯一即可</span></span><br><span class="line"><span class="comment">#            路由目标地址，http是固定地址，lb是负载均衡，后面跟服务名称</span></span><br><span class="line"><span class="comment">#            uri：http://127.0.0.1</span></span><br><span class="line">            <span class="attr">uri:</span> <span class="string">lb://userservice</span></span><br><span class="line">            <span class="attr">predicates:</span> <span class="comment"># 路由断言，判断请求是否符合路由规则的条件</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Path=/user/**</span> <span class="comment"># 按照路径匹配，只要以 /user/ 开头就符合要求</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">order-service</span></span><br><span class="line">            <span class="string">uri:lb//orderservice</span></span><br><span class="line">            <span class="attr">predicates:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">Path=/order/**</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网</title>
      <link href="/2022/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/12/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h3><ol><li><p>什么叫计算机网络</p><p>利用通信线路，将具有独立功能的计算机互连成一个计算机集合，以传递信息和共享资源</p></li><li><p>计算机网络的功能</p><p>通信功能，资源功能（硬件资源共享，软件资源共享，数据资源共享）</p></li><li><p>计算机网络的发展分为哪些阶段</p><p><strong>雏形</strong>面向终端的计算机通信网络；计算机互联网络；标准化网络、协议；网络互连与高速网络</p></li><li><p>计算机网络按照地理分为哪几种</p><ul><li>局域网LAN：指在有限的地理区域内构成的规模相对较小的计算机网络，通常由一个管理部门统一管理。 其覆盖范围一般不超过几十公里</li><li>城域网MAN：覆盖范围在局域网和广域网之间，一般来说是将一个城市范围内的计算机互联。范围在几十公里到几百公里</li><li>广域网WAN：它一般是将不同城市或不同国家之间的局域网互联起来。 作用范围通常为几十公里到几千公里</li></ul></li><li><p>模拟信号和数字信号的差异</p><p>模拟信号 - 是指在时间上和空间上连续变化的信号。</p><p>数字信号 - 是指在时间上离散的信号。</p></li><li><p>简述ICMP的作用</p><ul><li>差错控制：路由器数据故障。</li><li>拥塞控制：网络阻塞，路由器需要通知发送主机采取相应措施。</li><li>连通测试：用于PING命令，可以使用ICMP报文测试主机之间通讯</li></ul></li><li><p>局域网的主要特点是</p><ul><li>覆盖范围 覆盖的地理范围较小，通常为一个单位部门控制管理</li><li>传输速率 具有较高的数据传输率 / 较低的时延。</li><li>传输质量 具有较低的误码率，一般在10-8到10-11之间</li><li>通信方式 通常为数字通讯 和 广播方式</li><li>工作层次 物理层+链路层</li></ul></li><li><p>试分析csma/cd 截止访问控制技术的工作原理</p><p>(1)先听后发 发送数据前先侦听信道，如果信道空闲，则可进行发送;如果信道忙，则继续侦听信道，一旦发现信道空闲，就进行发送。</p><p>(2)边听边发 在发送过程中检测。</p><p>(3)冲突停止 检测到冲突，则立即停止正常发送，转而发送一个短的干扰信号，其目的是使网络上其他站点都知道出现了冲突。</p><p>(4)延迟重发 退避一段随机时间，重新尝试发送。</p></li><li><p>虚拟局域网的优点</p><p>工作原理：利用交换机等交换设备，将局域网逻辑划分为若干虚拟工作组VLAN。工作在数据链路层和物理层</p><p>(1)节约成本，利用率高 虚拟局域网在不改变原物理拓扑的情况下 调整逻辑拓扑，可以减少网络的升级需求，节约成本，减少移动位置和工作地点的费用。</p><p>(2)具有一定灵活性 虚拟局域网可以把不同地域，网络及客户集中在一起，从而提供一个虚拟的网络空间，方便灵活。</p><p>(3)具有安全稳定性 虚拟局域网可以让VLAN之间数据进行一定的隔离，防止机密信息的泄露。</p><p>(4)限制广播域 将大的广播域隔离成多个较小的广播域，广播域被限制在一个VLAN内，节省了带宽，提高整个网络的带宽利用率。</p></li><li><p>X.25和帧中继网络的异同点</p><p>同:都是分组交换技术</p><p>异:</p><p>​    1.帧中继舍去了分组交换x.25协议中心的分组层，采用物理层和链路层的二级结构。</p><p>​    2..帧中继在链路层即可完成统计复用，帧透明传输和错误检测。</p><p>​    3.帧中继链路层简化了 帧编号，流程，应答和监视等机制。</p><p>​    4.帧中继节省了交换机开销，降低了时延，提高了效率。</p></li><li><p>atm的主要优点</p><p>ATM异步传输模式， 用于宽带综合业务教学网（B-ISDN）的一种交换技术。是在分组交换的基础上发展起来的。</p><p>(1)ATM技术固定长度分组，固定信元格式，简化了交换过程,交换速率大大提高；</p><p>(2)ATM技术简化了交换过程，去除了不必要的数据检验；</p><p>(3)使用光纤通信，提供了低误码率的传输通道，传输时间延迟减小，适用于高速数据交换业务。</p><p>(4)ATM技术网络采用了有效的业务流量监控机制，对网上用户数据进行实时监控，降低网络拥塞；</p><p>(5)吞吐量高，支持时延可变，支持面向连接和无连接，用户介入速率高；</p><p>(6)综合业务，对不同的业务分配不同的网络资源，使不同的业务在网络中做到和平共处。</p></li><li><p>isdn的技术特点</p><p>(1)提供端到端的数字连接，为计算机类的数字终端进入网络提供了方便</p><p>(2)支持各种业务，是一个综合业务网络,可同时提供使用电话和保持连接的服务，提高了用户使用的便捷度</p><p>(3)提供了两种类型的信道：信息信道B信道)和信令信道用来传送对用户的网络实施控制的信令信息</p><p>(4)可以提供较高的全双工数据宽带，提高了传输速率</p><p>(5)在普通电话网的基础上发展起来使得其让普通电话升级接入ISDN网所要付出的代价较低</p></li><li><p>网络信息安全的五个基本要素</p><p>机密性，完整性，可控性，可用性，可审查性</p></li><li><p>网络管理的主要功能</p><p>故障管理，性能管理，计费管理，配置管理，安全管理</p></li></ol><h3 id="填空"><a href="#填空" class="headerlink" title="填空"></a>填空</h3><ol><li>计算机网络系统是由 <strong>通信子网</strong> 和 <strong>资源子网</strong> 组成</li><li>调制解调器的调制方式有 <strong>幅移键控</strong> <strong>频移键控</strong> 和 <strong>相移键控</strong> 3种</li><li>用一对传输线传送多路信息的方法称为复用，常用的多路复用方式有 <strong>时分复用</strong> <strong>频分复用</strong> 和 <strong>波分复用</strong></li><li>一个数据通信系统有三个基本组成部分：<strong>源系统</strong> <strong>传输系统</strong> 和 <strong>目的系统</strong></li><li>数据传输速率的数据通信系统的 <strong>传输能力</strong> 而误码率则反应了数据通讯系统的 <strong>可靠性</strong></li><li>PCM的工作过程包括 <strong>采样</strong> <strong>量化</strong>  和 <strong>编码</strong> 三个阶段</li><li>时分多路复用，按照子通道动态利用情况又可以分为 <strong>同步时分多路复用</strong> 和 <strong>异步时分多路复用</strong></li><li>数据通讯的传输方式可分为 <strong>串行</strong> 和 <strong>并行</strong>，鼠标采用前 者进行通信，打印机采用后者进行通信。</li><li>开放系统互连参考模型简称 <strong>OSI/RM</strong></li><li>OSI参考模型分为 <strong>7</strong> 层，按顺序为：<strong>物理层 链路层 网络层 传输层 会话层 表示层 应用层</strong></li><li>物理层传送数据的单位是 <strong>比特流；电流</strong> ，数据链路层传送数据的单位是 <strong>帧</strong> 网络层传送数据的单位是 <strong>分组</strong> ，传输层传送数据的单位是 <strong>报文段</strong></li><li>网络协议的三个组成要素是 <strong>语义 语法 同步</strong></li><li>物理地址的长度为 <strong>48</strong> 位，目前ip地址的长度位 <strong>32</strong> 位</li><li>Tcp和Udp报文中的端口号占字段 <strong>16</strong> 位 因此端口号编号取值范围是 <strong>0-2^16</strong>,其中熟知的端口范围是 <strong>0-1024</strong></li><li>在Tcp/ip 参考模型是传输层种，<strong>tcp</strong> 协议提供可靠的面向连接的数据传输服务，<strong>udp</strong> 协议提供不可靠的无连接的数据传输服务</li><li>www 服务是以 <strong>http</strong> 协议为基础的</li><li>a类地址的标准子网掩码是 <strong>255.0.0.0</strong>，二进制为 <strong>11111111.00000000.00000000.00000000</strong></li><li>一直某主机的ip地址为 132.102.101.28，子网掩码是 255.255.255.0 ，那么网络地址是 <strong>132.102.101.0</strong></li><li>某主机ip：100.194.10.250 mask：255.255.255.0 则它的网络地址是 <strong>100.194.10.0</strong> 主机可用范围是 <strong>100.194.10.1-100.194.10.254</strong> 可用主机数量为 <strong>254</strong> 台</li><li>在ieee 803 局域网系统结构中，数据链路层被细分为 <strong>逻辑链路控制层</strong> 和 <strong>介质访问控制层</strong></li><li>网络常用的传输媒体有 <strong>双绞线 同轴电缆 光纤</strong></li><li>网络是配置又称为 <strong>网卡</strong> 简写 <strong>NIC</strong></li><li>采用非屏蔽双绞线与集线器组建网络时，从节点到集线器的非屏蔽双绞线的最大长度为 <strong>100m</strong></li><li>载波侦听多路访问技术，是为了减少 <strong>冲突</strong>，它是在源站点发送报文之前，首先侦听信道是否 <strong>忙</strong>。如果侦听到信道上有载波信号，则 <strong>延迟</strong> 发送报文。</li><li>广域网通常覆盖 <strong>几百-几千公里</strong></li><li>广域网是由 <strong>路由器 交换机 网卡</strong> 等多种数据交换设备及传输设备构成</li><li>路由器的工作就是为经过路由器的 <strong>分组</strong> 寻找一条最佳传输路径，并将它有效的传送到 <strong>目的主机</strong></li><li>目前广域网使用的技术有 <strong>PSTN ISND xDSL X.25 帧中继 和 ATM</strong></li><li>虚电路的一个优点是为每条虚电路只做 <strong>1</strong> 次路由选择</li><li>ADSL作为一种广域网技术，充分利用现有的电话线资源，在一对双绞线上提供上行 <strong>640k/bps</strong>下行 <strong>8M/bps</strong> 的带宽。</li><li>在广域网种，路由表的计算方法分为 <strong>静态路由算法 和 动态路由算法</strong></li><li>Internet 域名是由 <strong>DNS</strong> 服务器提供和解析的</li><li><strong>密码学 密码编码学 密码分析学</strong></li><li>从网络传输的角度，通常有两种不同的加密策略，<strong>链路加密 和 端到端加密</strong></li><li><strong>网络蠕虫病毒 和 网页中嵌套的移动编码</strong></li><li>防火墙的四种基本类型 <strong>包过滤型防火墙 代理型，状态检测型，综合性型</strong></li><li>网络威胁主要包括 <strong>窃听，中断，伪造，篡改</strong></li><li>网络管理包括 <strong>故障管理，性能，计费，配置，安全</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Http客户端Feign</title>
      <link href="/2022/11/30/Feign/"/>
      <url>/2022/11/30/Feign/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Http客户端Feign"><a href="#Http客户端Feign" class="headerlink" title="Http客户端Feign"></a>Http客户端Feign</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>Feign 是 Netflix 开发的声明式、模板化的HTTP客户端， Feign可以帮助我们更快捷、优雅地调用HTTP API。</p><p>Spring Cloud Feign帮助我们定义和实现依赖服务接口的定义。在Spring Cloud feign的实现下，只需要创建一个接口并用注解方式配置它，即可完成服务提供方的接口绑定，简化了在使用Spring Cloud Ribbon时自行封装服务调用客户端的开发量。</p><p>Spring Cloud对Feign进行了增强，使Feign支持了Spring MVC注解，并整合了Ribbon和Eureka，从而让Feign的使用更加方便。</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- feign客户端依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="启动类添加注解开启Feign的功能"><a href="#启动类添加注解开启Feign的功能" class="headerlink" title="启动类添加注解开启Feign的功能"></a>启动类添加注解开启Feign的功能</h3><div class="note success simple"><p>@EnableFeignClients</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221130090618989.png"></p><h3 id="编写Feign客户端"><a href="#编写Feign客户端" class="headerlink" title="编写Feign客户端"></a>编写Feign客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定服务名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;userServer&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    请求方法和请求路径</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note danger simple"><p>如果出现依赖注入失败，可以在启动类上添加配置，指定所要扫描的客户端</p><p>@EnableFeignClients(clients = {UserClient.class}）</p></div><h3 id="用Feign客户端代替RestTemplate"><a href="#用Feign客户端代替RestTemplate" class="headerlink" title="用Feign客户端代替RestTemplate"></a>用Feign客户端代替RestTemplate</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserClient userClient;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2. 利用RestTemplate发起http请求，查询用户</span></span><br><span class="line">    <span class="comment">// String url = &quot;http://userServer/user/&quot; + order.getUserId();</span></span><br><span class="line">    <span class="comment">// User user = restTemplate.getForObject(url, User.class);</span></span><br><span class="line">    <span class="comment">// 2. 利用 Feign发起 http请求，查询用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userClient.findById(order.getUserId());</span><br><span class="line">    <span class="comment">// 3. 封装user到order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Feign的配置"><a href="#Feign的配置" class="headerlink" title="Feign的配置"></a>Feign的配置</h2><div class="note info simple"><p>从Feign优化的角度考虑，Feign一般只对日志进行配置，且只配置为NONE或BASIC</p></div><table><thead><tr><th>类型</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>feign.Logger.Level</td><td>修改日志级别</td><td>包含四种不同的级别：NONE、BASIC、HEADERS、FULL</td></tr><tr><td>feign.codec.Decoder</td><td>响应结果的解析器</td><td>http远程调用的结果做解析，例如解析json字符串为java对象</td></tr><tr><td>feign.codec.Encoder</td><td>请求参数编码</td><td>将请求参数编码，便于通过http请求发送</td></tr><tr><td>feign. Contract</td><td>支持的注解格式</td><td>默认是SpringMVC的注解</td></tr><tr><td>feign. Retryer</td><td>失败重试机制</td><td>请求失败的重试机制，默认是没有，不过会使用Ribbon的重试</td></tr></tbody></table><blockquote><ul><li>NONE：没有日志</li><li>BASIC：只有基础的请求信息</li><li>HEADERS：有请求头</li><li>FULL：有请求体和响应体等所有信息</li></ul></blockquote><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">配置文件方式</button></li><li class="tab"><button type="button" data-href="#note-2">Java代码方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><div class="note success simple"><p>全局配置</p></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>局部配置</p></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">userServer:</span></span><br><span class="line">        <span class="attr">loggerLevel:</span> <span class="string">BASIC</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><p>先声明一个Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignClientConfiguration</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Logger.Level <span class="title function_">feignLogLevel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.BASIC;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p>全局配置</p></div><p>在启动类中配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure><div class="note success simple"><p>局部配置</p></div><p>在Feign客户端中配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;userServer&quot;, configuration = FeignClientConfiguration.class)</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><blockquote><p>feign默认是使用 jdk 的<code>URLConnection</code>,这个既不优雅，也不支持连接池等。</p><p>为了提高feign性能，我们使用<code>HttpClient</code></p></blockquote><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- feign的httpclient依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">httpclient:</span></span><br><span class="line">    <span class="comment">#    开启对httpclient的支持</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#    最大连接数</span></span><br><span class="line">    <span class="attr">max-connections:</span> <span class="number">200</span></span><br><span class="line">    <span class="comment">#    每个路径的最大连接数</span></span><br><span class="line">    <span class="attr">max-connections-per-route:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Feign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Public Key Retrieval is not allowed</title>
      <link href="/2022/11/30/Public%20Key%20Retrieval%20is%20not%20allowed/"/>
      <url>/2022/11/30/Public%20Key%20Retrieval%20is%20not%20allowed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Public-Key-Retrieval-is-not-allowed"><a href="#Public-Key-Retrieval-is-not-allowed" class="headerlink" title="Public Key Retrieval is not allowed"></a>Public Key Retrieval is not allowed</h1><h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><div class="note danger simple"><p>java.sql.SQLNonTransientConnectionException: Public Key Retrieval is not allowed</p></div><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><div class="note success simple"><p>url: jdbc:mysql://localhost:3306/cloud_order?useSSL=false&amp;allowPublicKeyRetrieval=true</p></div>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wrong </tag>
            
            <tag> MySql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos注册中心</title>
      <link href="/2022/11/28/Nacos/"/>
      <url>/2022/11/28/Nacos/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><blockquote><p>Nacos是阿里巴巴的产品，现在是SpringCloud的一个组件，相较于Eureka功能更加丰富，在国内受欢迎程度较高</p></blockquote><h2 id="Nacos和Eureka的区别"><a href="#Nacos和Eureka的区别" class="headerlink" title="Nacos和Eureka的区别"></a>Nacos和Eureka的区别</h2><h3 id="共同点"><a href="#共同点" class="headerlink" title="共同点"></a>共同点</h3><ol><li>都支持服务注册和服务拉取</li><li>都支持服务提供者心跳方式做健康检测</li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>Nacos支持服务端主动检测提供者状态：<ul><li>临时实例采用心跳模式</li><li>非临时实例采用主动检测模式</li></ul></li><li>临时实例心跳不正常会被剔除，非临时实例则不会被剔除</li><li>Nacos支持服务列表变更的消息推送模式，服务列表更新更及时</li><li>Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式；Eureka采用AP方式</li></ol><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><blockquote><p><a href="https://nacos.io/zh-cn/">下载地址</a></p><p>解压之后进入bin目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd: startup.cmd -m standalone</span><br></pre></td></tr></table></figure><p>默认端口：8848</p><p>浏览器访问：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://你的IP:8848/nacos/index.html#/login</span><br></pre></td></tr></table></figure><p>账号：nacos</p><p>密码：nacos</p></blockquote><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- nacos客户端依赖包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userServer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128152350211.png"></p><h3 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userServer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">cluster-name:</span> <span class="string">hero</span> <span class="comment">#集群名称</span></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128153749290.png"></p><h3 id="NacosRule负载均衡"><a href="#NacosRule负载均衡" class="headerlink" title="NacosRule负载均衡"></a>NacosRule负载均衡</h3><blockquote><p>优先”同名”的集群，随机调用实例</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#nacos配置</span></span><br><span class="line"><span class="attr">userServer:</span></span><br><span class="line">  <span class="attr">ribbon:</span> <span class="comment"># 负载均衡规则</span></span><br><span class="line">    <span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.alibaba.cloud.nacos.ribbon.NacosRule</span></span><br></pre></td></tr></table></figure><p>实例权重配置</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128155513949.png"></p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128160129627.png" alt="image-20221128160129627"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128160254583.png"></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">orderServer</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span> <span class="comment">#nacos服务地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">2bb013e0-6e0a-4b8b-9ee7-743fb3783e2c</span></span><br></pre></td></tr></table></figure><h2 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h2><h3 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h3><p>在前端操作很方便</p><ol><li><p>新增配置</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129141248080.png"></p></li><li><p>填写配置内容</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129141841252.png"></p></li><li><p>本地调用远程配置</p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Nacos 配置管理依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在userservice中的resource目录添加一个<code>bootstrap.yml</code>文件，这个文件是引导文件，优先级高于<code>application.yml</code>（注意删除application中与bootstrap相同的配置）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userServer</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="comment"># 开发环境</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 文件后缀名</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>设置为热部署</p><div class="note info simple"><p>在使用配置的类上添加注解 @RefreshScope</p></div></li><li><p>配置共享</p><blockquote><p>微服务启动时会从nacos读取多个配置文件：</p><ul><li>[spring.application.name]-[spring.profiles.active].yaml，例如：userservice-dev.yaml</li><li>[spring.application.name].yaml，例如：userservice.yaml</li></ul><p>无论profile如何变化，[spring.application.name].yaml这个文件一定会加载，因此多环境共享配置可以写入这个文件</p></blockquote><div class="note success simple"><p>优先级：*-profile.yaml &gt; *.yaml &gt; 本地配置</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129150928046.png"></p></li></ol><h2 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h2><blockquote><p>此次是在Windows环境下搭建的，Linux环境之前搭建过，都差不多。这次也是学习，就Windows凑合凑合吧</p><p>Nacos：1.4.1</p><p>Nginx：1.18.0</p></blockquote><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>创建数据库 <code>nacos</code>，执行查询</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">64</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h3><ol><li><p>解压后进入conf，修改配置文件cluster.conf.example，重命名为cluster.conf</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129173647828.png"></p></li><li><p>在<code>cluster.conf</code>中加入（实际生产环境就配置服务器ip）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1:8845</span><br><span class="line">127.0.0.1.8846</span><br><span class="line">127.0.0.1.8847</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129173829487.png"></p></li><li><p>然后修改application.properties文件，添加数据库配置</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">你的密码</span></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129174117515.png"></p></li><li><p>将nacos复制三份，并修改<code>application.properties</code>中端口号，分别为<code>8845</code>,<code>8846</code>,<code>8847</code></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221129174328949.png" alt="image-20221129174328949"></p></li><li><p>启动三个nacos</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">cmd: <span class="title">startup.cmd</span></span></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223175034394.png"></p></li></ol><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ol><li><p>解压后进入conf目录，修改conf/nginx.conf文件，配置如下，放在 <code>http&#123; &#125;</code>内即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream nacos-cluster &#123;</span><br><span class="line">    server 127.0.0.1:8845;</span><br><span class="line">server 127.0.0.1:8846;</span><br><span class="line">server 127.0.0.1:8847;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location /nacos &#123;</span><br><span class="line">        proxy_pass http://nacos-cluster;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改之前<code>bootstrap.yml</code> 中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># Nacos地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:80</span> </span><br></pre></td></tr></table></figure></li><li><p>启动服务，浏览器访问 <a href="http://localhost/nacos">http://localhost/nacos</a></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223175008565.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 注册中心 </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心</title>
      <link href="/2022/11/25/Eureka/"/>
      <url>/2022/11/25/Eureka/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="搭建Eureka服务"><a href="#搭建Eureka服务" class="headerlink" title="搭建Eureka服务"></a>搭建Eureka服务</h1><h2 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a>Eureka的作用</h2><ul><li>消费者如何获取服务提供者的具体信息<ul><li>eureka也是服务，它会将自己也提交到注册中心，用于eureka集群之间通信</li><li>服务提供者启动时，向eureka注册自己的信息</li><li>eureka保存这些信息</li><li>服务消费者根据服务名称向eureka拉取提供者的信息</li></ul></li><li>如果有多个服务提供者，消费者该如何选择<ul><li>服务消费者根据负载均衡算法，从服务列表中挑选一个</li></ul></li><li>先非洲如何感知服务提供者的健康状态<ul><li>服务提供者会每隔30s向注册中心发送心跳请求，报告健康状态</li><li>eureka会更新记录服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul></li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223153409938.png"></p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动注解"><a href="#启动注解" class="headerlink" title="启动注解"></a>启动注解</h2><div class="note success no-icon flat"><p>@EnableEurekaServer</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><div class="note success no-icon flat"><p>​    application.yml</p></div><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5901</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">eurekaserver</span> <span class="comment"># eureka的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># eureka 的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:5901/eureka</span></span><br></pre></td></tr></table></figure><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">userServer</span> <span class="comment"># 你的服务名称</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  <span class="comment"># eureka 的地址信息</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:5901/eureka</span></span><br></pre></td></tr></table></figure><h3 id="部署多个实例"><a href="#部署多个实例" class="headerlink" title="部署多个实例"></a>部署多个实例</h3><div class="note success no-icon flat"><p>IDEA</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128105225169.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128105449663.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128105958510.png"></p><h2 id="服务拉取"><a href="#服务拉取" class="headerlink" title="服务拉取"></a>服务拉取</h2><div class="note success no-icon flat"><p>Service,OrderService</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">queryOrderById</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1.查询订单</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.findById(orderId);</span><br><span class="line">    <span class="comment">// 2. 利用RestTemplate发起http请求，查询用户</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://userServer/user/&quot;</span> + order.getUserId();</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> restTemplate.getForObject(url, User.class);</span><br><span class="line">    <span class="comment">//3. 封装user到order</span></span><br><span class="line">    order.setUser(user);</span><br><span class="line">    <span class="comment">// 4.返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success no-icon flat"><p>启动类，@LoadBalanced负载均衡配置</p></div><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  创建 RestTemplate 并注入Spring容器</span></span><br><span class="line"><span class="comment">*  <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h2><h3 id="负载均衡原理"><a href="#负载均衡原理" class="headerlink" title="负载均衡原理"></a>负载均衡原理</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128114515696.png" alt="image-20221128114515696"></p><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><blockquote><p>Ribbon的负载均衡规则是一个叫做<code>IRule</code>的接口来定义的，每一个子接口都是一种规则</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221128114554160.png"></p><table><thead><tr><th align="left">类名</th><th align="left">规则描述</th></tr></thead><tbody><tr><td align="left">RoundRobinRule</td><td align="left">轮询规则，默认方法</td></tr><tr><td align="left">AvailabilityFilteringRule</td><td align="left">忽略并发过高和短路状态的服务器</td></tr><tr><td align="left">WeightedResponseTimeRule</td><td align="left">权重规则</td></tr><tr><td align="left">ZoneAvoidanceRule</td><td align="left">以区域可用的服务器为基础进行服务器的选择。</td></tr><tr><td align="left">BestAvailableRule</td><td align="left">忽略那些短路的服务器，并选择并发数较低的服务器。</td></tr><tr><td align="left">RandomRule</td><td align="left">随机规则</td></tr><tr><td align="left">RetryRule</td><td align="left">重试机制的选择逻辑</td></tr></tbody></table><h4 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h4><ol><li><p>在启动类中重写方法，返回值为你要的规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> IRule <span class="title function_">randomRule</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RandomRule</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>或者在<code>application.yml</code>中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">userServer:</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line"><span class="attr">NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule#</span> <span class="string">负载均衡规则</span> </span><br></pre></td></tr></table></figure></li></ol><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><blockquote><p>Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。</p><p>而饥饿加载则会在项目启动时创建，降低第一次访问的耗时。</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">eager-load:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启饥饿加载</span></span><br><span class="line">    <span class="attr">clients:</span> <span class="string">userServer</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Eureka </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax,Axios</title>
      <link href="/2022/11/22/Ajax/"/>
      <url>/2022/11/22/Ajax/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Ajaxs"><a href="#Ajaxs" class="headerlink" title="Ajaxs"></a>Ajaxs</h1><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">GET</button></li><li class="tab"><button type="button" data-href="#note-2">POST</button></li><li class="tab"><button type="button" data-href="#note-3">JSON</button></li><li class="tab"><button type="button" data-href="#note-4">请求超时</button></li><li class="tab"><button type="button" data-href="#note-5">取消请求</button></li><li class="tab"><button type="button" data-href="#note-6">取消重复请求</button></li><li class="tab"><button type="button" data-href="#note-7">JQuery</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取 button 元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 绑定事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// ajax 实现</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 创建对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2.初始化 设置请求方法和 url</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://localhost:8000/server?a=100&amp;b=200&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 发送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. 事件绑定 处理服务器返回的结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// on 当...的时候</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// readystate 是 xhr 对象中的属性，表示状态 0 1 2 3 4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// change 改变的时候</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 判断(服务器返回了所有结果)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// === 判断两端的数值与数据类型是否相同</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 判断响应状态码 200 404 403 401 500</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 2xx 为成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 处理结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">responseText</span> +<span class="string">&#x27;\n&#x27;</span>+ xhr.<span class="property">status</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"><span class="comment">// get请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello ajax! get&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 获取元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 绑定事件，当鼠标悬浮，调用ajax</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        result.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 创建对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2. 初始化，设置请求方法和 url</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>,<span class="string">&#x27;http://localhost:8000/server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 设置请求头</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 发送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// post请求参数放在这里,这个格式与服务器那端相应即可</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// xhr.send(&#x27;a=100&amp;b=200&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// xhr.send(&#x27;a:100&amp;b:200&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// xhr.send(&#x27;1321321&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. 事件绑定</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 判断</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span>(xhr.<span class="property">readyState</span> ===<span class="number">4</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 处理返回结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"><span class="comment">// post请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;hello ajax! post&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 按下键盘，捕获元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onkeydown</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1. 创建对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 设置响应体数据类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2.初始化 设置请求方法和 url</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8000/json-server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 3. 发送</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 4. 事件绑定 处理服务器返回的结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 判断(服务器返回了所有结果)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// === 判断两端的数值与数据类型是否相同</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 判断响应状态码 200 404 403 401 500</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 2xx 为成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 处理结果</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// result.innerHTML = xhr.responseText;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 手动对数据转化</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// let data = JSON.parse(xhr.response);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        <span class="comment">// 自动转化，在创建xhr对象下设置响应体数据类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>.<span class="property">name</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// all允许所有请求</span></span><br><span class="line"><span class="comment">// json</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 响应头</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// 响应数据</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;heroxin&#x27;</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对对象进行字符串转化</span></span><br><span class="line">    <span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data);</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    response.<span class="title function_">send</span>(str);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        点我发送请求</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> result = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#result&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 设置 2s 超时</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">timeout</span> = <span class="number">2000</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 超时回调函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">ontimeout</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;请求超时，请稍后再试&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8000/timeout-server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                        result.<span class="property">innerHTML</span> = xhr.<span class="property">response</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 延时响应</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/timeout-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;超时响应&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我取消请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8000/cancel-server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 取消请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">abort</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/cancel-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;取消请求&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-6"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 设置标识变量,是否正在发送ajax请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">let</span> isSending = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 判断标识变量,如果正在请求，则取消</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">if</span> (isSending) xhr.<span class="title function_">abort</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 修改标识变量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            isSending = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://localhost:8000/chongfu-server&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="title function_">send</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (xhr.<span class="property">readyStatus</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">// 修改标识变量值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    isSending = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消重复请求</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/chongfu-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置超时时间</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 设置响应体</span></span><br><span class="line">        response.<span class="title function_">send</span>(<span class="string">&#x27;取消重复请求&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-7"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>jquery发送ajax请求<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>通用型方法ajax<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">0</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// get请求方法，url，参数，回调函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">get</span>(<span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>, &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">1</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">post</span>(<span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>, &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        $(<span class="string">&#x27;button&#x27;</span>).<span class="title function_">eq</span>(<span class="number">2</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            $.<span class="title function_">ajax</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// url</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:8000/jquery-server&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 请求类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// // 响应数据类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 成功的回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 失败的回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>server.js配置</p></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// 1. 引入express</span></span><br><span class="line"><span class="keyword">const</span> &#123; response &#125; = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建路由规则</span></span><br><span class="line"><span class="comment">// request 对请求报文的封装</span></span><br><span class="line"><span class="comment">// response 对响应报文的封装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery 服务</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/jquery-server&#x27;</span>, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应 设置允许跨域</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;hello &#x27;</span> + <span class="string">&#x27;ajax &#x27;</span> + <span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务</span></span><br><span class="line"><span class="comment">// node ./express基本使用.js</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务已经启动，8000端口监听中。。。&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">基本用法</button></li><li class="tab"><button type="button" data-href="#note-2">函数用法</button></li><li class="tab"><button type="button" data-href="#note-3">简化配置</button></li><li class="tab"><button type="button" data-href="#note-4">实例对象</button></li><li class="tab"><button type="button" data-href="#note-5">拦截器</button></li><li class="tab"><button type="button" data-href="#note-6">取消请求</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span> 发送GET请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-warning&quot;</span> &gt;</span> 发送POST请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span> 发送 PUT 请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-danger&quot;</span>&gt;</span> 发送 DELETE 请求 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//获取按钮</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//第一个</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//发送 AJAX 请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//请求类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//URL</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//添加一篇新的文章</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//发送 AJAX 请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//请求类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//URL</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//设置请求体</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">title</span>: <span class="string">&quot;今天天气不错, 还挺风和日丽的&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">author</span>: <span class="string">&quot;张三&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//更新数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">2</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//发送 AJAX 请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//请求类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">method</span>: <span class="string">&#x27;PUT&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//URL</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//设置请求体</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">title</span>: <span class="string">&quot;今天天气不错, 还挺风和日丽的&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="attr">author</span>: <span class="string">&quot;李四&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//删除数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        btns[<span class="number">3</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//发送 AJAX 请求</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">axios</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//请求类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">//URL</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts/3&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取按钮</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送 GET 请求</span></span><br><span class="line">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// axios()</span></span><br><span class="line">        axios.<span class="title function_">request</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>:<span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/comments&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送 POST 请求</span></span><br><span class="line">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// axios()</span></span><br><span class="line">        axios.<span class="title function_">post</span>(</span><br><span class="line">            <span class="string">&#x27;http://localhost:3000/comments&#x27;</span>, </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;body&quot;</span>: <span class="string">&quot;喜大普奔&quot;</span>,</span><br><span class="line">                <span class="string">&quot;postId&quot;</span>: <span class="number">2</span></span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取按钮</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="comment">//默认配置</span></span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">method</span> = <span class="string">&#x27;GET&#x27;</span>;<span class="comment">//设置默认的请求类型为 GET</span></span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://localhost:3000&#x27;</span>;<span class="comment">//设置基础 URL</span></span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">params</span> = &#123;<span class="attr">id</span>:<span class="number">100</span>&#125;;</span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">3000</span>;<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;/posts&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取按钮</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建实例对象  /getJoke</span></span><br><span class="line">    <span class="keyword">const</span> duanzi = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.apiopen.top&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">2000</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onather = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">        <span class="attr">baseURL</span>: <span class="string">&#x27;https://b.com&#x27;</span>,</span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">2000</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//这里  duanzi 与 axios 对象的功能几近是一样的</span></span><br><span class="line">    <span class="comment">// duanzi(&#123;</span></span><br><span class="line">    <span class="comment">//     url: &#x27;/getJoke&#x27;,</span></span><br><span class="line">    <span class="comment">// &#125;).then(response =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(response);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line">    duanzi.<span class="title function_">get</span>(<span class="string">&#x27;/getJoke&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// Promise</span></span><br><span class="line">    <span class="comment">// 设置请求拦截器  config 配置对象</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 1号&#x27;</span>);</span><br><span class="line">    <span class="comment">//修改 config 中的参数</span></span><br><span class="line">    config.<span class="property">params</span> = &#123;<span class="attr">a</span>:<span class="number">100</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 1号&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 成功 - 2号&#x27;</span>);</span><br><span class="line">        <span class="comment">//修改 config 中的参数</span></span><br><span class="line">        config.<span class="property">timeout</span> = <span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求拦截器 失败 - 2号&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置响应拦截器</span></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 1号&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// return response;</span></span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 1号&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 成功 2号&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应拦截器 失败 2号&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;自定义回调处理成功的结果&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">    &#125;);</span><br><span class="line"> &lt;/script&gt;   </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-6"><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">//获取按钮</span></span><br><span class="line">    <span class="keyword">const</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    <span class="comment">//2.声明全局变量</span></span><br><span class="line">    <span class="keyword">let</span> cancel = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//检测上一次的请求是否已经完成</span></span><br><span class="line">        <span class="keyword">if</span>(cancel !== <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//取消上一次的请求</span></span><br><span class="line">            <span class="title function_">cancel</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">axios</span>(&#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/posts&#x27;</span>,</span><br><span class="line">            <span class="comment">//1. 添加配置对象的属性</span></span><br><span class="line">            <span class="attr">cancelToken</span>: <span class="keyword">new</span> axios.<span class="title class_">CancelToken</span>(<span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">                <span class="comment">//3. 将 c 的值赋值给 cancel</span></span><br><span class="line">                cancel = c;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response);</span><br><span class="line">            <span class="comment">//将 cancel 的值初始化</span></span><br><span class="line">            cancel = <span class="literal">null</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定第二个事件取消请求</span></span><br><span class="line">    btns[<span class="number">1</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">cancel</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;   </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> Axios </tag>
            
            <tag> JQuery </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务架构概念</title>
      <link href="/2022/11/20/Micro/"/>
      <url>/2022/11/20/Micro/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="微服务架构概念"><a href="#微服务架构概念" class="headerlink" title="微服务架构概念"></a>微服务架构概念</h1><h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><blockquote><p>微服务架构是一种将应用程序分解为多个小而自治的服务的软件架构。每个服务都有自己的功能，进程，语言和协议。可以<strong>独立部署和拓展</strong>。微服务架构可以提升应用程序的<strong>灵活性，可拓展性和开发效率</strong>。</p></blockquote><h2 id="微服务技术栈"><a href="#微服务技术栈" class="headerlink" title="微服务技术栈"></a>微服务技术栈</h2><ul><li>随着人们需求的增加，相应的服务就增加了，构建起一个庞大的<strong>服务集群</strong>。</li><li>服务越多，服务之间的相互调用越来越复杂，这样我们就需要一个<strong>注册中心</strong>来记录每一个服务的IP与端口及功能。当需要调用服务时，只需要把请求发给注册中心，拉取对应的服务。</li><li>同时，每个服务器都有自己的配置文件，当配置发生变动时更改过于繁琐，这样就产生了<strong>配置中心</strong>。它统一管理整个集群的配置文件，配置变更时它会通知相应的服务器，从而实现配置的热更新。</li><li>对用户的访问设置了<strong>服务网关</strong>，它完成了用户的身份验证，请求路由，负载均衡等功能。 </li><li>数据的增加造成数据库无法抗住高并发与大量的数据，可以加入<strong>分布式缓存</strong>把数据库中数据放入内存当中提升查询效率，用<strong>分布式搜索</strong>完成海量数据的复杂查询。</li><li>通常一个业务会跨越多个服务，这会导致整个业务了列路很长，调用时常就会等于每个服务的执行时常之和。加入<strong>消息队列</strong>后，起始服务发出通知而不是直接调用进而减少通行时间。</li><li>此外还有统一的<strong>分布式日志服务</strong>来检测服务的运行日志，更快的定位到问题所在。</li><li><strong>系统监控链路追踪来</strong>检测整个集群中服务器的运行温度，cpu，内存等信息</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223102916944.png"></p><h2 id="微服务架构的发展"><a href="#微服务架构的发展" class="headerlink" title="微服务架构的发展"></a>微服务架构的发展</h2><h3 id="单一应用架构"><a href="#单一应用架构" class="headerlink" title="单一应用架构"></a>单一应用架构</h3><blockquote><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p></blockquote><p>大致就是将所有的逻辑和业务写在同一个项目中 一般网站流量小 并且只需要一个应用 将所有代码部署在一起 可以减少开发、部署、运维的成本</p><p>缺点：</p><ul><li>性能扩展难</li><li>协同开发难</li><li>升级维护难</li></ul><h3 id="垂直应用架构"><a href="#垂直应用架构" class="headerlink" title="垂直应用架构"></a>垂直应用架构</h3><blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web框架(MVC) 是关键。</p></blockquote><p>就是将单体架构拆分为多个互不相干的应用 大大提升了效率 </p><p>缺点：</p><ul><li>公共模块无法重复利用，开发性浪费</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170002760.png"></p><h3 id="分布式服务架构"><a href="#分布式服务架构" class="headerlink" title="分布式服务架构"></a>分布式服务架构</h3><blockquote><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170549762.png"></p><h3 id="流动式计算框架"><a href="#流动式计算框架" class="headerlink" title="流动式计算框架"></a>流动式计算框架</h3><blockquote><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心**(SOA)[ Service Oriented Architecture]**是关键。</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170643342.png"></p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><blockquote><p>微服务架构是一种经过良好架构设计的分布式架构方案，微服务架构特：</p><ul><li>单一职责：微服务拆分粒度更小，每个服务都对应唯一的业务能力，能做到单一职责，避免重复业务开发</li><li>面向服务：微服务对外暴露业务接口</li><li>自治：团队独立，技术独立，数据独立，部署独立</li><li>隔离性强：服务调用做好隔离，容错，降级，避免出现级联问题。</li></ul></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223111044942.png"></p><h2 id="微服务技术对比"><a href="#微服务技术对比" class="headerlink" title="微服务技术对比"></a>微服务技术对比</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230223111155698.png"></p><h2 id="微服务远程调用"><a href="#微服务远程调用" class="headerlink" title="微服务远程调用"></a>微服务远程调用</h2><h3 id="提供者与消费者"><a href="#提供者与消费者" class="headerlink" title="提供者与消费者"></a>提供者与消费者</h3><ul><li>服务提供者：一次业务中，被其他微服务调用的服务。（提供接口给其他微服务）</li><li>服务消费者：一次业务中，调用其他微服务的服务。（调用其他微服务提供的接口）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK,JRE,JVM</title>
      <link href="/2022/11/17/JDK,JRE,JVM/"/>
      <url>/2022/11/17/JDK,JRE,JVM/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JDK-JRE-JVM的联系和区别"><a href="#JDK-JRE-JVM的联系和区别" class="headerlink" title="JDK,JRE,JVM的联系和区别"></a>JDK,JRE,JVM的联系和区别</h1><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ol><li>JDK(Java Development Kit) 是Java的核心</li><li>包含了Java运行环境(JRE : Java Runtime Environment)，一些Java工具(javac,jaca,jdb等)，和Java的基础类库(即JavaAPI)。</li></ol><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><ol><li>JRE(Java Runtime Environment)是Java的运行环境</li><li>包含了JVM标准实现和Java核心类库(lib类库)</li><li>见名知意，它是Java运行时需要的</li></ol><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><ol><li>JVM(Java Virtual Machine)，即Java虚拟机</li></ol><h2 id="三者的联系"><a href="#三者的联系" class="headerlink" title="三者的联系"></a>三者的联系</h2><ol><li>JDK由JRE和一些Java工具以及基础类库组成，而JRE由JVM和lib类库组成</li><li>JDK是一个开发环境，它里面有将 java文件编译成 .class文件的 javac程序，也有jre.exe,javadoc.exe等用于开发的可执行指令文件。</li><li>JRE则是一个运行环境，它下面不包含任何的开发工具。</li><li>JVM执行 .class文件时，需要JRE下lib类库的支持，尤其是rt.jar</li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sort</title>
      <link href="/2022/11/01/Sort/"/>
      <url>/2022/11/01/Sort/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">快速排序</button></li><li class="tab"><button type="button" data-href="#note-2">冒泡排序</button></li><li class="tab"><button type="button" data-href="#note-3">插入排序</button></li><li class="tab"><button type="button" data-href="#note-4">选择排序</button></li><li class="tab"><button type="button" data-href="#note-5">希尔排序</button></li><li class="tab"><button type="button" data-href="#note-6">归并排序</button></li><li class="tab"><button type="button" data-href="#note-7">基数排序</button></li><li class="tab"><button type="button" data-href="#note-8">堆排序</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-10-31-19:49</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 快速排序</span></span><br><span class="line"><span class="comment">    https://blog.csdn.net/qq_40941722/article/details/94396010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左哨兵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右哨兵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序完成后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] quickSort(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123; <span class="comment">// 判断区间是否只有一个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[left]; <span class="comment">// 基数</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) <span class="comment">// x 在左，先从右向左找第一个小于x的数</span></span><br><span class="line">                    j--;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                    arr[i++] = arr[j]; <span class="comment">// 将 j 放到基数的位置，也就是 i 的位置</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">                    i++;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                    arr[j--] = arr[i]; <span class="comment">// 将大值放在 j 的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = x; <span class="comment">// 第一轮结束，基数大于左边，小于右边</span></span><br><span class="line">            quickSort(arr, left, i - <span class="number">1</span>); <span class="comment">// 递归调用左边，i 指向的是上一轮的基数，所以 right = i - 1</span></span><br><span class="line">            quickSort(arr, i + <span class="number">1</span>, right);<span class="comment">// 递归调用右边，left = i + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-10-31-19:49</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 冒泡排序</span></span><br><span class="line"><span class="comment">    https://blog.csdn.net/qq_40941722/article/details/94396010</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quick</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   待排序数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左哨兵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右哨兵</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 排序完成后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] quickSort(<span class="type">int</span> arr[], <span class="type">int</span> left, <span class="type">int</span> right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123; <span class="comment">// 判断区间是否只有一个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> right;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> arr[left]; <span class="comment">// 基数</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= x) <span class="comment">// x 在左，先从右向左找第一个小于x的数</span></span><br><span class="line">                    j--;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                    arr[i++] = arr[j]; <span class="comment">// 将 j 放到基数的位置，也就是 i 的位置</span></span><br><span class="line">                <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; x) <span class="comment">// 从左向右找第一个大于等于x的数</span></span><br><span class="line">                    i++;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">                    arr[j--] = arr[i]; <span class="comment">// 将大值放在 j 的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">            arr[i] = x; <span class="comment">// 第一轮结束，基数大于左边，小于右边</span></span><br><span class="line">            quickSort(arr, left, i - <span class="number">1</span>); <span class="comment">// 递归调用左边，i 指向的是上一轮的基数，所以 right = i - 1</span></span><br><span class="line">            quickSort(arr, i + <span class="number">1</span>, right);<span class="comment">// 递归调用右边，left = i + 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-10-24-18:34</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 插入排序</span></span><br><span class="line"><span class="comment">        有一数组，第一个元素为有序，后面的为无序</span></span><br><span class="line"><span class="comment">        第一个无序元素与最后一个有序元素比较，</span></span><br><span class="line"><span class="comment">            符合条件，继续向左比较；</span></span><br><span class="line"><span class="comment">            不符合条件，将其放在最后一个有序元素右边</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Insert</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        insertSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">//            第一个无序元素</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertVal</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="comment">//            最后一个有序元素下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">insertIndex</span> <span class="operator">=</span> i - <span class="number">1</span>;</span><br><span class="line"><span class="comment">//            insertIndex &gt;=0 : 说明在有序元素的范围内</span></span><br><span class="line"><span class="comment">//            insertVal &lt; arr[insertIndex] : 说明这个无序元素应该插入到最后一个有序元素的左边</span></span><br><span class="line">            <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line"><span class="comment">//                最后一个有序元素向右移动，为这个无序元素腾出空间</span></span><br><span class="line"><span class="comment">//                      此时，覆盖掉的是无序元素的值，但我们已经将其保存在 insertVal 中</span></span><br><span class="line"><span class="comment">//                      往后，覆盖掉的是最后一个有序元素的值。这个不需要保存，因为它的前一个位置就是它</span></span><br><span class="line">                arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line"><span class="comment">//                更新最后一个有序元素，向左扫描</span></span><br><span class="line">                insertIndex--;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            将无序元素放到不符合条件的最后一个有序元素上</span></span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-10-24-16:51</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 选择排序</span></span><br><span class="line"><span class="comment">        现有 n 个元素组成的数组</span></span><br><span class="line"><span class="comment">        首先假定第一个元素为数组中最小值，然后向后遍历，找到比 它更小的元素，然后交换</span></span><br><span class="line"><span class="comment">        然后，假定第二个元素为数组中最小值，然后向后遍历，找到比 它更小的元素，然后交换</span></span><br><span class="line"><span class="comment">        ……</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Select</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        selectSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">selectSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">//            最小值下标</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">minIndex</span> <span class="operator">=</span> i;</span><br><span class="line"><span class="comment">//            最小值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i ; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line"><span class="comment">//                    记录最小值的下标</span></span><br><span class="line">                    minIndex = j;</span><br><span class="line"><span class="comment">//                    更新最小值</span></span><br><span class="line">                    min = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//            将最小值放在前面</span></span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i]  = min;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-10-31-17:52</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 希尔排序</span></span><br><span class="line"><span class="comment">        希尔排序也是一种插入排序</span></span><br><span class="line"><span class="comment">        数组长度 / 2 = 增量，按增量的大小将数组分组，每组进行排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">        shellSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="comment">//        将数组进行分组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class="line">                        arr[j] = arr[j - gap];</span><br><span class="line">                        j -= gap;</span><br><span class="line">                    &#125;</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-6"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-11-02-17:24</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 归并排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Merge</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//归并排序需要一个额外空间</span></span><br><span class="line">      <span class="type">int</span> temp[] = <span class="keyword">new</span> <span class="title class_">int</span>[arr.length];</span><br><span class="line"></span><br><span class="line">      mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line">      System.out.println(Arrays.toString(arr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//分+合方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergeSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(left &lt; right) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>; <span class="comment">//中间索引</span></span><br><span class="line">         <span class="comment">//向左递归进行分解</span></span><br><span class="line">         mergeSort(arr, left, mid, temp);</span><br><span class="line">         <span class="comment">//向右递归进行分解</span></span><br><span class="line">         mergeSort(arr, mid + <span class="number">1</span>, right, temp);</span><br><span class="line">         <span class="comment">//合并</span></span><br><span class="line">         merge(arr, left, mid, right, temp);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//合并的方法</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> arr 排序的原始数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> left 左边有序序列的初始索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> mid 中间索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> temp 做中转的数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right, <span class="type">int</span>[] temp)</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; <span class="comment">// 初始化i, 左边有序序列的初始索引</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> mid + <span class="number">1</span>; <span class="comment">//初始化j, 右边有序序列的初始索引</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//(一)</span></span><br><span class="line">      <span class="comment">//先把左右两边(有序)的数据按照规则填充到temp数组</span></span><br><span class="line">      <span class="comment">//直到左右两边的有序序列，有一边处理完毕为止</span></span><br><span class="line">      <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="comment">//继续</span></span><br><span class="line">         <span class="comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span></span><br><span class="line">         <span class="comment">//即将左边的当前元素，填充到 temp数组</span></span><br><span class="line">         <span class="comment">//然后 t++, i++</span></span><br><span class="line">         <span class="keyword">if</span>(arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123; <span class="comment">//反之,将右边有序序列的当前元素，填充到temp数组</span></span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//(二)</span></span><br><span class="line">      <span class="comment">//把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class="line">      <span class="keyword">while</span>( i &lt;= mid) &#123; <span class="comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class="line">         temp[t] = arr[i];</span><br><span class="line">         t += <span class="number">1</span>;</span><br><span class="line">         i += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>( j &lt;= right) &#123; <span class="comment">//右边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class="line">         temp[t] = arr[j];</span><br><span class="line">         t += <span class="number">1</span>;</span><br><span class="line">         j += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">//(三)</span></span><br><span class="line">      <span class="comment">//将temp数组的元素拷贝到arr</span></span><br><span class="line">      <span class="comment">//注意，并不是每次都拷贝所有</span></span><br><span class="line">      t = <span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">tempLeft</span> <span class="operator">=</span> left; <span class="comment">//</span></span><br><span class="line">      <span class="comment">//第一次合并 tempLeft = 0 , right = 1 //  tempLeft = 2  right = 3 // tL=0 ri=3</span></span><br><span class="line">      <span class="comment">//最后一次 tempLeft = 0  right = 7</span></span><br><span class="line">      <span class="keyword">while</span>(tempLeft &lt;= right) &#123;</span><br><span class="line">         arr[tempLeft] = temp[t];</span><br><span class="line">         t += <span class="number">1</span>;</span><br><span class="line">         tempLeft += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-7"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.sort;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-11-02-17:27</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 基数排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Radix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">1</span>, -<span class="number">3</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">16</span>, <span class="number">10</span>&#125;;</span><br><span class="line">        radixSort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//基数排序方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">radixSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据前面的推导过程，我们可以得到最终的基数排序代码</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 得到数组中最大的数的位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>]; <span class="comment">//假设第一数就是最大数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; max) &#123;</span><br><span class="line">                max = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//得到最大数是几位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> (max + <span class="string">&quot;&quot;</span>).length();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1. 二维数组包含10个一维数组</span></span><br><span class="line">        <span class="comment">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span></span><br><span class="line">        <span class="comment">//3. 名明确，基数排序是使用空间换时间的经典算法</span></span><br><span class="line">        <span class="type">int</span>[][] bucket = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>][arr.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数</span></span><br><span class="line">        <span class="comment">//可以这里理解</span></span><br><span class="line">        <span class="comment">//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数</span></span><br><span class="line">        <span class="type">int</span>[] bucketElementCounts = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里我们使用循环将代码处理</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = <span class="number">1</span>; i &lt; maxLength; i++, n *= <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="comment">//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="comment">//取出每个元素的对应位的值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">digitOfElement</span> <span class="operator">=</span> arr[j] / n % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//放入到对应的桶中</span></span><br><span class="line">                bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];</span><br><span class="line">                bucketElementCounts[digitOfElement]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//遍历每一桶，并将桶中是数据，放入到原数组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;</span><br><span class="line">                <span class="comment">//如果桶中，有数据，我们才放入到原数组</span></span><br><span class="line">                <span class="keyword">if</span> (bucketElementCounts[k] != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//循环该桶即第k个桶(即第k个一维数组), 放入</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;</span><br><span class="line">                        <span class="comment">//取出元素放入到arr</span></span><br><span class="line">                        arr[index++] = bucket[k][l];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！</span></span><br><span class="line">                bucketElementCounts[k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-8"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hero.tree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @author Heroxin</span></span><br><span class="line"><span class="comment">    @create 2022-11-18-11:34</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description: 堆排序</span></span><br><span class="line"><span class="comment">    介绍：</span></span><br><span class="line"><span class="comment">            1. 堆排序是完全二叉树</span></span><br><span class="line"><span class="comment">            2. 大顶堆：每个节点的值都大于它左右节点的值，适用于升序排序</span></span><br><span class="line"><span class="comment">            2. 小顶堆：每个节点的值都小于它左右节点的值，适用于降序排序</span></span><br><span class="line"><span class="comment">      基本思想：</span></span><br><span class="line"><span class="comment">            1. 将待排序数组构造成一个大顶堆/小顶堆</span></span><br><span class="line"><span class="comment">            2. 将根节点与末端最大/最小节点进行交换，这样，最大值/最小值就在数组的最后一位了</span></span><br><span class="line"><span class="comment">            3. 调整堆结构后，重复第二步</span></span><br><span class="line"><span class="comment">       实现步骤：</span></span><br><span class="line"><span class="comment">            1. 将待排序数组按顺序二叉树存储</span></span><br><span class="line"><span class="comment">            2. 按从下至上，从左至右的顺序，调整第一个非叶子几点，使它所在的二叉树满足堆排序</span></span><br><span class="line"><span class="comment">                (arr.length / 2 - 1 : 第一个非叶子节点)</span></span><br><span class="line"><span class="comment">            3. 接着调整第二个非叶子节点</span></span><br><span class="line"><span class="comment">            4. 然后回来查看第 3 步操作是否打乱第 2 步调整好的堆排序</span></span><br><span class="line"><span class="comment">            5. 循环往复，就将待排序数组调整为堆结构</span></span><br><span class="line"><span class="comment">            6. 将根节点与末端最大/最小节点进行交换，调整后的最大/最小值不动，继续调整堆结构</span></span><br><span class="line"><span class="comment">            7. 循环往复，这样就排序好了，按顺序二叉树输出</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">        heapSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    堆排序方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;堆排序:&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        将顺序二叉树调整为堆结构</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            adjustHeap(arr, i, arr.length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">            arr[i] = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">            adjustHeap(arr, <span class="number">0</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    将数组调整为大顶堆结构</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr    待排序的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i      非叶子节点在数组中的索引下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length 待排序的数组长度，因为已排好序的元素不进行排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line"><span class="comment">//        临时变量，存储当前 i 值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line"><span class="comment">//        调整堆</span></span><br><span class="line"><span class="comment">//        k 指向 i 的左子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span> * i + <span class="number">1</span>; k &lt; length; k = k * <span class="number">2</span> + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//            判断左子节点和右子节点的大小</span></span><br><span class="line">            <span class="keyword">if</span> (arr[k] &lt; arr[k + <span class="number">1</span>] &amp;&amp; k + <span class="number">1</span> &lt; length) &#123;</span><br><span class="line"><span class="comment">//                k  指向右节点</span></span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[k] &gt; temp) &#123;</span><br><span class="line"><span class="comment">//                交换值，使大值为父节点，满足大顶堆条件</span></span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line"><span class="comment">//                i 指向 k ，此时，已经调整好 i 为父节点的堆结构</span></span><br><span class="line">                i = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        更新小值</span></span><br><span class="line">        arr[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo注册中心</title>
      <link href="/2022/10/18/Dubbo/"/>
      <url>/2022/10/18/Dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h4><p>​    分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</p><h4 id="架构演变"><a href="#架构演变" class="headerlink" title="架构演变"></a>架构演变</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018165231960.png"></p><ol><li><p>单一应用架构</p><blockquote><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p></blockquote><p>大致就是将所有的逻辑和业务写在同一个项目中 一般网站流量小 并且只需要一个应用 将所有代码部署在一起 可以减少开发、部署、运维的成本</p><p>缺点：</p><ul><li>性能扩展难</li><li>协同开发难</li><li>升级维护难</li></ul></li><li><p>垂直应用架构</p><blockquote><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的 Web框架(MVC) 是关键。</p></blockquote><p>就是将单体架构拆分为多个互不相干的应用 大大提升了效率 </p><p>缺点：</p><ul><li>公共模块无法重复利用，开发性浪费</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170002760.png" alt="image-20221018170002760"></p></li><li><p>分布式服务架构</p><blockquote><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的**分布式服务框架(RPC)**是关键。</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170549762.png" alt="image-20221018170549762"></p></li><li><p>流动式计算框架</p><blockquote><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心**(SOA)[ Service Oriented Architecture]**是关键。</p></blockquote></li></ol><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170643342.png" alt="image-20221018170643342"></p><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><blockquote><p>RPC【Remote Procedure Call】是指==远程过程调用==，是一种进程间通信方式，他是一种技术的思想，而不是规范。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。即程序员无论是调用本地的还是远程的函数，本质上编写的调用代码基本相同。</p></blockquote><p>两个核心模块：通讯，序列化</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170750291.png"></p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><blockquote><p>是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><p><a href="https://dubbo.apache.org/zh/">Apache Dubbo</a></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018170946124.png" alt="image-20221018170946124"></p></blockquote><ul><li>服务提供者provider：暴露服务的提供方，服务提供者在启动时，向注册中心提供自己的服务</li><li>服务消费者consumer：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>注册中心registry：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li><li>监控中心monitor：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li></ul><h4 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h4><p>​    参考之前的文章，配个单机版就可以</p><h4 id="dubbo-admin"><a href="#dubbo-admin" class="headerlink" title="dubbo-admin"></a>dubbo-admin</h4><ol><li><p>在<code>dubbo-admin-develop</code>目录下cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018193507246.png"></p></li><li><p>在<code>dubbo-admin-develop\dubbo-admin-distribution\target</code>下运行jar包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ./dubbo-admin-0.1.jar</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018193634644.png" alt="image-20221018193634644"></p></li><li><p>在<code>dubbo-admin-develop\dubbo-admin-ui</code>目录下cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018193800389.png" alt="image-20221018193800389"></p></li><li><p>浏览器访问 ，==root/root==</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221018193925430.png"></p></li></ol><h4 id="dubbo-monitor"><a href="#dubbo-monitor" class="headerlink" title="dubbo-monitor"></a>dubbo-monitor</h4><ol><li><p>在<code>incubator-dubbo-ops-master</code>目录下cmd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221019144043179.png"></p></li><li><p>在<code>incubator-dubbo-ops-master\dubbo-monitor-simple\target</code>目录下解压<code>dubbo-monitor-simple-2.0.0-assembly.tar.gz</code></p></li><li><p>运行<code>dubbo-monitor-simple-2.0.0\assembly.bin</code>中的==start.bat==</p></li><li><p>浏览器访问==localhost:8080==</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221019144439402.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SolrCloud</title>
      <link href="/2022/10/07/SolrCloud/"/>
      <url>/2022/10/07/SolrCloud/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="SolrCloud"><a href="#SolrCloud" class="headerlink" title="SolrCloud"></a>SolrCloud</h1><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><blockquote><p>Linux：Centos7.9</p><p>Jdk：<a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/jdk-8u151-linux-x64.tar.gz">1.8.0_151</a></p><p>Solr：<a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/solr-4.10.3.tgz.tgz">4.10.3</a></p><p>Tomcat：<a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/apache-tomcat-7.0.47.tar.gz">7.0.47</a></p><p>Zookeeper：<a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/zookeeper-3.4.6.tar.gz">3.4.6</a></p></blockquote><h5 id="前面：hhh"><a href="#前面：hhh" class="headerlink" title="前面：hhh"></a>前面：hhh</h5><p>如果出现503，可以重启服务器，会有奇迹，不行的话，就回去检查，一般是代码写错了</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007165259861.png"></p><h5 id="准备zookeeper"><a href="#准备zookeeper" class="headerlink" title="准备zookeeper"></a>准备zookeeper</h5><ol><li><p>将<code>Solr</code> <code>Tomcat</code> <code>Zookeeper</code>上传至虚拟机，并解压 （<code>Jdk</code>自行安装）</p></li><li><p>将<code>Zookeeper</code>复制三份到 <code>/usr/local/solrcloud</code>，并命名为<code>zookeeper01</code> <code>zookeeper02</code> <code> zookeeper03</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建文件夹</span><br><span class="line">[root@Heroxin005 ~]# mkdir /usr/local/solrcloud</span><br><span class="line">#复制文件到该目录</span><br><span class="line">[root@Heroxin005 ~]# cp -r zookeeper-3.4.6 /usr/local/solrcloud/zookeeper01</span><br><span class="line">[root@Heroxin005 ~]# cp -r zookeeper-3.4.6 /usr/local/solrcloud/zookeeper02</span><br><span class="line">[root@Heroxin005 ~]# cp -r zookeeper-3.4.6 /usr/local/solrcloud/zookeeper03</span><br></pre></td></tr></table></figure></li><li><p>在每个<code>zookeeper</code> 目录下创建文件夹<code>data</code> ，并在<code>data</code>目录中创建<code>myid</code>文件，其内容为<code>zookeeper</code>编号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建文件夹</span><br><span class="line">[root@Heroxin005 zookeeper01]# mkdir data</span><br><span class="line">[root@Heroxin005 zookeeper01]# cd data/</span><br><span class="line">#创建文件</span><br><span class="line">[root@Heroxin005 data]# echo 1 &gt;&gt; myid</span><br><span class="line"></span><br><span class="line">#对zookeeper02和zookeeper03也进行相同操作</span><br></pre></td></tr></table></figure></li><li><p>修改每个<code>zookeeper</code>下的配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#复制一份 .cof</span><br><span class="line">[root@Heroxin005 zookeeper01]# cd conf/</span><br><span class="line">[root@Heroxin005 conf]# cp zoo_sample.cfg zoo.cfg</span><br><span class="line">#编辑配置文件</span><br><span class="line">[root@Heroxin005 conf]# vim zoo.cfg </span><br><span class="line"></span><br><span class="line">#对另外两个zookeeper也进行该操作，注意端口号</span><br></pre></td></tr></table></figure><p><code>zookeeper01</code></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007150313625.png"></p><p><code>zookeeper02</code></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007150648413.png"></p><p><code>zookeeper03</code></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007150749035.png"></p></li><li><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 solrcloud]# zookeeper01/bin/zkServer.sh start</span><br><span class="line">[root@Heroxin005 solrcloud]# zookeeper02/bin/zkServer.sh start</span><br><span class="line">[root@Heroxin005 solrcloud]# zookeeper03/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007151018193.png"></p></li><li><p>查看状态，可以看到一个<code>leader</code>两个<code>follower</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 solrcloud]# zookeeper01/bin/zkServer.sh status</span><br><span class="line">[root@Heroxin005 solrcloud]# zookeeper02/bin/zkServer.sh status</span><br><span class="line">[root@Heroxin005 solrcloud]# zookeeper03/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007151250508.png"></p></li></ol><h5 id="准备Tomcat"><a href="#准备Tomcat" class="headerlink" title="准备Tomcat"></a>准备Tomcat</h5><ol><li><p>将解压后的<code>Tomcat</code>复制四份到<code>/usr/local/tomcats</code></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007151744422.png"></p></li><li><p>修改端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 tomcats]# vim tomcat8080/conf/server.xml</span><br><span class="line"></span><br><span class="line">#修改这三处的端口号，每一个tomcat的端口号递增就可</span><br><span class="line">#如tomcat8080：端口分别为8005，8080，8009</span><br><span class="line">#  tomcat8081：端口分别为8006，8081，8009</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007152259799.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007152327545.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007152349936.png" alt="image-20221007152349936"></p></li><li><p>将 <code>solr</code>中的<code>solr-4.10.3.war</code> 复制到每一个tomcat 的<code>webapps</code>下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 solr-4.10.3]# mv dist/solr-4.10.3.war /usr/local/tomcats/tomcat8080/webapps/solr.war</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开放tomcat端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 ~]# firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">[root@Heroxin005 ~]# firewall-cmd --add-port=8081/tcp --permanent</span><br><span class="line">[root@Heroxin005 ~]# firewall-cmd --add-port=8082/tcp --permanent</span><br><span class="line">[root@Heroxin005 ~]# firewall-cmd --add-port=8083/tcp --permanent</span><br><span class="line">[root@Heroxin005 ~]# systemctl restart firewalld.service </span><br></pre></td></tr></table></figure></li><li><p>启动所有tomcat (用脚本启动吧，附件里有，记得加777权限)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 ~]# ./tomcat-startup.sh </span><br></pre></td></tr></table></figure><p>可以访问到每一个tomcat</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007153832387.png"></p></li><li><p>关闭tomcat后，删除之前每个tomcat中webapps下的 solr.war（此时可以在webapps目录下看到solr文件夹）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 ~]# ./tomcat-shutdown.sh </span><br><span class="line">[root@Heroxin005 ~]# rm -rf /usr/local/tomcats/tomcat8080/webapps/solr.war </span><br></pre></td></tr></table></figure></li><li><p>复制日志文件，到每个tomcat下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 solr-4.10.3]# cp example/lib/ext/* /usr/local/tomcats/tomcat8080/webapps/solr/WEB-INF/lib/</span><br></pre></td></tr></table></figure></li><li><p>创建solrhome，每一个solr都需要一个solrhome来存放文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 solr-4.10.3]# cp -r example/solr /usr/local/tomcats/solrhome1</span><br><span class="line">[root@Heroxin005 solr-4.10.3]# cp -r example/solr /usr/local/tomcats/solrhome2</span><br><span class="line">[root@Heroxin005 solr-4.10.3]# cp -r example/solr /usr/local/tomcats/solrhome3</span><br><span class="line">[root@Heroxin005 solr-4.10.3]# cp -r example/solr /usr/local/tomcats/solrhome4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007154826043.png"></p></li><li><p>为每个solr指定它的solrhome</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 tomcats]# vim tomcat8080/webapps/solr/WEB-INF/web.xml </span><br><span class="line">#按下图，在配置文件中修改就好</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007154953067.png"></p></li><li><p>启动tomcat，访问solr</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007155132412.png"></p></li></ol><h5 id="搭建solr集群"><a href="#搭建solr集群" class="headerlink" title="搭建solr集群"></a>搭建solr集群</h5><ol><li><p>进入<code>solr-4.10.3/example/scripts/cloud-scripts</code>,上传solrhome配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 cloud-scripts]# ./zkcli.sh -zkhost 192.168.196.105:2181,192.168.196.105:2182,192.168.196.105:2183 -cmd upconfig -confdir /usr/local/tomcats/solrhome1/collection1/conf -confname myconf</span><br></pre></td></tr></table></figure></li><li><p>进入<code>/usr/local/tomcats</code>，修改每个solrhome的solr.xml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin005 tomcats]# vim solrhome1/solr.xml </span><br><span class="line"></span><br><span class="line">#为每个solr指定一个实例</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007170302812.png"></p></li><li><p>为每个tomcat添加指定配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入目录</span><br><span class="line">[root@Heroxin005 ~]# cd /usr/local/tomcats</span><br><span class="line">#修改文件</span><br><span class="line">[root@Heroxin005 tomcats]# vim tomcat8080/bin/catalina.sh</span><br><span class="line">[root@Heroxin005 tomcats]# vim tomcat8081/bin/catalina.sh</span><br><span class="line">[root@Heroxin005 tomcats]# vim tomcat8082/bin/catalina.sh</span><br><span class="line">[root@Heroxin005 tomcats]# vim tomcat8083/bin/catalina.sh</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JAVA_OPTS=&quot;-DzkHost=192.168.196.105:2181,192.168.196.105:2182,192.168.196.105:2183&quot;</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007164232507.png"></p></li><li><p>访问任一solr，成功！</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007170528295.png"></p></li><li><p>创建一个两片的collection，每片是一主一备</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#浏览器中输入</span><br><span class="line">http://192.168.196.105:8080/solr/admin/collections?action=CREATE&amp;name=collection2&amp;numShards=2&amp;replicationFactor=2</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007170842671.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007170948548.png"></p></li><li><p>删除collection1</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.196.105:8080/solr/admin/collections?action=DELETE&amp;name=collection1</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221007171230288.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Solr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淘淘商城问题汇总</title>
      <link href="/2022/10/01/%E6%B7%98%E6%B7%98%E5%95%86%E5%9F%8E%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
      <url>/2022/10/01/%E6%B7%98%E6%B7%98%E5%95%86%E5%9F%8E%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><blockquote><p>淘淘商城虽然是2015年的项目，但总有值得学习的地方</p><p>由于年代的’久远’，项目中出现最多的问题就是依赖与插件的版本太老，与今天的浏览器，服务器啥的兼容不好</p><p>亲测使用 QQ浏览器 跑这个项目还是可以的(谷歌浏览器或和它内核相同的浏览器还是别用了)</p><p>PS：我平时用 edge，QQ浏览器只是跑项目用，听说 360浏览器也可以</p><p>如果效果和你预期的不一样，可以先重启服务或<u><strong>清除浏览器缓存</strong></u></p><p>本文是我遇到的一些错误，找错误是很烦的，尤其是没有报错的错误，希望这可以帮到你</p></blockquote><p>本文记录了些有趣的错误，一些由于疏忽或是易于解决的小错误就没有记录了</p><p>敲代码哪有不出bug的，只能在实践中凭借经验规避错误罢了。</p><h3 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h3><ol><li><p>配置Vsftpd失败，测试类没有报错，但文件没有上传到服务器(视频中的测试类有问题)</p><p>解决方法：<a href="https://heroxin.xyz/archives/24/">Vsftpd - Heroxin</a></p></li><li><p>使用视频提供的<code>FtpUtil.java</code>不能正常上传</p><p>解决方法：加一行</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915203304940.png"></p></li><li><p>无法正常显示添加图片按钮</p><p>flash问题，而且 Kindeditor 有很多兼容问题，也多年不更新了</p><p>解决方法：下载 QQ浏览器，安装 Flashcenter</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915203657261.png" alt="image-20220915203657261"></p></li><li><p>批量上传，图片上传成功，但显示上传失败(单图上传失败，报错：undefined，看第六天)</p><p>解决方法：<a href="https://blog.csdn.net/xk_dream/article/details/79387042">Kindeditor上传图片成功，但显示上传失败</a></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915203944672.png"></p></li></ol><h3 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h3><ol><li><p>ajax访问本工程json数据，修改好后，左边商品分类没有显示具体信息，应该是浏览器缓存问题</p><p>解决方法：重启项目，清除浏览器缓存</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915204103321.png"></p></li></ol><h3 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h3><ol><li><p>删除分类内容时，给定的 parentId 为null(咱也不太懂，)</p><p>解决方法：先根据 id 查询出它的 parentId，在判断 </p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915182957090.png" alt="image-20220915182957090"></p></li><li><p>kindeditor 单图上传时，提示错误：undefined，根据源码，错误提示必须是整型，不能是字符型</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915201800002.png" alt="image-20220915201800002"></p><p>解决方法：修改之前的图片上传服务中的JSON配置</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220915204404961.png"></p></li><li><p>实现内容管理–编辑，不太懂他这rest要表达什么意思，我改了</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220916152724403.png" alt="image-20220916152724403"></p><p>来着几后的我：</p><p>​    这个 rest 应该是把数据存到 redis 中了，每一次修改数据，得改数据库和 redis 数据。</p><p>​    但 url 还是用 /content/edit  ,别问，问就是图方便</p></li><li><p>实现内容管理–删除，他把 id 封装成一个对象，而我是用 Long 接收的就错了</p><p>解决方法：删除封装的对象，只传id就可以</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220916160442370.png" alt="image-20220916160442370"></p></li></ol><h3 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h3><ol><li><p>创建redis集群，我用之前的redis.7.0.0版本，所以视频中教程不适用</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220917105858476.png" alt="image-20220917105858476"></p><p>  解决方法：跟着视频用他的redis，要么自己百度搜索创建集群</p><p>​                    <a href="https://heroxin.xyz/archives/8/">Redis - Heroxin</a>这里面有集群创建的方法</p></li></ol><h3 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h3><ol><li><p>搜索商品后，爆500，空指针，但自己的代码和视频一样。经过长达两周的反复排查，是solr服务器配置错误了。具体是那儿错了不太懂，建议重新配置</p></li><li><p>商品详情页面没有出来，爆空指针，看了下jsp，发现商品 id没有传过来</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221012153322843.png" alt="image-20221012153322843"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221012153411180.png" alt="image-20221012153411180"></p><p>他的这种写法我深表怀疑，之前也有这种传不过来的情况我改为下图后好使了</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221012153538129.png" alt="image-20221012153538129"></p><p>而这次的错误我把项目搁置一段时间后再打开，他就好了，真神奇</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 疑难杂症 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wrong </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vsftpd</title>
      <link href="/2022/09/11/Vsftpd/"/>
      <url>/2022/09/11/Vsftpd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Vsftpd"><a href="#Vsftpd" class="headerlink" title="Vsftpd"></a>Vsftpd</h1><h3 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h3><ol><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin003 ~]# yum -y install vsftpd</span><br></pre></td></tr></table></figure></li><li><p>创建用户(默认不允许root用户访问，如果你有其他非root用户，可以不创建)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 添加用户</span><br><span class="line">[root@Heroxin003 ~]# useradd Heroxin</span><br><span class="line"># 添加密码</span><br><span class="line">[root@Heroxin003 ~]# passwd Heroxin</span><br></pre></td></tr></table></figure></li><li><p>开放 21 端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin003 ~]# firewall-cmd --add-port=21/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>修改 selinux</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin003 ~]# setsebool -P allow_ftpd_full_access on</span><br><span class="line"># Centos6 为 ftp_home_dir 而 Centos7 为 tftp_home_dir , 注意区别</span><br><span class="line">[root@Heroxin003 ~]# setsebool -P tftp_home_dir on</span><br></pre></td></tr></table></figure><p>修改后效果如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看命令</span><br><span class="line">[root@Heroxin003 ~]# getsebool -a | grep ftp</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911122745487.png"></p></li><li><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vsftpd 配置文件目录 /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure><ul><li><p>关闭匿名访问</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911123044850.png"></p></li><li><p>开启被动模式，在配置文件的末尾添加端口范围</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911123152891.png"></p></li></ul></li><li><p>开放 30000~30999 端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin003 ~]# firewall-cmd --add-port=30000-30999/tcp --permanent</span><br><span class="line"># 重启防火墙</span><br><span class="line">[root@Heroxin003 ~]# systemctl restart firewalld</span><br></pre></td></tr></table></figure></li><li><p>启动 vsftpd</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin003 ~]# systemctl start vsftpd</span><br></pre></td></tr></table></figure></li><li><p>设置开机自启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin003 ~]# systemctl enable vsftpd</span><br></pre></td></tr></table></figure></li></ol><h3 id="Java操纵Ftp"><a href="#Java操纵Ftp" class="headerlink" title="Java操纵Ftp"></a>Java操纵Ftp</h3><ol><li><p>导入 <code>commons-net</code>,建议版本为 <code>3.8.0</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;commons-net&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-net&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.8.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>Java代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">FtpTest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hostname</span> <span class="operator">=</span> <span class="string">&quot;192.168.196.103&quot;</span>;  <span class="comment">// 服务器 IP</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">21</span>;   <span class="comment">// 端口号</span></span><br><span class="line">    <span class="type">FTPClient</span> <span class="variable">ftpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FTPClient</span>();</span><br><span class="line">    ftpClient.setControlEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">   </span><br><span class="line">    System.out.println(<span class="string">&quot;connecting...ftp服务器:&quot;</span> + hostname + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">   </span><br><span class="line">       ftpClient.connect(hostname, port);</span><br><span class="line">       <span class="comment">// 连接ftp服务器</span></span><br><span class="line">       ftpClient.login(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;password&quot;</span>); <span class="comment">// 登录ftp服务器 用户名和密码</span></span><br><span class="line">       ftpClient.enterLocalPassiveMode();</span><br><span class="line">   </span><br><span class="line">       <span class="type">int</span> <span class="variable">replyCode</span> <span class="operator">=</span> ftpClient.getReplyCode(); <span class="comment">// 是否成功登录服务器</span></span><br><span class="line">       <span class="keyword">if</span> (!FTPReply.isPositiveCompletion(replyCode)) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;connect failed...ftp服务器:&quot;</span> + hostname + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">       &#125;</span><br><span class="line">       ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);</span><br><span class="line">        <span class="comment">// 选择你要上传到的文件夹(文件夹得存在)，建议在所登录用户目录即可</span></span><br><span class="line">       <span class="type">boolean</span> <span class="variable">boo</span> <span class="operator">=</span> ftpClient.changeWorkingDirectory(<span class="string">&quot;/home/Heroxin/www/&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (boo) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;进入文件夹成功&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">// 读取本地文件</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D://aniya.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">// 上传到服务器后文件的名字</span></span><br><span class="line">       System.out.println(ftpClient.storeFile(<span class="string">&quot;1.jpg&quot;</span>, inputStream));</span><br><span class="line">       inputStream.close();</span><br><span class="line">       ftpClient.logout();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">       e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>打开服务器目录，可以看到上传成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911131234789.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911131320194.png"></p></li><li><p>注意</p><ul><li><p>此错误代表用户对文件夹没有操作权限</p><ul><li><p>解决方法：更改文件夹所属用户与登录用户相同</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911130408293.png"></p></li></ul></li><li><p>此错误代表指定文件夹不存在</p><ul><li><p>解决方法：创建文件夹</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220911131059655.png" alt="image-20220911131059655"></p></li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx</title>
      <link href="/2022/09/05/Nginx/"/>
      <url>/2022/09/05/Nginx/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><blockquote><p>提到Nginx，首先想到的就是<strong>负载均衡</strong>和<strong>反向代理</strong>啥的。</p><p>也不明白这是啥意思，今天来学学</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​        Nginx 是高性能的 HTTP 和反向代理的服务器，处理高并发能力是十分强大的，同时也提供了IMAP/POP3/SMTP服务， 能经受高负载的考验。</p><ol><li><h6 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h6><ul><li><p>所谓正向代理就是内网服务器主动要去请求外网的地址或服务，所进行的一种行为。</p></li><li><p>例如在大陆访问不到谷歌，但可以通过设置代理服务器来访问，这个过程就叫正向代理</p></li><li><p>内网服务—访问—&gt;外网</p></li><li><p>Nginx的正向代理，只能代理Http、Tcp等，不能代理Https请求。</p></li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905094703570.png"></p></li><li><h6 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h6><ul><li><p>所谓反向代理就是外网要访问内网服务而进行的一种行为。</p></li><li><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只<br>需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返<br>回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器<br>地址，隐藏了真实服务器 IP 地址(8001,8002)。</p></li><li><p> 外网—-请求—&gt;内网服务</p></li></ul><p>  <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905095140747.png"></p></li><li><h6 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h6><ul><li><p>增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的<br>情况改为将请求分发到多个服务器上，将负载分发到不同的服务器。</p></li><li><p>分摊压力,轮询算法</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905095324756.png"></p></li></ul></li><li><h6 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h6><ul><li><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速<br>度。降低原来单个服务器的压力。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905095447122.png" alt="1"></p></li></ul></li></ol><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><blockquote><p><a href="https://nginx.org/en/download.html">Nginx1.12.2</a> </p></blockquote><ol><li><p><code>gcc-c++</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin001 ~]# yum -y install gcc-c++</span><br></pre></td></tr></table></figure></li><li><p><code>pcre</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin001 ~]# yum -y install pcre pcre-devel</span><br></pre></td></tr></table></figure></li><li><p><code>zlib</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin001 ~]# yum -y install zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p><code>openssl</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@Heroxin001 ~]# yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure></li><li><p>Nginx解压到 <code>Software</code>后，进入<code>nginx-1.12.2</code>目录进行检测，编译，安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 nginx-1.12.2]# ./configure</span><br><span class="line">[root@heroxin001 nginx-1.12.2]# make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>安装成功后会在 <code>/usr/local/nginx/sbin/</code>下生成<code>nginx</code>的启动脚本</p></li><li><p>进入 <code>sbin</code>目录后执行脚本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 sbin]# ./nginx</span><br></pre></td></tr></table></figure></li><li><p>查看进程，<code>nginx</code>正在运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 sbin]# ps -ef |grep nginx</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905202809895.png"></p></li><li><p>防火墙添加<code>nginx</code>端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line">[root@heroxin001 ~]# firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，在地址栏输入你服务器的 IP 地址，成功访问。(如果失败，请检查防火墙或者端口)</p></li></ol><p>   <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220905203203568.png"></p><h3 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h3><ol><li><p>将<code>nginx</code>添加到环境变量中，这样以后启动<code>nginx</code>就不必去<code>sbin</code>目录了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 源文件目录，环境变量目录</span><br><span class="line">[root@heroxin001 ~]# ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/</span><br></pre></td></tr></table></figure></li><li><p>查看版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# nginx -v</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# nginx</span><br></pre></td></tr></table></figure></li><li><p>关闭</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# nginx -s stop</span><br></pre></td></tr></table></figure></li><li><p>重载</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# nginx -s reload</span><br></pre></td></tr></table></figure></li></ol><h3 id="配置实例–反向代理01"><a href="#配置实例–反向代理01" class="headerlink" title="配置实例–反向代理01"></a>配置实例–反向代理01</h3><ol><li><p>安装并启动tomcat</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# cd /usr/Software/apache-tomcat-8.5.82/bin/</span><br><span class="line">[root@heroxin001 bin]# ./startup.sh </span><br></pre></td></tr></table></figure></li><li><p>防火墙开放8080端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 bin]# firewall-cmd --list-all</span><br><span class="line">[root@heroxin001 bin]# firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">[root@heroxin001 bin]# systemctl restart firewalld</span><br></pre></td></tr></table></figure></li><li><p>浏览器输入 IP:8080,成功访问Tomcat</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220906092255682.png"></p></li><li><p>在windows的host文件里配置域名映射的ip地址(C:\Windows\System32\drivers\etc\host)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907104219772.png"></p></li><li><p><code>nginx</code>中配置反向代理，在配置文件中做如下修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#目录</span><br><span class="line">/usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907103910353.png"></p></li><li><p>重载 <code>nginx</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# nginx -s reload</span><br></pre></td></tr></table></figure></li><li><p>在浏览器中输入之前定义的域名，成功访问到服务器的Tomcat，暴露的是Nginx服务器的IP，隐藏Tomcat的IP</p><p>(如果不成功，报 <code>HTTP ERROR 502</code>,建议多次重启电脑和服务器)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907105015261.png"></p></li></ol><h3 id="配置实例–反向代理02"><a href="#配置实例–反向代理02" class="headerlink" title="配置实例–反向代理02"></a>配置实例–反向代理02</h3><blockquote><p>实现效果：</p><p>​    使用 Nginx 反向代理，根据访问的路径跳转到不同端口的服务器当中</p><p>​    Nginx 监听端口为 9001</p><p>​    访问 <a href="http://192.168.196.101:9001/hero/">http://192.168.196.101:9001/hero/</a> 跳转到 127.0.0.1:8080</p><p>​    访问 <a href="http://192.168.196.101:9001/xin/">http://192.168.196.101:9001/xin/</a>    跳转到 127.0.0.1:8081</p></blockquote><ol><li><p>准备两个 Tomcat ，端口为 8080，8081 (配置文件目录：/conf/server.xml，记得防火墙开放端口)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907112334658.png"></p></li><li><p>创建访问文件，可以正常访问</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907114044167.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907114127632.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907150132547.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907150037381.png"></p></li><li><p>配置<code>nginx</code>配置文件，在原有 server 下方添加即可(顺便防火墙开放 9001 端口)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907115243747.png"></p></li><li><p>访问成功！！</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907120007997.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907120101185.png"></p></li></ol><h3 id="配置实例–负载均衡"><a href="#配置实例–负载均衡" class="headerlink" title="配置实例–负载均衡"></a>配置实例–负载均衡</h3><blockquote><p>轮询算法：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</p><p>权重：weight代表权重，默认为 1, 权重越高被分配的客户端越多</p><p>ip_hash：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题</p><p>fair：按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p></blockquote><ol><li><p>准备两个Tomcat，都有<code>/webapp/heroxin/a.html</code>（电脑较渣，就用同一个服务器，开两个Tomcat来模拟）</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907151107707.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907151154459.png"></p></li><li><p><code>nginx</code>配置文件中做如下修改</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907152947509.png"></p></li><li><p>访问成功! 刷新浏览器，会显示不同的内容，说明负载均衡起作用，每个服务器都轮流访问一次</p><p>(如果没有变化，可以先清除浏览器缓存试试)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907152409251.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907152440914.png" alt="image-20220907152440914"></p></li></ol><h3 id="配置实例–动静分离"><a href="#配置实例–动静分离" class="headerlink" title="配置实例–动静分离"></a>配置实例–动静分离</h3><ol><li><p>在根目录创建访问资源</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907164741712.png"></p></li><li><p>修改<code>nginx</code>配置文件，添加如下内容即可</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907160336452.png"></p></li><li><p>访问成功！</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907165400479.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220907165452604.png"></p></li></ol><h3 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h3><p>​    这次学习包括Nginx基本概念和配置实例，总不算是一头雾水了。</p><p>​    还不够。</p><p>​    Nginx更高端的操作或者运行原理以后更新吧。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper</title>
      <link href="/2022/06/10/Zookeeper/"/>
      <url>/2022/06/10/Zookeeper/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​    ZooKeeper是一个分布式的，开放源码的<strong>分布式应用程序</strong>协调服务，是Google的Chubby一个开源的实现，是    <code>Hadoop</code>和<code>Hbase</code>的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p><p>​    ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p><p>​    ZooKeeper包含一个简单的原语集，提供Java和C的接口。</p><p>​    ZooKeeper代码版本中，提供了<strong>分布式独享锁、选举、队列</strong>的接口</p><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>​    从设计模式角度来理解：是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生变化，Zookeeper就将负责通知已经在Zookeeper上注册过的那些观察者做出相应的反应。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610160548905.png"></p><ol><li>zookeeper：一个领导者，多个跟随者组成的集群；(一主多从 ？)</li><li>集群中只要有半数以上节点存活，zookeeper集群就能够正常服务，所以zookeeper适合安装奇数台服务器</li><li>全局数据一致性：每个 Server 保存一份相同的数据副本，Client 无论连接到哪个 Server ，数据都是一致的</li><li>更新请求顺序执行：来自同一个Client的更新请求按其发送顺序依次执行</li><li>数据更新原子性：一次数据要么成功，要么失败</li><li>实时性：在一定时间范围内，Client能够读取到最新数据</li></ol><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h6 id="统一命名服务"><a href="#统一命名服务" class="headerlink" title="统一命名服务"></a>统一命名服务</h6><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610161040584.png"></p><h6 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h6><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610161131997.png"></p><h6 id="统一集群管理"><a href="#统一集群管理" class="headerlink" title="统一集群管理"></a>统一集群管理</h6><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610161309289.png"></p><h6 id="服务器动态上下线"><a href="#服务器动态上下线" class="headerlink" title="服务器动态上下线"></a>服务器动态上下线</h6><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610161328882.png"></p><h6 id="软负载均衡"><a href="#软负载均衡" class="headerlink" title="软负载均衡"></a>软负载均衡</h6><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610161328882.png"></p><h4 id="安装单机版"><a href="#安装单机版" class="headerlink" title="安装单机版"></a>安装单机版</h4><ol><li><p>安装 JDK ，推荐 1.8</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# java -version</span><br><span class="line">openjdk version &quot;1.8.0_262&quot;</span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_262-b10)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.262-b10, mixed mode)</span><br></pre></td></tr></table></figure></li><li><p>将 <code>apache-zookeeper-3.5.7tar.gz</code>上传至<code>software</code>后进行解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf /usr/software/apache-zookeeper-3.5.7.tar.gz -C /usr/local/zookeeper-3.5.7</span><br></pre></td></tr></table></figure></li><li><p>修改缓存路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 放置缓存文件的文件夹</span><br><span class="line">mkdir /usr/local/zookeeper-3.5.7/data</span><br><span class="line"># 进入配置文件目录</span><br><span class="line">cd /usr/local/zookeeper-3.5.7/conf/</span><br><span class="line"># 修改zoo_sample.cfg 中的dataDir</span><br><span class="line">dataDir=/usr/software/zookeeper-3.5.7/data</span><br></pre></td></tr></table></figure></li><li><p>更改配置文件名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#进入配置文件目录后</span><br><span class="line">mv zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></li></ol><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ol><li><p>启动服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# /usr/local/zookeeper-3.5.7/bin/zkServer.sh start</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.5.7-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure></li><li><p>查看状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# /usr/local/zookeeper-3.5.7/bin/zkServer.sh status</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.5.7-bin/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost.</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure></li><li><p>启动客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# /usr/local/zookeeper-3.5.7/bin/zkCli.sh </span><br><span class="line">/usr/bin/java</span><br><span class="line">Connecting to localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>退出客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 2] quit</span><br></pre></td></tr></table></figure></li><li><p>关闭服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@heroxin001 ~]# /usr/local/zookeeper-3.5.7/bin/zkServer.sh stop</span><br><span class="line">/usr/bin/java</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /opt/module/apache-zookeeper-3.5.7-bin/bin/../conf/zoo.cfg</span><br><span class="line">Stopping zookeeper ... STOPPED</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016160316598.png"></p><ol><li><p>tickTime=2000：通信心跳时间，Zookeeper服务器与客户端心跳时间，单位毫秒。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016161012316.png"></p></li><li><p>initLimit=10：LF初始通信时限</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016160947816.png"></p><p>集群中的Follower跟随者与Leader领导者服务器之间初始连接时能容忍的最大心跳数（tickTime的数量）。就是集群刚启动，第一次初始化连接时，如果超过 initLimit * tickTime，则判断死亡</p></li><li><p>syncLimit=5：LF同步通信时限</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016160931739.png"></p><p>Leader和Follower之间通信时间(响应时间)如果超过==syncLimit * tickTime==，Leader认为Follwer死</p></li><li><p>dataDir：缓存文件路径</p><p>默认的tmp目录，容易被Linux系统定期删除，所以一般不用默认的tmp目录</p></li><li><p>clientPort=2181：端口号</p></li><li><p>server.A=B:C:D</p><p>A：表示这是第几号服务器(/data/myid)</p><p>B：服务器地址</p><p>C：是此服务器Follower与集群中Leader服务器交换信息的端口号</p><p>D：万一Leader挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时期服务器相互通信的端口</p></li></ol><h2 id="集群操作"><a href="#集群操作" class="headerlink" title="集群操作"></a>集群操作</h2><h4 id="选举机制"><a href="#选举机制" class="headerlink" title="选举机制"></a>选举机制</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016163354196.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016163425427.png"></p><h4 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h4><ol><li><p>将解压后的 <code>apache-zookeeper-3.5.7-bin</code> 复制三份到 <code>/usr/local/zookeeper</code>下</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016145826789.png"></p></li><li><p>对每一个zookeeper文件都创建 data 目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir zookeeper01/data</span><br></pre></td></tr></table></figure></li><li><p>对每一个zookeeper文件都创建 myid文件，内容分别为 1，2，3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo 1 &gt;&gt; zookeeper01/data/myid</span><br></pre></td></tr></table></figure></li><li><p>修改每一个zookeeper的配置文件(缓存路径，端口号，集群配置)</p><p>==zookeeper01==</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016150502691.png"></p><p>==zookeeper02==</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016150622646.png"></p><p>==zookeeper03==</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016150659069.png"></p></li><li><p>依次启动zookeeper，查看其状态，一个leader，两个follower</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20221016155010187.png"></p></li></ol><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><blockquote><p>Zookeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树</p><p>每个节点称作一个ZNode，每个ZNode默认能够存储 <code>1MB</code>的数据</p><p>每个节点上都会保存自己的数据和节点信息</p><p>每个ZNode都可以通过其他路径唯一标识</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220610160909204.png"></p><p>节点可以分为四大类</p><ul><li>PERSISTENT 持久化节点 </li><li>EPHEMERAL 临时节点 -e  ==只在当前的会话中有效，当客户端断开后丢失==</li><li>PERSISTENT_SWQUENTIAL 持久化顺序节点 -s</li><li>EPHEMERAL_SEQUENTIAL 临时顺序节点 -es ==节点后会有 _1==</li></ul><h4 id="客户端命令"><a href="#客户端命令" class="headerlink" title="客户端命令"></a>客户端命令</h4><ol><li><p>连接客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure></li><li><p>查看节点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /</span><br><span class="line">#查看详细信息</span><br><span class="line">ls -s /</span><br></pre></td></tr></table></figure></li><li><p>新建节点</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">create /newNode heroxin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建空节点</span></span><br><span class="line">create /newNode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建临时节点</span></span><br><span class="line">create -e /newNode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建顺序节点</span></span><br><span class="line">create -s /newNode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建临时顺序节点</span></span><br><span class="line">create -es /newNode</span><br></pre></td></tr></table></figure></li><li><p>获取节点信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get /newNode</span><br></pre></td></tr></table></figure></li><li><p>设置节点信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set /newNode hero</span><br></pre></td></tr></table></figure></li><li><p>删除节点</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete /newNode</span><br><span class="line">#当该节点下还有其他节点时</span><br><span class="line">deleteall /newNode</span><br></pre></td></tr></table></figure></li></ol><h2 id="JavaAPI"><a href="#JavaAPI" class="headerlink" title="JavaAPI"></a>JavaAPI</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.curator.RetryPolicy;</span><br><span class="line">import org.apache.curator.framework.CuratorFramework;</span><br><span class="line">import org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line">import org.apache.curator.framework.api.BackgroundCallback;</span><br><span class="line">import org.apache.curator.framework.api.CuratorEvent;</span><br><span class="line">import org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line">import org.apache.zookeeper.CreateMode;</span><br><span class="line">import org.apache.zookeeper.data.Stat;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CuratorTest &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private CuratorFramework client;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 建立连接</span><br><span class="line">     */</span><br><span class="line">    @Before</span><br><span class="line">    public void testConnect() &#123;</span><br><span class="line"></span><br><span class="line">        //重试策略</span><br><span class="line">        RetryPolicy retryPolicy = new ExponentialBackoffRetry(3000, 10);</span><br><span class="line">        //2.第二种方式</span><br><span class="line">        //CuratorFrameworkFactory.builder();</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(&quot;192.168.196.101:2181,192.168.196.101:2182,192.168.196.101:2183&quot;)</span><br><span class="line">                .sessionTimeoutMs(60 * 1000)</span><br><span class="line">                .connectionTimeoutMs(15 * 1000)</span><br><span class="line">                .retryPolicy(retryPolicy)</span><br><span class="line">//                .namespace(&quot;itheima&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        //开启连接</span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreate() throws Exception &#123;</span><br><span class="line">        //1. 基本创建</span><br><span class="line">        //如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span><br><span class="line">        String path = client.create().forPath(&quot;/app1&quot;);</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreate2() throws Exception &#123;</span><br><span class="line">        //2. 创建节点 带有数据</span><br><span class="line">        //如果创建节点，没有指定数据，则默认将当前客户端的ip作为数据存储</span><br><span class="line">        String path = client.create().forPath(&quot;/app2&quot;, &quot;hehe&quot;.getBytes());</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreate3() throws Exception &#123;</span><br><span class="line">        //3. 设置节点的类型</span><br><span class="line">        //默认类型：持久化</span><br><span class="line">        String path = client.create().withMode(CreateMode.EPHEMERAL).forPath(&quot;/app3&quot;);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testCreate4() throws Exception &#123;</span><br><span class="line">        //4. 创建多级节点  /app1/p1</span><br><span class="line">        //creatingParentsIfNeeded():如果父节点不存在，则创建父节点</span><br><span class="line">        String path = client.create().creatingParentsIfNeeded().forPath(&quot;/app4/p1&quot;);</span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 查询节点：</span><br><span class="line">     * 1. 查询数据：get: getData().forPath()</span><br><span class="line">     * 2. 查询子节点： ls: getChildren().forPath()</span><br><span class="line">     * 3. 查询节点状态信息：ls -s:getData().storingStatIn(状态对象).forPath()</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGet1() throws Exception &#123;</span><br><span class="line">        //1. 查询数据：get</span><br><span class="line">        byte[] data = client.getData().forPath(&quot;/app1&quot;);</span><br><span class="line">        System.out.println(new String(data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGet2() throws Exception &#123;</span><br><span class="line">        // 2. 查询子节点： ls</span><br><span class="line">        List&lt;String&gt; path = client.getChildren().forPath(&quot;/&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testGet3() throws Exception &#123;</span><br><span class="line">        Stat status = new Stat();</span><br><span class="line">        System.out.println(status);</span><br><span class="line">        //3. 查询节点状态信息：ls -s</span><br><span class="line">        client.getData().storingStatIn(status).forPath(&quot;/app1&quot;);</span><br><span class="line">        System.out.println(status);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testSet() throws Exception &#123;</span><br><span class="line">        client.setData().forPath(&quot;/app1&quot;, &quot;itcast&quot;.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testSetForVersion() throws Exception &#123;</span><br><span class="line">        Stat status = new Stat();</span><br><span class="line">        //3. 查询节点状态信息：ls -s</span><br><span class="line">        client.getData().storingStatIn(status).forPath(&quot;/app1&quot;);</span><br><span class="line">        int version = status.getVersion();//查询出来的 3</span><br><span class="line">        System.out.println(version);</span><br><span class="line">        client.setData().withVersion(version).forPath(&quot;/app1&quot;, &quot;hehe&quot;.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 删除节点： delete deleteall</span><br><span class="line">     * 1. 删除单个节点:delete().forPath(&quot;/app1&quot;);</span><br><span class="line">     * 2. 删除带有子节点的节点:delete().deletingChildrenIfNeeded().forPath(&quot;/app1&quot;);</span><br><span class="line">     * 3. 必须成功的删除:为了防止网络抖动。本质就是重试。  client.delete().guaranteed().forPath(&quot;/app2&quot;);</span><br><span class="line">     * 4. 回调：inBackground</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete() throws Exception &#123;</span><br><span class="line">        // 1. 删除单个节点</span><br><span class="line">        client.delete().forPath(&quot;/app1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete2() throws Exception &#123;</span><br><span class="line">        //2. 删除带有子节点的节点</span><br><span class="line">        client.delete().deletingChildrenIfNeeded().forPath(&quot;/app4&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete3() throws Exception &#123;</span><br><span class="line">        //3. 必须成功的删除</span><br><span class="line">        client.delete().guaranteed().forPath(&quot;/app2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Test</span><br><span class="line">    public void testDelete4() throws Exception &#123;</span><br><span class="line">        //4. 回调</span><br><span class="line">        client.delete().guaranteed().inBackground(new BackgroundCallback()&#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void processResult(CuratorFramework client, CuratorEvent event) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;我被删除了~&quot;);</span><br><span class="line">                System.out.println(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).forPath(&quot;/app1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @After</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        if (client != null) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CuratorAPI"><a href="#CuratorAPI" class="headerlink" title="CuratorAPI"></a>CuratorAPI</h2><h4 id="Watch事件监听"><a href="#Watch事件监听" class="headerlink" title="Watch事件监听"></a>Watch事件监听</h4><blockquote><p>Zookeeper 允许客户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，Zookeeper服务器会将时间通知到感兴趣的客户端上去，该机制时Zookeeper实现分布式协调服务的重要特征</p><p>Curator引入了Cache来实现对Zookeeper服务端事件的监听</p><p>Zookeeper提供了三种Watcher：</p><ul><li>NodeCache：只是监听某个特定的节点</li><li>PathChildrenCache：监听一个ZNode的子节点</li><li>TreeCache：可以监控整个树上的所有节点，类似前两种方式的组合</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.apache.curator.RetryPolicy;</span><br><span class="line">import org.apache.curator.framework.CuratorFramework;</span><br><span class="line">import org.apache.curator.framework.CuratorFrameworkFactory;</span><br><span class="line">import org.apache.curator.framework.api.BackgroundCallback;</span><br><span class="line">import org.apache.curator.framework.api.CuratorEvent;</span><br><span class="line">import org.apache.curator.framework.recipes.cache.*;</span><br><span class="line">import org.apache.curator.retry.ExponentialBackoffRetry;</span><br><span class="line">import org.apache.zookeeper.CreateMode;</span><br><span class="line">import org.apache.zookeeper.data.Stat;</span><br><span class="line">import org.junit.After;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class CuratorWatcherTest &#123;</span><br><span class="line"></span><br><span class="line">    private CuratorFramework client;</span><br><span class="line">    @Before</span><br><span class="line">    public void testConnect() &#123;</span><br><span class="line">        //重试策略</span><br><span class="line">        RetryPolicy retryPolicy = new ExponentialBackoffRetry(3000, 10);</span><br><span class="line">        //2.第二种方式</span><br><span class="line">        //CuratorFrameworkFactory.builder();</span><br><span class="line">        client = CuratorFrameworkFactory.builder()</span><br><span class="line">                .connectString(&quot;192.168.149.135:2181&quot;)</span><br><span class="line">                .sessionTimeoutMs(60 * 1000)</span><br><span class="line">                .connectionTimeoutMs(15 * 1000)</span><br><span class="line">                .retryPolicy(retryPolicy)</span><br><span class="line">//                .namespace(&quot;itheima&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        //开启连接</span><br><span class="line">        client.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @After</span><br><span class="line">    public void close() &#123;</span><br><span class="line">        if (client != null) &#123;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 演示 NodeCache：给指定一个节点注册监听器</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testNodeCache() throws Exception &#123;</span><br><span class="line">        //1. 创建NodeCache对象</span><br><span class="line">        final NodeCache nodeCache = new NodeCache(client,&quot;/app1&quot;);</span><br><span class="line">        //2. 注册监听</span><br><span class="line">        nodeCache.getListenable().addListener(new NodeCacheListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void nodeChanged() throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;节点变化了~&quot;);</span><br><span class="line"></span><br><span class="line">                //获取修改节点后的数据</span><br><span class="line">                byte[] data = nodeCache.getCurrentData().getData();</span><br><span class="line">                System.out.println(new String(data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //3. 开启监听.如果设置为true，则开启监听是，加载缓冲数据</span><br><span class="line">        nodeCache.start(true);</span><br><span class="line">        while (true)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 演示 PathChildrenCache：监听某个节点的所有子节点们</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void testPathChildrenCache() throws Exception &#123;</span><br><span class="line">        //1.创建监听对象</span><br><span class="line">        PathChildrenCache pathChildrenCache = new PathChildrenCache(client,&quot;/app2&quot;,true);</span><br><span class="line"></span><br><span class="line">        //2. 绑定监听器</span><br><span class="line">        pathChildrenCache.getListenable().addListener(new PathChildrenCacheListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void childEvent(CuratorFramework client, PathChildrenCacheEvent event) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;子节点变化了~&quot;);</span><br><span class="line">                System.out.println(event);</span><br><span class="line">                //监听子节点的数据变更，并且拿到变更后的数据</span><br><span class="line">                //1.获取类型</span><br><span class="line">                PathChildrenCacheEvent.Type type = event.getType();</span><br><span class="line">                //2.判断类型是否是update</span><br><span class="line">                if(type.equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))&#123;</span><br><span class="line">                    System.out.println(&quot;数据变了！！！&quot;);</span><br><span class="line">                    byte[] data = event.getData().getData();</span><br><span class="line">                    System.out.println(new String(data));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        //3. 开启</span><br><span class="line">        pathChildrenCache.start();</span><br><span class="line"></span><br><span class="line">        while (true)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 演示 TreeCache：监听某个节点自己和所有子节点们</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void testTreeCache() throws Exception &#123;</span><br><span class="line">        //1. 创建监听器</span><br><span class="line">        TreeCache treeCache = new TreeCache(client,&quot;/app2&quot;);</span><br><span class="line"></span><br><span class="line">        //2. 注册监听</span><br><span class="line">        treeCache.getListenable().addListener(new TreeCacheListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void childEvent(CuratorFramework client, TreeCacheEvent event) throws Exception &#123;</span><br><span class="line">                System.out.println(&quot;节点变化了&quot;);</span><br><span class="line">                System.out.println(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //3. 开启</span><br><span class="line">        treeCache.start();</span><br><span class="line"></span><br><span class="line">        while (true)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 分布式 </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/06/07/Git/"/>
      <url>/2022/06/07/Git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git概述"><a href="#Git概述" class="headerlink" title="Git概述"></a>Git概述</h2><blockquote><p>Git是一个免费的、开源的 <u><strong>分布式版本控制</strong></u>系统 ，可以快速高效地处理从小型到大型的各种<br>项目 。<br>Git易于学习，占地面积小，性能 极快 。 它具有廉价的本地 库 ，方便的暂存区域和多个工作<br>流 分支 等 特性。 其性能优于 Subversion、 CVS、 Perforce和 ClearCase等 版本控制 工具。</p></blockquote><h4 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h4><p>​        版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。<br>​        版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</p><h4 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h4><ul><li><p><strong>集中式版本控制工具</strong></p><p><code>CVS</code>、<code>SVN(Subversion)</code>、<code>VSS</code>……</p><p>​        集中化的版本控制系统诸如 CVS、SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本,而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><p>​        多年以来，这已成为版本控制系统的标准做法。这种做法带来了许多好处，每个人都可以在一定程度上看到项目中的其他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集中化的版本控制系统，要远比在各个客户端上维护本地数据库来得轻松容易。</p><p>​        事分两面，有好有坏。这么做显而易见的缺点是中央服务器的单点故障。如果服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607092014057.png" alt="image-20220607092014057"></p></li><li><p><strong>分布式版本控制工具</strong></p><p><code>Git</code>、 <code>Mercurial</code>、 <code>Bazaar</code>、 <code>Darcs</code>……</p><p>​        像Git这种分布式版本控制工具 ，客户端提取的不是 最新版本的文件快照，而是把代码仓库完整地镜像下来 (本地库) 。这 样任何一处协同工作用的文件发生故障，事后都可以用其他客户端的本地仓库进行恢复。因为 每个客户端的每一次文件提取操作，实际上都是一次对整个文件仓库的完整备份 。</p><p>分布式的版本控制系统出现问题之后，解决了集中式版本控制系统的缺陷：</p><ol><li>服务器断网的情况下也可以进行开发，因为版本控制是在本地进行的</li><li>每个客户保存的也都是整个完整的项目，包含历史记录，更加安全</li></ol><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607092531828.png" alt="image-20220607092531828"></p></li></ul><h4 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h4><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607092645850.png" alt="工作机制"></p><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><table><thead><tr><th align="left">命令名称</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">git config –global user.name 用户名</td><td align="center">设置用户签名</td></tr><tr><td align="left">git config –global user.email 邮箱</td><td align="center">设置用户邮箱</td></tr><tr><td align="left">git init</td><td align="center">初始化本地库</td></tr><tr><td align="left">git status</td><td align="center">查看本地库状态</td></tr><tr><td align="left">git add 文件名</td><td align="center">添加到暂存区</td></tr><tr><td align="left">git commit -m “日志信息” 文件名</td><td align="center">提交到本地库</td></tr><tr><td align="left">git reflog / git log</td><td align="center">查看历史记录</td></tr><tr><td align="left">git reset –hard 版本号</td><td align="center">版本穿梭</td></tr></tbody></table><blockquote><ul><li>签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。 Git首次安装必须设置一下用户签名，否则无法提交代码。</li><li>Git版本切换实质是移动 hard 指针</li></ul></blockquote><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h4 id="分支概述"><a href="#分支概述" class="headerlink" title="分支概述"></a>分支概述</h4><blockquote><ul><li>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。对于初学者而言，分支可以简单理解为副本，一个分支就是一个单独的副本。（分支底层其实也是指针的引用）</li><li>同时并行推进多个功能开发，提高开发效率。各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</li></ul></blockquote><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><table><thead><tr><th>命令名称</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><ul><li>命令行后面的括号内表示当前分支</li><li>合并分支时，两个分支在同一个文件的同一个位置 有两套完全不同的修改。 Git无法替我们决定使用哪一个。必须 人为决定 新代码内容。</li><li>解决冲突以后，文件需要重新添加到暂存区再进行提交，提交时不能写文件名</li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h4 id="创建远程库"><a href="#创建远程库" class="headerlink" title="创建远程库"></a>创建远程库</h4><ol><li><p>打开个人仓库</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607155239415.png"></p></li><li><p>新建仓库</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607155849752.png"></p></li><li><p>复制远程链接</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607155938274.png"></p></li><li><p>在本地新建一个本地仓库，用来放以后推拉的代码</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607160109968.png"></p></li><li><p>右键 git bash hear</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607160143459.png"></p></li><li><p>初始化本地仓库</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607160232529.png"></p></li><li><p>建立远程链接，别名</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607160445967.png"></p></li><li><p>查看远程库</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607160415664.png"></p></li></ol><h4 id="代码推送Push"><a href="#代码推送Push" class="headerlink" title="代码推送Push"></a>代码推送Push</h4><p>​    <u>git push 别名 分支</u></p><ol><li><p>查看本地仓库状态</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607161836937.png"></p></li><li><p>将文件添加到暂存区</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607161924259.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 或者</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure></li><li><p>将文件提交到本地仓库</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607161758921.png"></p></li><li><p>查看本地仓库状态</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607162138456.png"></p></li><li><p>代码推送到远程仓库</p></li></ol><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607162505833.png"></p><h4 id="代码拉取Pull"><a href="#代码拉取Pull" class="headerlink" title="代码拉取Pull"></a>代码拉取Pull</h4><blockquote><p>当远程库中代码发生改变时，可以将变化的部分拉取过来</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607165101038.png"></p><h4 id="代码克隆Clone"><a href="#代码克隆Clone" class="headerlink" title="代码克隆Clone"></a>代码克隆Clone</h4><blockquote><p>本地没有远程仓库中的代码，就是下载别人的源代码</p></blockquote><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607164728907.png"></p><h4 id="跨团队工作"><a href="#跨团队工作" class="headerlink" title="跨团队工作"></a>跨团队工作</h4><blockquote><p>就是修改别人的代码，发送 pull request</p></blockquote><ol><li><p>打开别人的仓库，点击右上角fork</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607172021554.png"></p></li><li><p>修改</p></li><li><p>提交 pull request</p></li><li><p>主人 merge pull request</p></li></ol><h4 id="邀请队友"><a href="#邀请队友" class="headerlink" title="邀请队友"></a>邀请队友</h4><ol><li><p>在远程仓库中打开settings</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607170145476.png"></p></li><li><p>邀请</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607170251143.png" alt="image-20220607170251143"></p></li></ol><h2 id="IDEA集成Github"><a href="#IDEA集成Github" class="headerlink" title="IDEA集成Github"></a>IDEA集成Github</h2><h4 id="配置忽略文件"><a href="#配置忽略文件" class="headerlink" title="配置忽略文件"></a>配置忽略文件</h4><blockquote><p>项目中很多文件是不需要上传到远程仓库的</p></blockquote><ul><li><p>在C盘用户目录下创建 <code>git.ignore</code>文件</p></li><li><p>填写以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Compiled class file</span><br><span class="line">*.class</span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"># Mobile Tools for Java (</span><br><span class="line">.mtj.</span><br><span class="line"># Package Files</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.nar</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"># virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml</span><br><span class="line">hs_err_pid*</span><br><span class="line">.classpath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">target</span><br><span class="line">.idea</span><br><span class="line">*.iml</span><br></pre></td></tr></table></figure></li><li><p>在 .gitconfig文件中引用忽略配置文件(和 <code>git.ignore</code>在同一目录)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[core]</span><br><span class="line">excludesfile = C:/Users/hero_/git.ignore</span><br></pre></td></tr></table></figure></li></ul><h4 id="定位Git"><a href="#定位Git" class="headerlink" title="定位Git"></a>定位Git</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607185544398.png"></p><h4 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607190115701.png"></p><p>添加到暂存区</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607190533336.png"></p><h4 id="提交的本地仓库"><a href="#提交的本地仓库" class="headerlink" title="提交的本地仓库"></a>提交的本地仓库</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607190633483.png" alt="image-20220607190633483"></p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607192935371.png" style="zoom:150%;" /><h4 id="版本切换"><a href="#版本切换" class="headerlink" title="版本切换"></a>版本切换</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607194333823.png"></p><p>新建分支</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607194450052.png"></p><h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607194632540.png"></p><h4 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607194933316.png"></p><h4 id="集成-Github-账号"><a href="#集成-Github-账号" class="headerlink" title="集成 Github 账号"></a>集成 Github 账号</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607195318634.png"></p><h4 id="分享到GitHub"><a href="#分享到GitHub" class="headerlink" title="分享到GitHub"></a>分享到GitHub</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607195731902.png" alt="image-20220607195731902"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607195828302.png"></p><h4 id="克隆仓库"><a href="#克隆仓库" class="headerlink" title="克隆仓库"></a>克隆仓库</h4><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607200339332.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220607200403488.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    这个笔记适用于有基础但记忆模糊的读者使用，感谢您的来访。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2022/06/01/Maven/"/>
      <url>/2022/06/01/Maven/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><blockquote><p>Maven的本质是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型(POM)</p><p>POM:Project Object Model 项目对象模型</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/20210717214736482.png" alt="在这里插入图片描述"></p><h4 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h4><ul><li><p>groupId：定义当前Maven项目隶属组织名称(通常是域名反写)</p></li><li><p>artifactId：定义当前Maven项目名称(通常是模块名称)</p></li><li><p>version：定义当前版本号</p></li><li><p>packaging：定义该项目的打包方式</p></li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>项目构建：提供标准的，跨平台的自动化项目构建方式</li><li>依赖管理：方便快捷的管理项目依赖的资源，避免资源间版本冲突问题</li><li>统一开发结构：提供标准的，统一的项目结构</li></ol><h2 id="Maven项目"><a href="#Maven项目" class="headerlink" title="Maven项目"></a>Maven项目</h2><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><h6 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h6><blockquote><p>依赖指的是当前项目运行所需要的 jar</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--设置当前项目所依赖的所有jar--&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;!--设置具体的依赖--&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;!--依赖所属群组id--&gt;</span><br><span class="line">    &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">    &lt;!--依赖所属项目id--&gt;</span><br><span class="line">    &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">    &lt;!--依赖版本号--&gt;</span><br><span class="line">    &lt;version&gt;&lt;/version&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h6 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h6><blockquote><p>以依赖配置的方式实现依赖传递</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.example&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;com.maven.project&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><ol><li><strong>直接传递：</strong>在当前项目中通过依赖配置建立的依赖关系（A使用B，A和B就是直接传递）</li><li><strong>间接传递：</strong>被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源（A依赖B，而B依赖C，那么A和C之间就是间接传递）</li><li><strong>依赖传递的冲突问题：</strong><ul><li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的</li><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的</li></ul></li></ol><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/20210717215049286.png" alt="在这里插入图片描述"></p><h6 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h6><blockquote><p>可选依赖是指对外界隐藏当前所依赖的资源(外界使用依赖传递时，看不到你所引用的 jar )</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;&lt;/version&gt;</span><br><span class="line">  &lt;!--添加下面这一行,外界看不到你的这个 jar --&gt;</span><br><span class="line">  &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h6><blockquote><p>排除依赖指主动断开依赖的资源，被排除的资源无需指定版本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;&lt;/version&gt;</span><br><span class="line">  &lt;!--添加下面这一行--&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">      &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">    &lt;/exclusion&gt;</span><br><span class="line">  &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>排除依赖和可选依赖作用对象不同</p><p>当 A 依赖 B 时，在 A 中 导入 B 的坐标，B 不想让 A 看到自己的某个 jar ，B 可以用可选依赖；A 不想用 B 的某个依赖，A 可以用排除依赖。</p><h6 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h6><p>依赖的 jar 默认情况可以在任何地方使用，可以通过 <code>scope</code> 标签设定其作用范围</p><ul><li>主程序范围有效(main文件夹范围内)</li><li>测试程序范围有效(test 文件夹范围内)</li><li>是否参与打包(package 指令范围内)</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/20210717215112315.png" alt="在这里插入图片描述"></p><h4 id="生命周期与插件"><a href="#生命周期与插件" class="headerlink" title="生命周期与插件"></a>生命周期与插件</h4><h6 id="构建生命周期"><a href="#构建生命周期" class="headerlink" title="构建生命周期"></a>构建生命周期</h6><ul><li>Maven 对项目构建的生命周期划分为 3 套<ul><li>clean：清理工作</li><li>default：核心工作，如编译，测试，打包，部署等</li><li>site：产生报告，发布站点等</li></ul></li></ul><h6 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h6><ul><li>插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能</li><li>默认 maven 在各个生命周期上绑定有预设的功能</li><li>通过插件可以自定义其他功能</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;build&gt; </span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt; </span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; </span><br><span class="line">      &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt; </span><br><span class="line">      &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">&lt;execution&gt; </span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">&lt;goal&gt;jar&lt;/goal&gt; </span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">      &lt;phase&gt; generate-test-resources&lt;/phase&gt; </span><br><span class="line">  &lt;/execution&gt;</span><br><span class="line">&lt;/executions&gt; </span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt; </span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分模块开发与设计"><a href="#分模块开发与设计" class="headerlink" title="分模块开发与设计"></a>分模块开发与设计</h2><blockquote><p>一个项目多个工程，一个工程多个模块，将 dao层，service层，controller层 等分割成多个工程，使用依赖传递的方式进行调用(如，dao 层在 pom.xml 中导入 pojo 的依赖坐标，就可以使用实体类了)</p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220606141824161.png" alt="image-20220606141824161"></p><ul><li>每个模块可以执行 <strong>compile</strong>(编译) 命令来验证</li><li>被依赖的模块需要先进行 <strong>install</strong>(安装) 命令，将其文件放入仓库当中（如上面提到的，dao 引用 pojo ，需要先 install pojo）</li><li>各个模块的配置文件名不应重复(<code>applicationContext-dao</code>,<code>applicationContext-service</code>)</li></ul><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><strong>多模块构建维护</strong></p><p>为了防止日后某一模块进行更新后导致其他模块无法正常调用该模块，这里创建一个父模块来管理各个模块，对他们进行统一的编译，安装操作。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220606152211005.png" alt="image-20220606152211005"></p><ol><li><p>创建一个空模块，只保留 pom.xml 文件</p></li><li><p>定义打包类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;pom&lt;/packaging&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义当前模块进行构建操作时关联的其他模块名称</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;modules&gt;</span><br><span class="line">  &lt;module&gt;../ssm_pojo&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;../ssm_dao&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;../ssm_service&lt;/module&gt;</span><br><span class="line">  &lt;module&gt;../ssm_controller&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p><strong>模块依赖关系维护</strong></p><p>每个模块都有其对应的依赖，当多个模块引用同一依赖或同一依赖不同版本时，会造成配置臃肿版本冲突等问题</p><p>现在使用父模块来管理依赖，子模块继承父模块就可以，这也是 SpringBoot 管理依赖的思想</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220606155948362.png" alt="image-20220606155948362"></p><ol><li><p>在父模块的 pom.xml 中导入需要的所有依赖(位于 <code>dependenceManagement</code> 标签下)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--声明此处进行依赖管理--&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">  &lt;!--具体的依赖--&gt;</span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure></li><li><p>在子模块中继承父模块</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--定义该工程的父工程--&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">  &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;&lt;/version&gt;</span><br><span class="line">  &lt;!--填写父工程的pom文件--&gt;</span><br><span class="line">  &lt;relativePath&gt;../ssm/pom.xml&lt;/relativePath&gt;</span><br><span class="line">&lt;/parent&gt;</span><br></pre></td></tr></table></figure></li><li><p>子模块中添加依赖，不用写版本，版本由父模块控制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;&lt;/artifactId&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></li><li><p>插件配置同理，读者自行实验</p></li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><strong>统一依赖版本</strong></p><p>像 <code>spring-context </code>, <code>spring-jdbc</code> , <code>spring-webmvc</code> 等依赖的版本是需要统一相同的，这时因某些’不可抗拒因素‘会导致版本不统一。可以通过设置属性来统一管理版本，类似 java 中的变量，一次赋值，多地调用</p><p><em>由于依赖版本控制交由父模块处理，以下操作都在父模块的 pom.xml 中进行</em></p><ol><li><p>自定义属性</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--定义自定义属性--&gt;</span><br><span class="line">&lt;properties&gt; </span><br><span class="line">  &lt;spring.version&gt;5.1.9.RELEASE&lt;/spring.version&gt;</span><br><span class="line">&lt;junit.version&gt;4.12&lt;/junit.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure></li><li><p>依赖中引用属性(EL表达式？雾)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt; </span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;/groupId&gt; </span><br><span class="line">  &lt;artifactId&gt;spring-context&lt;/artifactId&gt; </span><br><span class="line">  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>此外还有很多的系统内置属性，有兴趣的 :running: 官方文档</p><p><code>$&#123;basedir</code>:表示项目的根目录，也就是包含 pom.xml 文件的目录</p><p><code>$&#123;version&#125;</code>:表示项目的版本</p></li></ol><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><h6 id="工程版本"><a href="#工程版本" class="headerlink" title="工程版本"></a>工程版本</h6><ul><li>SNAPSHOT(快照版本)<ul><li>项目开发过程中，为方便团队成员合作，解决模块间相互依赖和实时更新的问题，开发者对每个模块进行构建的时候，输出的临时性版本叫做快照版本(测试阶段版本)</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li>RELEASE(发布版本)<ul><li>项目开发到进入阶段里程碑后，向团队外部发布比较稳定的版本，这种版本所对应的构建文件是稳定的，即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本成为发布版本</li></ul></li></ul><h6 id="工程版本号约定"><a href="#工程版本号约定" class="headerlink" title="工程版本号约定"></a>工程版本号约定</h6><ul><li>约定规范<ul><li><code>主版本</code>.<code>次版本</code>.<code>增量版本</code>.<code>里程碑版本</code></li><li>主版本：表示项目重大框架的变更，如：spring5相较于spring4的迭代</li><li>次版本：表示有较大的功能增加和变化，或全面系统的修复BUG</li><li>增量版本：表示有重大漏洞的修复</li><li>里程碑版本：表示一个版本的里程碑(版本内部)，这样的版本同下一个正式版本相比，相对来说不是很稳定，有待更多的测试</li></ul></li><li>范例<ul><li>5.1.9.RELEASE</li></ul></li></ul><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><p><strong>多环境兼容</strong></p><p>​    我们的项目将来是要发布到多个环境的，用于更新，测试与维护。这样每个环境的配置文件要求都不同(例如日志级别)</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220606181032241.png" alt="image-20220606181032241"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--创建多环境--&gt;</span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">  &lt;!--定义具体的环境：生产环境--&gt;</span><br><span class="line">  &lt;profile&gt;</span><br><span class="line">    &lt;!--定义环境对应的唯一名称--&gt;</span><br><span class="line">    &lt;id&gt;开发环境名称1&lt;/id&gt;</span><br><span class="line">    &lt;!--定义环境中的专用的属性值--&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">      &lt;jdbc.url&gt;jdbc链接&lt;/jdbc.url&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;!-- 设置为默认启动项 --&gt;</span><br><span class="line">    &lt;activation&gt;</span><br><span class="line">      &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">    &lt;/activation&gt;</span><br><span class="line">  &lt;/profile&gt;</span><br><span class="line">  &lt;!--定义具体的环境：开发环境--&gt;</span><br><span class="line">  &lt;profile&gt;...&lt;profile/&gt;</span><br><span class="line">&lt;/profiles&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis</title>
      <link href="/2022/05/10/Redis/"/>
      <url>/2022/05/10/Redis/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Redis新手入门笔记"><a href="#Redis新手入门笔记" class="headerlink" title="Redis新手入门笔记"></a><strong>Redis新手入门笔记</strong></h1><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><ol><li><p><a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/redis-7.0.0.tar.gz">Redis-7.0.0</a>，将压缩包上传至服务器并解压</p></li><li><p>安装 gcc 编译环境</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install centos-release-scl scl-utils-build</span><br><span class="line">yum install -y devtoolset-8-toolchain</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-8 bash</span><br></pre></td></tr></table></figure></li><li><p>测试 gcc 版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br></pre></td></tr></table></figure></li><li><p>进入redis目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd redis-7.0.0/</span><br></pre></td></tr></table></figure></li><li><p>执行 make 命令，对文件进行编译</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>执行 make install 命令，进行安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p> redis程序 默认安装在 /usr/local/bin 目录,这样就可以在任何地方通过命令运行redis</p></li><li><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p><strong>一般来说我们使用redis并不在解压后的redis目录下。</strong></p><p><strong>通常在一个习惯的位置创建一个文件夹，里面自己更改好的配置文件（redis.conf）。</strong></p><p><strong>通过启动命令来加载这个配置文件进而使用redis的。</strong></p></div><p>所以我们把解压文件中的 redis.conf  复制到自定义的位置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /opt/redis-7.0.0/redis.conf /etc</span><br></pre></td></tr></table></figure></li><li><p>将复制后的 redis.conf 中 <strong>daemonize</strong> 属性改为  <strong>yes</strong>  ，这样 redis 就可以在后台启动</p></li></ol><h2 id="Redis启动与关闭"><a href="#Redis启动与关闭" class="headerlink" title="Redis启动与关闭"></a>Redis启动与关闭</h2><ol><li><p>在任意目录下执行（后面那个就是指定你要加载的配置文件，重点）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>查看 redis 运行进程</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure></li><li><p>客户端访问 redis</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure></li><li><p>退出客户端</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>关闭 redis</p><ul><li>在客户端内执行 shutdown</li><li>退出客户端后查询 redis 进程， kill PID</li></ul></li></ol><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><blockquote><p>​    端口号：6379</p><p>​    默认有 16 个数据库，下标从 0 开始，初始默认实验 0 号库</p><p>​    所有库密码相同</p></blockquote><p><strong>Redis是单线程+多路IO复用技术</strong></p><p>多路复用是指使用一个线程来检查多个文件描述符（Socket）的就绪状态，比如调用select和poll函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞直到超时。得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动线程执行（比如使用线程池）</p><h2 id="Redis常用数据类型"><a href="#Redis常用数据类型" class="headerlink" title="Redis常用数据类型"></a>Redis常用数据类型</h2><h4 id="Redis-键-key"><a href="#Redis-键-key" class="headerlink" title="Redis 键(key)"></a>Redis 键(key)</h4><ol><li><p>查看当前库中所有 key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure></li><li><p>判断某个 key 是否存在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exists &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看 key 的数据类型</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除指定的 key 数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">del &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>根据 value 选择非阻塞删除(仅将 keys 从 keyspace 元数据中删除，真正的删除会在后续异步操作)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unlink &lt;key&gt; </span><br></pre></td></tr></table></figure></li><li><p>设置 key 的过期时间(数字以秒为单位)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">expire &lt;key&gt; &lt;num&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看 key 还有多少秒过期( -1 表示永不过期，-2 表示已经过期 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ttl &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>切换数据库(数据库下标从0开始，一共有16个，默认使用数据库[0] )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &lt;num&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看当前数据库 key 的数量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbsize</span><br></pre></td></tr></table></figure></li><li><p>清空当前数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flushdb</span><br></pre></td></tr></table></figure></li><li><p>清空全部数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flushall</span><br></pre></td></tr></table></figure></li></ol><h4 id="Redis字符串-String"><a href="#Redis字符串-String" class="headerlink" title="Redis字符串(String)"></a>Redis字符串(String)</h4><h6 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h6><blockquote><p>String是Redis最基本的类型，你可以理解成与Memcached一模一样的类型，一个key对应一个value。</p><p>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</p></blockquote><h6 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h6><ol><li><p>添加键值对</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加键值对(仅在 key 不存在时，设置 key 的值)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>查询对应键值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get &lt;key&gt; </span><br></pre></td></tr></table></figure></li><li><p>将给定&lt; value &gt;添加到原&lt; value &gt;的末尾，返回 &lt; value &gt;的长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">append &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取&lt; value &gt;的长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strlen &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>将 &lt; value &gt; 的数字值增加 1 (只能对数字值进行操作，如果为空，则新增值为 1 )，返回增加后的&lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">incr &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>将 &lt; value &gt; 的数字值减少 1 (只能对数字值进行操作，如果为空，则新增值为 -1 )，返回减少后的 &lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">decr &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义步长(与 6，7 类似)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">incrby/decrby &lt;key&gt; &lt;num&gt;</span><br></pre></td></tr></table></figure></li><li><p>同时设置一个或多个 &lt; key &gt;-&lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mset &lt;key01&gt; &lt;value01&gt; &lt;key02&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>同时设置一个或多个 &lt; key &gt;-&lt; value &gt; ( 当且仅当给定所有 key 都不存在时 )</p><p>(<u>原子性，有一个失败则都失败</u>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msetnx &lt;key01&gt; &lt;value01&gt; &lt;key02&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>同时获取一个或多个 &lt; value&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mget &lt;key01&gt; &lt;key02&gt; &lt;key03&gt;...</span><br></pre></td></tr></table></figure></li><li><p>获得指定范围的 &lt; value &gt; ,下标从 0 开始</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getrange &lt;key&gt; &lt;startNum&gt; &lt;endNum&gt;</span><br></pre></td></tr></table></figure></li><li><p>用给定 &lt; value &gt; 覆盖 &lt; key &gt; 所存储的字符串值，从 &lt; num &gt;开始，索引从 0 开始，返回 &lt; value &gt;长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setrange &lt;key&gt; &lt;num&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置键的同时设置过期时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setex &lt;key&gt; &lt;过期时间&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>新 &lt; value &gt; 覆盖 原 &lt; value &gt;,并返回 原&lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">getset &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h6><blockquote><p>​    String的数据结构为简单动态字符串(Simple Dynamic String,缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配.</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511153542429.png" alt="image-20220511153542429"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次只会多扩1M的空间。需要注意的是字符串最大长度为512M。</p></blockquote><h4 id="Redis列表-List"><a href="#Redis列表-List" class="headerlink" title="Redis列表(List)"></a>Redis列表(List)</h4><h6 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h6><blockquote><p>单键多值</p><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511160647982.png" alt="image-20220511160647982"></p></blockquote><h6 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h6><ol><li><p>从左边/右边插入一个或多个值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpush/rpush &lt;key01&gt; &lt;value01&gt; &lt;key02&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>从左边/右边弹出一个值 (当值全部弹出时，键销毁)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop/rpop &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>从&lt; key01&gt; 列表右边弹出一个值，插入到 &lt; key02 &gt;列表左边</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpoplpush &lt;key01&gt; &lt;key02&gt;</span><br></pre></td></tr></table></figure></li><li><p>按照下标获取范围内元素，下标从 0 开始 ( 0 -1 代表获取列表所有元素)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrange &lt;key&gt; &lt;startNum&gt; &lt;endNum&gt;</span><br></pre></td></tr></table></figure></li><li><p>按照下标获取列表元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex &lt;key&gt; &lt;index&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取列表长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">llen &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>在 &lt; value&gt; 的 <strong><u>后面</u></strong> 插入元素&lt; newvalue&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">linsert &lt;key&gt; before &lt;value&gt; &lt;newvalue&gt;</span><br></pre></td></tr></table></figure></li><li><p>从左边开始删除 &lt; num &gt; <strong>个</strong> 列表元素 &lt; value&gt; (从左到右)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem &lt;key&gt; &lt;num&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>将列表中下标为 &lt; index &gt; 的值替换成 &lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h6><blockquote><p>List的数据结构为快速链表quickList。</p><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p><p>当数据量比较多的时候才会改成quicklist。</p><p>因为普通的链表需要的附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511163615399.png" alt="image-20220511163615399"></p><p>Redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用。这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p></blockquote><h4 id="Redis集合-Set"><a href="#Redis集合-Set" class="headerlink" title="Redis集合(Set)"></a>Redis集合(Set)</h4><h6 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h6><blockquote><p>Redis set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的，当你需要存储一个列表数据，又不希望出现重复数据时，set是一个很好的选择，并且set提供了判断某个成员是否在一个set集合内的重要接口，这个也是list所不能提供的。</p><p>Redis的Set是string类型的无序集合。它底层其实是一个value为null的hash表，所以添加，删除，查找的<strong>复杂度都是 O(1).</strong></p><p>一个算法，随着数据的增加，执行时间的长短，如果是O(1)，数据增加，查找数据的时间不变</p></blockquote><h6 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h6><ol><li><p>将一个或多个元素添加到集合当中，已存在的元素将被忽略</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value01&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>取出集合中所有元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smembers &lt;key&gt; </span><br></pre></td></tr></table></figure></li><li><p>判断集合中是否含有该 &lt; value&gt;, 有 1，没有 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回集合中元素个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scard &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除集合中的一个或多个元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srem &lt;key&gt; &lt;value01&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>随机从集合中弹出一个元素，弹完后，销毁 key</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spop &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>随机从集合中取出 &lt; num &gt; 个值 (不会从集合中删除)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srandmember &lt;key&gt; &lt;num&gt;</span><br></pre></td></tr></table></figure></li><li><p>将集合中的一个元素移动到另一个集合当中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smove &lt;key01&gt; &lt;key02&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回两个集合的 交集 元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sinter &lt;key01&gt; &lt;key02&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回两个集合的 并集 元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sunion &lt;key01&gt; &lt;key02&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回两个集合的 差集 元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sdiff &lt;key01&gt; &lt;key02&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据结构-2"><a href="#数据结构-2" class="headerlink" title="数据结构"></a>数据结构</h6><blockquote><p>Set数据结构是dict字典，字典是用哈希表实现的。</p><p>Java中HashSet的内部实现使用的是HashMap，只不过所有的value都指向同一个对象。</p><p>Redis的set结构也是一样，它的内部也使用hash结构，所有的value都指向同一个内部值。</p></blockquote><h4 id="Redis哈希-Hash"><a href="#Redis哈希-Hash" class="headerlink" title="Redis哈希(Hash)"></a>Redis哈希(Hash)</h4><h6 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h6><blockquote><p>Redis hash 是一个键值对集合。</p><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>类似Java里面的Map&lt;String,Object&gt;</p><p>就是 key-value 的嵌套</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511183713711.png" alt="image-20220511183713711"></p><p>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制的问题</p></blockquote><h6 id="常用命令-3"><a href="#常用命令-3" class="headerlink" title="常用命令"></a>常用命令</h6><ol><li><p>给哈希表中的 &lt; field &gt; 键赋值 &lt; value &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset &lt;key&gt; &lt;filed&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>给哈希表中的 &lt; field &gt; 键赋值 &lt; value &gt; (当且仅当 &lt; field &gt; 不存在时 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>从哈希表中的 &lt; field&gt; 取出值 &lt; value&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hget &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置一个或多个 hash 值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hmset &lt;key&gt; &lt;field01&gt; &lt;value01&gt; &lt;field02&gt; &lt;value02&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看哈希表中给定 &lt; field&gt; 是否存在，有 1，没有 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexists &lt;key&gt; &lt;field&gt;</span><br></pre></td></tr></table></figure></li><li><p>列出哈希表中所有 &lt; field &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hkeys &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>列出哈希表中所有 &lt; value&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hvals &lt;key&gt;</span><br></pre></td></tr></table></figure></li><li><p>给哈希表中域 &lt; field&gt; 的 &lt; value&gt; 值增加 &lt; num &gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hincrby &lt;key&gt; &lt;field&gt; &lt;num&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据结构-3"><a href="#数据结构-3" class="headerlink" title="数据结构"></a>数据结构</h6><blockquote><p>Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。</p><p>当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p></blockquote><h4 id="Redis有序集合Zset-sorted-set"><a href="#Redis有序集合Zset-sorted-set" class="headerlink" title="Redis有序集合Zset(sorted set)"></a>Redis有序集合Zset(sorted set)</h4><h6 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h6><blockquote><p>Redis有序集合zset与普通集合set非常相似，是一个<strong>没有重复元素</strong>的字符串集合。</p><p>不同之处是有序集合的每个成员都关联了一个评分（score）,这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。集合的成员是唯一的，但是评分可以是重复了 。</p><p>这里的 score 有点类似 <strong>权重</strong></p><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。</p><p>访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p></blockquote><h6 id="常用命令-4"><a href="#常用命令-4" class="headerlink" title="常用命令"></a>常用命令</h6><ol><li><p>将一个或多个元素及其 score 加入到有序集合中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;score01&gt; &lt;value01&gt; &lt;score02&gt; &lt;value02&gt;...</span><br></pre></td></tr></table></figure></li><li><p>返回有序集合中指定范围的元素，下标从 0 开始 ( 0 -1表示获取所有 )</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; &lt;startNum&gt; &lt;endNum&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回有序集合中指定范围的元素( score 和值一起返回)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrange &lt;key&gt; &lt;startNum&gt; &lt;endNum&gt; [withscores]</span><br></pre></td></tr></table></figure></li><li><p>返回有序集合中 score 介于 min 和 max 之间(包括等于 min，max)的元素，元素按 score 值升序排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrangebyscore &lt;key&gt; &lt;min&gt; &lt;max&gt; [withscores]</span><br></pre></td></tr></table></figure></li><li><p>返回有序集合中 score 介于 min 和 max 之间(包括等于 min，max)的元素，元素按 score 值降序排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrevrangebyscore &lt;key&gt; &lt;max&gt; &lt;min&gt; [withscore]</span><br></pre></td></tr></table></figure></li><li><p>增大元素的 score 值，返回增大后的值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zincrby &lt;key&gt; &lt;num&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除有序集合中指定 &lt; value &gt; 的元素</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrem &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li><li><p>统计有序集合中，score 在指定区间内的元素个数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcount &lt;key&gt; &lt;min&gt; &lt;max&gt;</span><br></pre></td></tr></table></figure></li><li><p>返回 &lt; value &gt; 值在有序集合中的排名，下标从 0 开始</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrank &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据结构-4"><a href="#数据结构-4" class="headerlink" title="数据结构"></a>数据结构</h6><blockquote><p>SortedSet(zset)是Redis提供的一个非常特别的数据结构，一方面它等价于Java的数据结构</p><p>Map&lt;String, Double&gt;，可以给每一个元素value赋予一个权重score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素的列表。</p><p>zset底层使用了两个数据结构</p><p>（1）hash，hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。</p><p>（2）跳跃表，跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。</p></blockquote><blockquote><p><strong>跳跃表</strong></p><ol><li><p>简介</p><p>有序集合在生活中比较常见，例如根据成绩对学生排名，根据得分对玩家排名等。对于有序集合的底层实现，可以用数组、平衡树、链表等。数组不便元素的插入、删除；平衡树或红黑树虽然效率高但结构复杂；链表查询需要遍历所有效率低。Redis采用的是跳跃表。跳跃表效率堪比红黑树，实现远比红黑树简单。</p></li><li><p>实例</p><p>对比有序链表和跳跃表，从链表中查询出51</p><ol><li><p>有序链表</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511193306982.png" alt="image-20220511193306982"></p><p>要查找值为51的元素，需要从第一个元素开始依次查找、比较才能找到。共需要6次比较。</p></li><li><p>跳跃表</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511193352203.png" alt="image-20220511193352203"></p><p>从第2层开始，1节点比51节点小，向后比较。</p><p>21节点比51节点小，继续向后比较，后面就是NULL了，所以从21节点向下到第1层</p><p>在第1层，41节点比51节点小，继续向后，61节点比51节点大，所以从41向下</p><p>在第0层，51节点为要查找的节点，节点被找到，共查找4次。 </p><p><u>从此可以看出跳跃表比有序链表效率要高</u></p></li></ol></li></ol></blockquote><h2 id="Redis配置文件"><a href="#Redis配置文件" class="headerlink" title="Redis配置文件"></a>Redis配置文件</h2><blockquote><p>听说此处面试问到的概率还不小，但对于入门来说懂几个关键点即可</p><p>博主只更改几个相对常用的地方</p><p>如有其他需求，可以查看<a href="https://redis.io/docs/">官方文档</a></p></blockquote><blockquote><p>博主在 Redis安装这里已经将 配置文件 redis.conf 备份到 /etc 目录下，所有本部分操作都在此目录下进行</p></blockquote><ol><li><p>默认情况 bind=127.0.0.1  只能接受本机访问的请求，注释掉它，以便远程连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># bind=127.0.0.1</span><br></pre></td></tr></table></figure></li><li><p>将本机访问保护设置为 no 以便远程连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure></li><li><p>端口设置，默认6379</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port 6379</span><br></pre></td></tr></table></figure></li><li><p>tcp-backlog</p><blockquote><p>tcp的backlog是一个连接队列，backlog队列总和=未完成三次握手队列 + 已经完成三次握手队列。</p><p>在高并发环境下你需要一个高backlog值来避免慢客户端连接问题。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp-backlog 511</span><br></pre></td></tr></table></figure></li><li><p>心跳检测，对客户端连接状态的一种检测，每 n 秒检测一次，0表示永不检测，建议设置为60</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp-keepalive 60</span><br></pre></td></tr></table></figure></li><li><p>超时连接，一个<strong>空闲的</strong>客户端维持多少秒后会关闭，0表示关闭该功能，即永不关闭</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timeout 0</span><br></pre></td></tr></table></figure></li><li><p>redis运行是否为后台运行，yes为后台运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></li><li><p>日志级别，默认为 notice</p><blockquote><p>debug  verbose  notice  warning</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loglevel notice</span><br></pre></td></tr></table></figure></li><li><p>设定数据库数量，默认16</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">databases 16</span><br></pre></td></tr></table></figure></li><li><p>redis同时可以和多少客户端连接，默认10000</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxclients 10000</span><br></pre></td></tr></table></figure><ol start="11"><li><p>redis可以使用的内存量，防止将内存占满造成服务器宕机。(内存超过上限，redis会一次内部数据，移除规则通过 maxmemory-policy来指定)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure></li><li><p>设置密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirepass xxxx</span><br></pre></td></tr></table></figure><blockquote><p>设置密码后重启redis</p><p>登录后需要输入密码才能执行命令</p><p>进入客户端 redis-cli</p><p>输入 auth password</p></blockquote></li></ol><h2 id="Redis发布和订阅"><a href="#Redis发布和订阅" class="headerlink" title="Redis发布和订阅"></a>Redis发布和订阅</h2><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>Redis 发布订阅 (pub/sub) 是一种<strong>消息通信模式</strong>：发送者 (pub) 发送消息，订阅者 (sub) 接收消息。</p><p>Redis 客户端可以订阅任意数量的频道。</p></blockquote><h5 id="发布和订阅"><a href="#发布和订阅" class="headerlink" title="发布和订阅"></a>发布和订阅</h5><p>​    客户端订阅频道</p><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511211828323.png" alt="image-20220511211828323"></p><p>​    当频道发布消息后，消息就会发送给订阅的客户端</p><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220511211838270.png" alt="image-20220511211838270"></p><h5 id="发布订阅命令的实现"><a href="#发布订阅命令的实现" class="headerlink" title="发布订阅命令的实现"></a>发布订阅命令的实现</h5><ol><li><p>打开两个会话，连接到相同的服务器</p></li><li><p>其中一个会话订阅 channel01</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">subscribe channel01</span><br></pre></td></tr></table></figure></li><li><p>另一个会话给 channel01发布消息 hello，返回订阅这个频道的订阅者(客户端)数量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">publish channel01 hello</span><br></pre></td></tr></table></figure></li><li><p>返回第一个会话，就看到发来的消息</p></li></ol><p>​    </p><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><blockquote><p>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><p>Redis事务的主要作用就是串联多个命令防止别的命令插队。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220512201422965.png"></p><p>从输入Multi命令开始，输入的命令都会依次进入命令队列中，但不会执行，直到输入Exec后，Redis会将之前的命令队列中的命令依次执行。</p><p>组队的过程中可以通过discard来放弃组队。</p><p>multi 开启事务</p><p>exec 提交事务</p><p>discard 回滚事务</p></blockquote><h4 id="事务的错误处理"><a href="#事务的错误处理" class="headerlink" title="事务的错误处理"></a>事务的错误处理</h4><blockquote><p>组队时某个命令出现了报告错误，执行时整个的所有队列都会被取消。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220512201925271.png" alt="image-20220512201925271"></p><p>如果执行阶段某个命令报出了错误，则只有报错的命令不会被执行，而其他的命令都会执行，不会回滚。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220512201941584.png" alt="image-20220512201941584"></p><p>没有原子性</p></blockquote><h4 id="事务的冲突"><a href="#事务的冲突" class="headerlink" title="事务的冲突"></a>事务的冲突</h4><h6 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h6><p>​        <strong>悲观锁(Pessimistic Lock)</strong>, 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。<strong>传统的关系型数据库里边就用到了很多这种锁机制</strong>，比如<strong>行锁</strong>，<strong>表锁</strong>等，<strong>读锁</strong>，<strong>写锁</strong>等，都是在做操作之前先上锁。</p><h6 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h6><p>​        <strong>乐观锁(Optimistic Lock),</strong> 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。<strong>乐观锁适用于多读的应用类型，这样可以提高吞吐量</strong>。Redis就是利用这种check-and-set机制实现事务的。</p><h6 id="watch-key"><a href="#watch-key" class="headerlink" title="watch key"></a>watch key</h6><blockquote><p>​    在执行 multi 之前，限执行 watch key1 [key2]，可以监视一个或多个 key，</p><p>​    如果在事务执行之前，这个 key 被其他命令所改动，那么事务将被打断。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">watch key01</span><br><span class="line">multi</span><br><span class="line">... // 操作</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><h4 id="事务的三特性"><a href="#事务的三特性" class="headerlink" title="事务的三特性"></a>事务的三特性</h4><h6 id="单独隔离操作"><a href="#单独隔离操作" class="headerlink" title="单独隔离操作"></a>单独隔离操作</h6><p>​        事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p><h6 id="没有隔离级别"><a href="#没有隔离级别" class="headerlink" title="没有隔离级别"></a>没有隔离级别</h6><p>​        队列中的命令没有提交之前都不会实际被执行，因为事务提交前任何指令都不会被实际执行</p><h6 id="不保证原子性"><a href="#不保证原子性" class="headerlink" title="不保证原子性"></a>不保证原子性</h6><p>​        事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </p><h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><blockquote><p>Redis的所有数据都是保存在内存中，redis崩掉的话，会丢失。</p><p>Redis持久化就是把数据保存到磁盘上（可永久保存的存储设备中），以便数据恢复。</p><p>Redis提供两种方式进行持久化，</p><ul><li>RDB持久化（原理是将Reids在内存中的数据库记录定时dump到磁盘上的RDB持久化）</li><li>AOF（append only file）持久化（原理是将Reids的操作日志以追加的方式写入文件）</li></ul></blockquote><h4 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h4><blockquote><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到 一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。 整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能 如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p><p><strong>RDB</strong>的缺点是最F后一次持久化后的数据可能丢失。</p></blockquote><h6 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h6><ul><li>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量、环境变量、程序计数器等） 数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程；</li><li>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“<strong>写时复制技术</strong>”；</li><li> <strong>一般情况父进程和子进程会共用同一段物理内存</strong>，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</li></ul><h6 id="RDB持久化流程"><a href="#RDB持久化流程" class="headerlink" title="RDB持久化流程"></a>RDB持久化流程</h6><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515110413828.png" alt="image-20220515110413828"></p><p>​    Redis每次完成持久化操作之后，会在启动 redis-server 服务的目录下生成 dump.rdb (默认名称)文件，保存了 Redis 数据。</p><h6 id="配置文件中关于-Redis-持久化的配置"><a href="#配置文件中关于-Redis-持久化的配置" class="headerlink" title="配置文件中关于 Redis 持久化的配置"></a>配置文件中关于 Redis 持久化的配置</h6><ol><li><p>rdp文件名称</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br></pre></td></tr></table></figure></li><li><p>rdb 文件保存路径</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir ./</span><br></pre></td></tr></table></figure></li><li><p>快照策略：num 秒后，至少有多少个 key 发生变化，就执行快照</p><p>eg: 3600秒后，如果至少有一个key发生变化，执行快照</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(默认配置)</span><br><span class="line">save 3600 1</span><br><span class="line">save 300 10 </span><br><span class="line">save 60 10000</span><br></pre></td></tr></table></figure></li><li><p>命令 save 和 bgsave</p><blockquote><p>save ：save时只管保存，其它不管，全部阻塞。手动保存。不建议。</p><p><strong>bgsave：Redis会在后台异步进行快照操作，快照同时还可以响应客户端请求。</strong></p><p>可以通过lastsave 命令获取最后一次成功执行快照的时间</p></blockquote></li><li><p>执行flushall命令，也会产生dump.rdb文件，但里面是空的，无意义</p></li><li><p>当 Redis 无法写入磁盘(磁盘满了)，直接关闭 Redis 的写操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop-writes-on-bgsave-error yes</span><br></pre></td></tr></table></figure></li><li><p>完整性检查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdbchecksum yes</span><br></pre></td></tr></table></figure></li></ol><h6 id="RDB优势"><a href="#RDB优势" class="headerlink" title="RDB优势"></a>RDB优势</h6><ul><li>适合大规模数据恢复</li><li>对数据完整性和一致性要求不高时适用</li><li>节省磁盘空间</li><li>恢复速度快</li></ul><h6 id="RDB劣势"><a href="#RDB劣势" class="headerlink" title="RDB劣势"></a>RDB劣势</h6><ul><li>Fork时，内存中的数据被克隆了一份，大致2倍的膨胀下需要考虑</li><li>虽然Redis在fork时采用了<strong>写时拷贝技术</strong>，但是如果数据庞大时，还是比较消耗性能的</li><li>在一定时间间隔内做一次备份，如果出现意外，会丢失最后一次快照后的所有修改</li></ul><h4 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h4><blockquote><p>以<strong>日志</strong>的形式来记录每个写操作（增量保存），将Redis执行过的所有写指令记录下来(<strong>读操作不记录</strong>)</p><p> <strong>只许追加文件但不可以改写文件</strong>，redis启动之初会读取该文件重新构建数据</p><p>换言之，redis 重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作</p></blockquote><h6 id="AOF持久化流程"><a href="#AOF持久化流程" class="headerlink" title="AOF持久化流程"></a>AOF持久化流程</h6><ol><li>客户端的请求写命令会被 append 追加到 AOF 的缓冲区内；</li><li>AOF缓冲区根据AOF持久化策略[always,everysec,no]将操作sync同步到磁盘的AOF文件中；</li><li>AOF文件大小超过重写策略或手动重写时，会对AOF文件rewrite重写，压缩AOF文件容量；</li><li>Redis服务重启时，会重新load加载AOF文件中的写操作达到数据恢复的目的；</li></ol><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515122221724.png" alt="image-20220515122221724"></p><h6 id="配置文件中关于AOF持久化的配置"><a href="#配置文件中关于AOF持久化的配置" class="headerlink" title="配置文件中关于AOF持久化的配置"></a>配置文件中关于AOF持久化的配置</h6><ol><li><p>AOF 默认不开启</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendonly no</span><br></pre></td></tr></table></figure></li><li><p>AOF持久化生成的文件默认为 appendonly.aof，与 dump.rdb 在同一路径下</p></li><li><p>AOF与RDB同时开启，系统默认取 <strong>.aof</strong> 文件中的数据</p></li><li><p>AOF 同步频率设置</p><blockquote><p>appendfsync always  : 始终同步，每次Redis的写入都会立刻记入日志；性能较差但数据完整性比较好</p><p>appendfsync everysec : 每秒同步，每秒记入日志一次，如果宕机，本秒的数据可能丢失。</p><p>appendfsync no : redis不主动进行同步，把同步时机交给操作系统。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">appendfsync everysec (默认)</span><br></pre></td></tr></table></figure></li></ol><h6 id="AOF优势"><a href="#AOF优势" class="headerlink" title="AOF优势"></a>AOF优势</h6><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515123112419.png" alt="image-20220515123112419"></p><ul><li>备份机制更稳健，丢失数据概率更低</li><li>可读的日志文本，通过操作AOF文件，可以处理失误操作</li></ul><h6 id="AOF劣势"><a href="#AOF劣势" class="headerlink" title="AOF劣势"></a>AOF劣势</h6><ul><li>比起RDB占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别bug，造成恢复失败</li></ul><h4 id="RDB-amp-AOF"><a href="#RDB-amp-AOF" class="headerlink" title="RDB&amp;AOF"></a>RDB&amp;AOF</h4><ul><li>官方推荐两个都启用</li><li>如果对数据不敏感，可以单独用RDB</li><li>不建议单独使用AOF，可以回有BUG</li><li>如果只是做纯内存缓存，可以都不用</li></ul><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h6 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h6><blockquote><p>主机数据更新后，根据配置和策略， 自动同步到从机的master/slaver机制</p><p><strong>Master以写为主，Slave以读为主</strong></p><p>优点：</p><ul><li>读写分离，性能扩展</li><li>容灾快速恢复(从服务器挂掉后，快速切换到另一台从服务器进行读操作)</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515143835776.png" alt="image-20220515143835776"></p></blockquote><h4 id="配置主从复制"><a href="#配置主从复制" class="headerlink" title="配置主从复制"></a>配置主从复制</h4><blockquote><p>从简单配置一主二从入手，使用一台服务器</p><p>主机端口 6380，从机端口6381，6382 </p><p>ip ：127.0.0.1</p><p>博主的主从复制在 /root/Redis/master_slaver 下进行，方便后期管理与复习</p></blockquote><ol><li><p>创建文件夹 master_slaver</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /root/Redis/master_slaver</span><br></pre></td></tr></table></figure></li><li><p>将原来的配置文件复制到当前目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /etc/redis.conf /root/Redis/master_slaver</span><br></pre></td></tr></table></figure></li><li><p>在 master_slaver 下创建文件 redis-6380.conf 填写以下内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /root/Redis/master_slaver/redis.conf</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">port 6380</span><br><span class="line">dbfilename dump6380.rdb</span><br></pre></td></tr></table></figure></li><li><p>依照步骤 3 ，创建文件 redis-6381.conf 和 redis-6382.conf，并填写对应内容</p></li><li><p>如果你配置果密码则需要在 /root/Redis/master_slaver/redis.conf 中，</p><p>masterauth &lt; master-password&gt; 这一行下，配置你的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterauth xxxx</span><br></pre></td></tr></table></figure></li><li><p>任意目录下，更具你的三个配置文件，运行三个 redis-server</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515160535150.png" alt="image-20220515160535150"></p></li><li><p>打开三个会话，每个会话通过不同端口号，连接不同客户端</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-cli -p 6380</span><br></pre></td></tr></table></figure></li><li><p>查看主从状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515162001102.png" alt="image-20220515162001102"></p></li><li><p>从机连接主机，主机不需要连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof 127.0.0.1 6380</span><br></pre></td></tr></table></figure></li><li><p>再次查看主从状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info replication</span><br></pre></td></tr></table></figure><p>主机  </p><p>​    <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515161759775.png" alt="image-20220515161759775"></p></li></ol><p>​       从机</p><p>​        <img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515161630380.png" alt="image-20220515161630380"></p><h6 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h6><blockquote><p>​    主从复制，主机用来写，从机用来读，达到读写分离</p><p>​    主机写完后，从机自动复制，就可以读了</p><p>​    从机只能读，不能写</p></blockquote><h6 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h6><ol><li><p>一主二仆</p><blockquote><p>当连接上主服务器之后，从服务器向主服务器发送进行数据同步消息</p><p>主服务器接到从服务器发过来的同步消息，把主服务器数据进行持久化，rdb文件，把rdb文件发送到从服务器，从服务器拿到rdb进行读取</p><p>每次主服务器进行写操作之后，都会和从服务器进行数据同步</p></blockquote><p>当主机挂掉，再重启，它还是主机</p><p>当从机挂掉，再重启，需要重新连接主机，自动同步主机所有数据</p></li><li><p>薪火相传</p><p>主机有从机，从机也可以有从机，从机的从机不在主机的从机列表里显示[doge]</p></li><li><p>反客为主</p><p>主机挂掉后，从机可以升职为主机，其它从机不用做任何修改。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slaveof no noe</span><br></pre></td></tr></table></figure></li></ol><h4 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h4><blockquote><p>反客为主的自动版，能够监控主机是否故障，如果出现故障，则根据投票数自动将从服务器转变为主服务器</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220515195500797.png" alt="image-20220515195500797"></p></blockquote><h6 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h6><ol><li><p>在 /root/Redis/master_slaver/ 下新建 sentinel.conf 文件，名字不能写错，否则无法识别</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /root/Redis/master_slaver/sentinel.conf</span><br></pre></td></tr></table></figure></li><li><p>填写内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sentinel monitor mymaster 127.0.0.1 6380 1</span><br><span class="line"></span><br><span class="line">#如果设置有密码的话，还需要在填写这个</span><br><span class="line">#sentinel auth-pass mymaster xxxx</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>启动哨兵</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis-sentinel /root/Redis/master_slaver/sentinel.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h2><h6 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h6><blockquote><p>Redis 集群实现了对Redis的水平扩容，即启动N个redis节点，将整个数据库分布存储在这N个节点中，每个节点存储总数据的1/N。</p><p>Redis 集群通过分区（partition）来提供一定程度的可用性（availability）： 即使集群中有一部分节点失效或者无法进行通讯， 集群也可以继续处理命令请求。</p></blockquote><h4 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h4><blockquote><p>博主的集群在 <code>/root/Redis/redis_cluster</code>下创建，方便后期管理与复习</p></blockquote><h6 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h6><ol><li><p>创建文件夹 redis_cluster</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir /root/Redis/redis_cluster</span><br></pre></td></tr></table></figure></li><li><p>将<strong>主从复制</strong>中的 redis-6380.conf 和 redis.conf 复制过来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cp /root/Redis/master_slaver/redis-6380.conf /root/Redis/redis_cluster/redis-6380.conf</span><br><span class="line">cp /root/Redis/master_slaver/redis.conf /root/Redis/redis_cluster/redis.conf</span><br></pre></td></tr></table></figure></li><li><p>修改 redis-6380.conf 内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include /root/Redis/redis_cluster/redis.conf</span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line"></span><br><span class="line">port 6380</span><br><span class="line"></span><br><span class="line">dbfilename dump6380.rdb</span><br><span class="line"></span><br><span class="line">cluster-enabled yes</span><br><span class="line"></span><br><span class="line">cluster-config-file nodes-6380.conf</span><br><span class="line"></span><br><span class="line">cluster-node-timeout 15000</span><br></pre></td></tr></table></figure></li><li><p>修改 redis.conf 中 文件生成位置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dir /root/Redis/redis_cluster</span><br></pre></td></tr></table></figure></li><li><p>复制 redis-6380.conf 文件，并更改内容为对应端口</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516190217384.png" alt="image-20220516190217384"></p></li><li><p>启动 redis 服务，共六个</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一个简陋的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">redis-server Redis/redis_cluster/redis-7001.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis-7002.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis-7003.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis-7004.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis-7005.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis-7006.conf</span><br><span class="line">redis-server Redis/redis_cluster/redis.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\e[32m redis集群启动成功！ \e[0m&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516190302138.png" alt="image-20220516190302138"></p></li><li><p>检查 /root/Redis/redis_cluster 下是否生成 六个 节点文件</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516190331945.png" alt="image-20220516190331945"></p></li><li><p>到这儿就算是启动了集群，如果想在服务器推荐在windows端使用**<a href="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/software/redis-7.0.0.tar.gz">RedisDesktopManager</a>**进行连接（记得开放端口）</p></li></ol><h6 id="简单问题"><a href="#简单问题" class="headerlink" title="简单问题"></a>简单问题</h6><ol><li><p>集群如何分配节点</p><blockquote><p>一个集群至少要有三个主节点。</p><p>选项 –cluster-replicas 1 表示我们希望为集群中的每个主节点创建一个从节点。</p><p>分配原则尽量保证每个主数据库运行在不同的IP地址，每个从库和主库不在一个IP地址上。</p></blockquote></li><li><p>什么是插槽(slots)</p><blockquote><p>一个 Redis 集群包含 16384 个插槽（hash slot）， 数据库中的每个键都属于这 16384 个插槽的其中一个， </p><p>集群使用公式 CRC16(key) % 16384 来计算键 key 属于哪个槽， 其中 CRC16(key) 语句用于计算键 key 的 CRC16 校验和 。</p><p>集群中的每个节点负责处理一部分插槽。 举个例子， 如果一个集群可以有主节点， 其中：</p><p>节点 A 负责处理 0 号至 5460 号插槽。</p><p>节点 B 负责处理 5461 号至 10922 号插槽。</p><p>节点 C 负责处理 10923 号至 16383 号插槽。</p></blockquote></li><li><p>故障恢复</p><blockquote><p>如果所有某一段插槽的主从节点都宕掉，redis服务是否还能继续?</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为yes ，那么 ，整个集群都挂掉</p><p>如果某一段插槽的主从都挂掉，而cluster-require-full-coverage 为no ，那么，该插槽数据全都不能使用，也无法存储。</p><p>redis.conf中的参数 cluster-require-full-coverage</p></blockquote></li></ol><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>实现扩容</li><li>分摊压力</li><li>无中性化，配置相对简单</li></ul><h6 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h6><ul><li>多键操作不被支持</li><li>多键的 redis 食物不被支持</li><li>lua脚本不被支持</li><li>由于集群方案出现较晚，很多公司已经采用了其他的集群方案，而代理或者客户端分片的方案想要迁移至redis cluster，需要整体迁移而不是逐步过渡，复杂度较大。</li></ul><p>​    </p><h2 id="Redis应用问题"><a href="#Redis应用问题" class="headerlink" title="Redis应用问题"></a>Redis应用问题</h2><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><blockquote><p>key对应的数据在数据源并不存在，每次针对此key的请求从缓存获取不到，请求都会压到数据源，从而可能压垮数据源。比如用一个不存在的用户id获取用户信息，不论缓存还是数据库都没有，若黑客利用此漏洞进行攻击可能压垮数据库。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516195541685.png" alt="image-20220516195541685"></p></blockquote><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><blockquote><p>一个一定不存在缓存及查询不到的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p></blockquote><ol><li><p><strong>对空值缓存：</strong>如果一个查询返回的数据为空（不管是数据是否不存在），我们仍然把这个空结果（null）进行缓存，设置空结果的过期时间会很短，最长不超过五分钟；</p></li><li><p><strong>设置可访问的名单（白名单）：</strong></p><p>使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p></li><li><p><strong>采用布隆过滤器</strong>：(布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数（哈希函数）。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。)</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p></li><li><p><strong>进行实时监控：</strong>当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务</p></li></ol><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><h6 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h6><blockquote><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516195531246.png" alt="image-20220516195531246"></p></blockquote><h6 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h6><blockquote><p>key可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。这个时候，需要考虑一个问题：缓存被“击穿”的问题。。</p></blockquote><ol><li><p><strong>预先设置热门数据：</strong>在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长</p></li><li><p><strong>实时调整：</strong>现场监控哪些数据热门，实时调整key的过期时长</p></li><li><p><strong>使用锁</strong></p><ol><li><p>就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db。</p></li><li><p>先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX）去set一个mutex key</p></li><li><p>当操作返回成功时，再进行load db的操作，并回设缓存,最后删除mutex key；</p></li><li><p>当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516195828891.png" alt="image-20220516195828891"></p></li></ol></li></ol><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><h6 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h6><blockquote><p>key对应的数据存在，但在redis中过期，此时若有大量并发请求过来，这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>缓存雪崩与缓存击穿的区别在于这里针对很多key缓存，前者则是某一个key</p><p>正常访问</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516195905239.png" alt="image-20220516195905239"></p><p>缓存失效瞬间</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516195946074.png" alt="image-20220516195946074"></p></blockquote><h6 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h6><blockquote><p>缓存失效时的雪崩效应对底层系统的冲击非常可怕！</p></blockquote><ol><li><p><strong>构建多级缓存架构：</strong>nginx缓存 + redis缓存 +其他缓存（ehcache等）</p></li><li><p><strong>使用锁或队列：</strong></p><p>​        用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上。不适用高并发情况</p></li><li><p><strong>设置过期标志更新缓存：</strong></p><p>记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p></li><li><p><strong>将缓存失效时间分散开：</strong></p><p>比如我们可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p></li></ol><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><h6 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h6><blockquote><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><ol><li><p>基于数据库实现分布式锁</p></li><li><p>基于缓存（Redis等）</p></li><li><p>基于Zookeeper</p><p>每一种分布式锁解决方案都有各自的优缺点：</p></li><li><p>性能：redis最高</p></li><li><p>可靠性：zookeeper最高</p></li></ol><p>这里，我们就基于redis实现分布式锁。</p></blockquote><h6 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h6><blockquote><p>redis:命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># set sku:1:info “OK” NX PX 10000</span><br></pre></td></tr></table></figure><p>EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</p><p>PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</p><p>NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</p><p>XX ：只在键已经存在时，才对键进行设置操作。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20220516200223491.png" alt="image-20220516200223491"></p><ol><li><p>多个客户端同时获取锁（setnx）</p></li><li><p>获取成功，执行业务逻辑{从db获取数据，放入缓存}，执行完成释放锁（del）</p></li><li><p>其他客户端等待重试</p></li></ol></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        首先非常感谢耐心看到这里的朋友！</p><p>​        这篇文章是博主在学习 Redis 时做的笔记，主要目的是留点印象，方便日后翻阅复习。这篇文章毕竟是面向新手小白，内容略有浅显，一些深入的地方未加探讨。博主也在努力学习新知中，或许后续会发布些较为深入的文章，期待您的来访！</p><p>​        如发现文中有错误的地方，还望能联系博主，定及时更改。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础命令</title>
      <link href="/2022/05/06/Linux/"/>
      <url>/2022/05/06/Linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><ol><li><p>pwd 显示当前工作目录的绝对路径</p></li><li><p>ls 列出目录内容</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-a</td><td>全部的文件，连同隐藏的文件也一起列出来</td></tr><tr><td align="center">-l</td><td>显示文件的详细信息， ls -l 等价于 ll</td></tr></tbody></table></li><li><p>cd 切换目录</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">cd [绝对路径]</td><td>切换目录</td></tr><tr><td align="center">cd [相对路径]</td><td>切换目录</td></tr><tr><td align="center">cd ~ 或 cd</td><td>回到用户目录</td></tr><tr><td align="center">cd -</td><td>回到上次所在目录</td></tr><tr><td align="center">cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td align="center">cd -P</td><td>回到实际物理路径，而非快捷方式路径</td></tr></tbody></table></li><li><p>mkdir 创建文件夹</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-p</td><td>创建多层目录</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建一个目录(hero目录存在)</span><br><span class="line">mkdir heroxin</span><br><span class="line">mkdir hero/heroxin</span><br><span class="line"></span><br><span class="line">#创建一个多级目录(hero，xin，heroxin三者都不存在)</span><br><span class="line">mkdir -p hero/xin/heroxin</span><br></pre></td></tr></table></figure></li><li><p>rmdir 删除一个空的目录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir heroxin</span><br></pre></td></tr></table></figure></li><li><p>touch 创建文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>cp 复制文件或目录</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-r</td><td>递归复制整个文件夹</td></tr><tr><td align="center">/cp</td><td>直接覆盖同名文件，不询问</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将文件复制到 /root/Desktop 目录下</span><br><span class="line">cp /root/heroxin.txt /root/Desktop/ </span><br></pre></td></tr></table></figure></li><li><p>rm 删除文件或目录</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-r</td><td>递归删除目录中所有内容</td></tr><tr><td align="center">-f</td><td>强制执行删除操作，不询问</td></tr><tr><td align="center">-v</td><td>显示指令的详细执行过程</td></tr></tbody></table></li><li><p>mv 移动文件与目录或重命名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#重命名</span><br><span class="line">mv hero.txt heroxin.txt</span><br><span class="line">#移动文件</span><br><span class="line">mv /root/heroxin.txt /root/Desktop/</span><br></pre></td></tr></table></figure></li><li><p>cat 查看文件内容</p></li></ol>   <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat heroxin.txt</span><br><span class="line">#显示行号</span><br><span class="line">cat -n heroxin.txt</span><br></pre></td></tr></table></figure><ol start="11"><li><p>more 分屏查看文件内容 </p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">空格键</td><td>向下翻一页</td></tr><tr><td align="center">enter</td><td>向下翻一行</td></tr><tr><td align="center">q</td><td>退出</td></tr><tr><td align="center">ctrl + f</td><td>向下滚动一屏</td></tr><tr><td align="center">ctrl + b</td><td>返回上一屏</td></tr><tr><td align="center">=</td><td>输出当前行的行号</td></tr><tr><td align="center">:f</td><td>输出文件名和当前行号</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>less 分屏查看文件内容</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">空格键</td><td>向下翻一页</td></tr><tr><td align="center">[pagedown]</td><td>向下翻一页</td></tr><tr><td align="center">[pageup]</td><td>向上翻一页</td></tr><tr><td align="center">/字串</td><td>向下搜寻[字串]；n查找下一个，N查找上一个</td></tr><tr><td align="center">?字串</td><td>向上搜寻[字串]；n查找下一个，N查找上一个</td></tr><tr><td align="center">q</td><td>退出</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>echo 输出内容到控制台</p><table><thead><tr><th align="center">按键</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">\\</td><td align="left">输出 \</td></tr><tr><td align="center">\n</td><td align="left">换行</td></tr><tr><td align="center">\t</td><td align="left">制表符，也就是tab键</td></tr><tr><td align="center">-e</td><td align="left">启用转义符</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;heroxin&quot;</span><br><span class="line">echo -e &quot;hero\\xin&quot;</span><br><span class="line">echo -e &quot;hero\nxin&quot;</span><br><span class="line">echo -e &quot;hero\txin&quot;</span><br></pre></td></tr></table></figure></li><li><p>head 显示文件头部内容</p><table><thead><tr><th align="center">-num</th><th>显示头部内容的行数，默认显示10行</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head -9 heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>tail 显示文件尾部内容</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-num</td><td>显示文件尾部的行数，默认显示10行</td></tr><tr><td align="center">-f</td><td>显示文件最新追加的内容，监视文件变化</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -3 heroxin.txt</span><br><span class="line">tail -3f heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>输出重定向 &gt; 和追加 &gt;&gt;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#将 ll 查看的信息写到文件中</span><br><span class="line">ll &gt; heroxin.txt</span><br><span class="line">#将 ll 查看到的信息追加到文件中</span><br><span class="line">ll &gt;&gt; heroxin.txt</span><br><span class="line">#采用echo将hello追加到文件中</span><br><span class="line">echo hello &gt;&gt; heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p> ln 软连接</p></li></ol><pre><code>&gt; 类似Windows中的快捷方式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#创建软连接</span><br><span class="line">ln -s [原文件或目录] [软连接名]</span><br><span class="line">ln -s /root/Desktop/ heroxin</span><br><span class="line">#删除软连接(软连接名称后面没有/)</span><br><span class="line">rm -rf heroxin</span><br></pre></td></tr></table></figure></code></pre><ol start="18"><li><p>history 查看已经执行过的历史命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history</span><br></pre></td></tr></table></figure></li></ol><h2 id="时间日期"><a href="#时间日期" class="headerlink" title="时间日期"></a>时间日期</h2><p>关于时间日期</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-d [时间字符串]</td><td>显示指定的时间字符串表示的时间，而非当前时间</td></tr><tr><td align="center">-s [日期字符串]</td><td>设置系统日期时间</td></tr><tr><td align="center">[+日期时间格式]</td><td>使用指定格式显示当前时间</td></tr></tbody></table><table><thead><tr><th align="left">date</th><th>显示当前日期</th></tr></thead><tbody><tr><td align="left">date+%Y</td><td>显示当前年份</td></tr><tr><td align="left">date+%m</td><td>显示当前月份</td></tr><tr><td align="left">date+%d</td><td>显示当前是哪一天</td></tr><tr><td align="left">date “+%Y-%m-%d %H:%M:%S”</td><td>显示年月日时分秒</td></tr></tbody></table><ol><li><p>date 显示当前时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date</span><br><span class="line">date &quot;+%Y-%m-%d %H:%M:%S&quot;</span><br></pre></td></tr></table></figure></li><li><p>date 显示非当前时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#前一天时间</span><br><span class="line">date -d &quot;1 days ago&quot;</span><br><span class="line">#明天的时间</span><br><span class="line">date -d &quot;-1 dats ago&quot;</span><br></pre></td></tr></table></figure></li><li><p>date 设置系统时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date -s &quot;2017-06-19 20:52:18&quot;</span><br></pre></td></tr></table></figure></li><li><p>cal 查看日历</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cal 2022</span><br></pre></td></tr></table></figure></li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ol><li><p>useradd 添加新用户</p><table><thead><tr><th align="center">-g</th><th>为用户添加分组</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd heroxin</span><br><span class="line">useradd -g hero heroxin</span><br></pre></td></tr></table></figure></li><li><p>passwd 设置用户密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#为用户 heroxin 添加密码</span><br><span class="line">passwd heroxin</span><br></pre></td></tr></table></figure></li><li><p>id 查看用户是否存在</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id heroxin</span><br></pre></td></tr></table></figure></li><li><p>查看创建了哪些用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>su 切换用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#切换用户</span><br><span class="line">su heroxin</span><br><span class="line">#切换用户，并获得用户的环境变量及执行权限</span><br><span class="line">su - heroxin</span><br></pre></td></tr></table></figure></li><li><p>userdel 删除用户</p><table><thead><tr><th align="center">-r</th><th>删除用户和用户目录</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userdel heroxin</span><br><span class="line">userdel -r heroxin</span><br></pre></td></tr></table></figure></li><li><p>who 查看登录用户信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#显示自生用户名</span><br><span class="line">whoani</span><br><span class="line">#显示登录用户的用户名</span><br><span class="line">who am i</span><br></pre></td></tr></table></figure></li><li><p>sudo 设置普通用户具有root权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#非管理员用户登录系统</span><br><span class="line">sudo mkdir heroxin</span><br></pre></td></tr></table></figure></li><li><p>usermod 修改用户</p><table><thead><tr><th align="center">-g</th><th>修改用户的初始登录组，给定的组必须是存在的</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g root heroxin</span><br></pre></td></tr></table></figure></li></ol><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><ol><li><p>groupadd 新增组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd hero</span><br></pre></td></tr></table></figure></li><li><p>groupdel 删除组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel hero</span><br></pre></td></tr></table></figure></li><li><p>groupmod 修改组</p><table><thead><tr><th align="center">-n</th><th>指定工作组的新组名</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupmod -n hero xin</span><br></pre></td></tr></table></figure></li><li><p>查看有哪些组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/group</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><ol><li><p>chmode 改变权限</p><blockquote><p>这里就只用二进制的方法了</p></blockquote><table><thead><tr><th align="center">-R</th><th>递归操作，对整个文件夹里的所有内容执行</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmode 777 heroxin.txt</span><br><span class="line">#更改整个文件夹里面的所有文件权限</span><br><span class="line">chmode -R 777 heroxin/</span><br></pre></td></tr></table></figure></li><li><p>chown 改变所有者</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown heroxin heroxin.txt</span><br></pre></td></tr></table></figure></li><li><p>chgrp 改变所属组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp hero heroxin.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="搜索查找"><a href="#搜索查找" class="headerlink" title="搜索查找"></a>搜索查找</h2><ol><li><p>find 查找文件或目录</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-name</td><td>按指定的文件名查找模式查找文件</td></tr><tr><td align="center">-user</td><td>查找属于指定用户的文件</td></tr><tr><td align="center">-size</td><td>按照指定的文件大小查找文件；+n表示大于，-n表示小于，n表示等于</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find /root/ -name &quot;*.txt&quot;</span><br><span class="line">find /root/ -user heroxin</span><br><span class="line">find /root/ -size +1024</span><br></pre></td></tr></table></figure></li><li><p>grep 过滤查找以及 | 管道符</p><table><thead><tr><th align="center">-n</th><th>显示匹配行及行号</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll | grep heroxin</span><br></pre></td></tr></table></figure></li></ol><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><blockquote><p>只写 .tar.gz 了</p></blockquote><ol><li><p>tar 打包</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-c</td><td>产生 .tar打包文件</td></tr><tr><td align="center">-v</td><td>显示详细信息</td></tr><tr><td align="center">-f</td><td>指定压缩后的文件名</td></tr><tr><td align="center">-z</td><td>打包同时压缩</td></tr><tr><td align="center">-x</td><td>解压 .tar文件</td></tr><tr><td align="center">-C</td><td>解压到指定目录</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#压缩多个文件</span><br><span class="line">tar -zcvf heroxin.tar.gz hero.txt xin.txt</span><br><span class="line">#压缩目录</span><br><span class="line">tar -zcvf heroxin.tar.gz heroxin/</span><br><span class="line">#解压到当前目录</span><br><span class="line">tar -zxvf heroxin.tar.gz</span><br><span class="line">#解压到指定目录</span><br><span class="line">tar -zxvf heroxin.tar.gz -C /root</span><br></pre></td></tr></table></figure></li></ol><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><ol><li><p>du 查看文件和目录占用的磁盘空间</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-h</td><td>以G，mb，kb等格式显示</td></tr><tr><td align="center">-a</td><td>查看子目录及文件大小</td></tr><tr><td align="center">-c</td><td>显示所有文件和子目录大小后，显示总和</td></tr><tr><td align="center">-s</td><td>只显示总和</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">du -sh</span><br></pre></td></tr></table></figure></li><li><p>df 查看磁盘空间使用情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure></li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ol><li><p>ps 查看当前系统进程状态</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-e</td><td>列出所有进程</td></tr><tr><td align="center">-f</td><td>显示进程的完整信息</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef | grep redis</span><br></pre></td></tr></table></figure></li><li><p>kill 终止进程</p><table><thead><tr><th align="center">-9</th><th>表示强制终止</th></tr></thead></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kill PID</span><br></pre></td></tr></table></figure></li><li><p>pstree 查看进程树</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-p</td><td>显示进程的PID</td></tr><tr><td align="center">-u</td><td>显示进程的所属用户</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pstree -up</span><br></pre></td></tr></table></figure></li><li><p>top 实时监控系统进程状态</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-d 秒数</td><td>指定top命令在每个几秒后进行更新</td></tr><tr><td align="center">-i</td><td>使top不显示任何闲置或者僵死的进程</td></tr><tr><td align="center">-p</td><td>通过指定进程ID来仅仅监控某个进程的状态</td></tr><tr><td align="center">P</td><td>以 CUP 使用率排序   <strong>默认</strong></td></tr><tr><td align="center">M</td><td>以内存的使用率排序</td></tr><tr><td align="center">N</td><td>以 PID 排序</td></tr><tr><td align="center">q</td><td>退出top</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top -d 1</span><br><span class="line">tio -i</span><br><span class="line">top -p 2575</span><br></pre></td></tr></table></figure></li><li><p>netstat 显示网络状态和端口占用信息</p><table><thead><tr><th align="center">按键</th><th>功能</th></tr></thead><tbody><tr><td align="center">-a</td><td>显示所有正在监听(listen)和未监听的嵌套字(socket)</td></tr><tr><td align="center">-n</td><td>拒绝显示别名，能显示数字的全部转化成数字</td></tr><tr><td align="center">-l</td><td>仅列出在监听的服务状态</td></tr><tr><td align="center">-p</td><td>表示显示哪个进程在调用</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看sshd进程的网络信息</span><br><span class="line">netstat -anp | grep sshd</span><br><span class="line">#查看某个端口是否被占用</span><br><span class="line">netstat -nltp | grep 22</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><ol><li><p>查看防火墙开放端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all</span><br></pre></td></tr></table></figure></li><li><p>开放指定端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>开放范围端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=30000-30999/tcp --permanent</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure></li><li><p>修改 IP</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1274a009-858f-4012-a5b3-8f5ef1800444&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">#IP 地址</span><br><span class="line">IPADDR=192.168.196.101</span><br><span class="line">#网关</span><br><span class="line">GATEWAY=192.168.196.2</span><br><span class="line">#域名解析器</span><br><span class="line">DNS1=192.168.196.2</span><br></pre></td></tr></table></figure></li><li><p>改hoshname</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
