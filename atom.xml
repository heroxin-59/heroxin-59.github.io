<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heroxin</title>
  
  <subtitle>阿鑫</subtitle>
  <link href="https://heroxin.xyz/atom.xml" rel="self"/>
  
  <link href="https://heroxin.xyz/"/>
  <updated>2024-01-02T10:13:37.420Z</updated>
  <id>https://heroxin.xyz/</id>
  
  <author>
    <name>Heroxin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://heroxin.xyz/2023/12/26/Untitled/"/>
    <id>https://heroxin.xyz/2023/12/26/Untitled/</id>
    <published>2023-12-26T03:14:24.854Z</published>
    <updated>2024-01-02T10:13:37.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>内部周会（2024/1/2 18.10）</p><ol><li>项目<ul><li>预算，进入研发阶段，两周，</li></ul></li><li>团队</li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heroxin.xyz/2023/11/03/Redis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD/"/>
    <id>https://heroxin.xyz/2023/11/03/Redis%E7%BC%93%E5%AD%98%E9%A2%84%E7%83%AD/</id>
    <published>2023-11-03T00:37:24.736Z</published>
    <updated>2023-11-03T00:44:50.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h1><p>缓存预热是指系统上线后，提前将相关的缓存数据加载到缓存系统。</p><p>避免在系统上线初期，大量请求访问到数据库当中，对数据库造成巨大的压力</p><p>如果不进行预热，那么 Redis 初始状态数据为空，系统上线初期，对于高并发的流 量，都会访问到数据库中， 对数据库造成流量的压力。 </p><p>缓存预热解决方案： </p><ul><li>数据量不大的时候，工程启动的时候进行加载缓存动作； </li><li>数据量大的时候，设置一个定时任务脚本，进行缓存的刷新； </li><li>数据量太大的时候，优先保证热点数据进行提前加载到缓存。</li></ul><h1 id="Redis缓存预热"><a href="#Redis缓存预热" class="headerlink" title="Redis缓存预热"></a>Redis缓存预热</h1><blockquote><p>InitializingBean是Spring提供的拓展性接口，InitializingBean接口为bean提供了属性初始化后的处理方法，它只有一个afterPropertiesSet方法，凡是继承该接口的类，在bean的属性初始化后都会执行该方法。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeckillController</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统初始化，把商品库存数量加载到redis  缓存预热</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *缓存操作</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Spring全局异常处理</title>
    <link href="https://heroxin.xyz/2023/10/27/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <id>https://heroxin.xyz/2023/10/27/%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</id>
    <published>2023-10-27T02:30:00.000Z</published>
    <updated>2023-10-27T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>Spring 异常处理三种方式</strong></p><ol><li> @ExceptionHandler</li><li> 实现HandlerExceptionResolver接口</li><li> @ControllerAdvice+@ExceptionHandler</li></ol></blockquote><h1 id="Spring异常处理"><a href="#Spring异常处理" class="headerlink" title="Spring异常处理"></a>Spring异常处理</h1><p>使用<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>全局处理异常</p><p><code>@ControllerAdvice</code> 是一个Spring注解，它本质上是一个特殊类型的<code>@Component</code>。意味着当你使用</p><p><code>@ControllerAdvice</code> 注解标记一个类时，Spring会将该类注册为一个Spring Bean，并将其纳入Spring应用程序</p><p>上下文中，使它能够被自动扫描和发现。</p><p>同时<code>@ControllerAdvice</code> 是基于Spring AOP（面向切面编程）的一种实现，默认情况下会对所有Controller进行拦</p><p>截，当你使用<code>@ControllerAdvice</code>注解标记一个类时，Spring将这个类视为一个AOP切面。这个切面的目的是捕获</p><p>Controller中抛出的异常，并在一个统一的地方进行处理。在<code>@ControllerAdvice</code>类中，你可以定义多个</p><p><code>@ExceptionHandler</code>注解的方法，每个方法可以处理特定类型的异常。这些方法被视为AOP通知，它们织入到切</p><p>点（Controller方法抛出异常的地方）。</p><h1 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h1><ol><li>当应用程序中的某个方法抛出异常时，Spring Boot会捕获该异常。</li><li>Spring Boot会搜索在类路径下带有 <code>@ControllerAdvice</code> 注解的类。</li><li>在找到 <code>@ControllerAdvice</code> 类后，Spring Boot会查找该类中使用 <code>@ExceptionHandler</code> 注解标记的方法，以确定哪个方法能够处理抛出的异常。方法的参数应与异常类型匹配。</li><li>如果找到了匹配的 <code>@ExceptionHandler</code> 方法，Spring Boot会调用该方法，将抛出的异常传递给它。</li><li><code>@ExceptionHandler</code> 方法可以根据应用的需求执行自定义的异常处理逻辑，例如记录异常、生成响应、发送通知等。</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">GlobalException</button></li><li class="tab"><button type="button" data-href="#note-2">GlobalExceptionHandler</button></li><li class="tab"><button type="button" data-href="#note-3">RespBeanEnum</button></li><li class="tab"><button type="button" data-href="#note-4">RespBean</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBeanEnum;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RespBeanEnum respBeanEnum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBean;</span><br><span class="line"><span class="keyword">import</span> com.heroxin.seckill.vo.RespBeanEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> RespBean <span class="title function_">ExceptionHandler</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> GlobalException) &#123;</span><br><span class="line">            <span class="type">GlobalException</span> <span class="variable">ex</span> <span class="operator">=</span> (GlobalException) e;</span><br><span class="line">            <span class="keyword">return</span> RespBean.error(ex.getRespBeanEnum());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line">            <span class="type">BindException</span> <span class="variable">ex</span> <span class="operator">=</span> (BindException) e;</span><br><span class="line">            <span class="type">RespBean</span> <span class="variable">respBean</span> <span class="operator">=</span> RespBean.error(RespBeanEnum.BIND_ERROR);</span><br><span class="line">            respBean.setMessage(<span class="string">&quot;参数校验异常：&quot;</span> + ex.getAllErrors().get(<span class="number">0</span>).getDefaultMessage());</span><br><span class="line">            <span class="keyword">return</span> respBean;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> RespBean.error(RespBeanEnum.ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RespBeanEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通用</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;SUCCESS&quot;</span>),</span><br><span class="line">    ERROR(<span class="number">500</span>, <span class="string">&quot;服务端异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//登录模块</span></span><br><span class="line">    LOGIN_ERROR(<span class="number">500210</span>, <span class="string">&quot;用户名或者密码不正确&quot;</span>),</span><br><span class="line">    MOBILE_ERROR(<span class="number">500211</span>, <span class="string">&quot;手机号码格式不正确&quot;</span>),</span><br><span class="line">    BIND_ERROR(<span class="number">500212</span>, <span class="string">&quot;参数校验异常&quot;</span>),</span><br><span class="line">    MOBILE_NOT_EXIST(<span class="number">500213</span>, <span class="string">&quot;手机号码不存在&quot;</span>),</span><br><span class="line">    PASSWORD_UPDATE_FAIL(<span class="number">500214</span>, <span class="string">&quot;更新密码失败&quot;</span>),</span><br><span class="line">    SESSION_ERROR(<span class="number">500215</span>, <span class="string">&quot;用户SESSION不存在&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//秒杀模块</span></span><br><span class="line">    EMPTY_STOCK(<span class="number">500500</span>, <span class="string">&quot;库存不足&quot;</span>),</span><br><span class="line">    REPEATE_ERROR(<span class="number">500501</span>, <span class="string">&quot;该商品每人限购一件&quot;</span>),</span><br><span class="line">    REQUEST_ILLEGAL(<span class="number">500502</span>, <span class="string">&quot;请求非法，请重新尝试&quot;</span>),</span><br><span class="line">    ERROR_CAPTCHA(<span class="number">500503</span>, <span class="string">&quot;验证码错误，请重新输入&quot;</span>),</span><br><span class="line">    ACCESS_LIMIT_REACHED(<span class="number">500504</span>, <span class="string">&quot;访问过于频繁，请稍后重试&quot;</span>),</span><br><span class="line">    <span class="comment">//订单模块5003xx</span></span><br><span class="line">    ORDER_NOT_EXIST(<span class="number">500300</span>, <span class="string">&quot;订单不存在&quot;</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespBean</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(RespBeanEnum.SUCCESS.getCode(), RespBeanEnum.SUCCESS.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">success</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(RespBeanEnum.SUCCESS.getCode(), RespBeanEnum.SUCCESS.getMessage(), object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">error</span><span class="params">(RespBeanEnum respBeanEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(respBeanEnum.getCode(), respBeanEnum.getMessage(), <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RespBean <span class="title function_">error</span><span class="params">(RespBeanEnum respBeanEnum, Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RespBean</span>(respBeanEnum.getCode(), respBeanEnum.getMessage(), object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RespBean</span><span class="params">(<span class="type">long</span> code, String message, Object object)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>InvalidDefinitionException</title>
    <link href="https://heroxin.xyz/2023/10/26/InvalidDefinitionException/"/>
    <id>https://heroxin.xyz/2023/10/26/InvalidDefinitionException/</id>
    <published>2023-10-26T02:30:00.000Z</published>
    <updated>2023-10-26T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><div class="note danger simple"><p>com.fasterxml.jackson.databind.exc.InvalidDefinitionException</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026162750342.png"></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><div class="note success simple"><p>为报错类添加无参构造方法</p></div><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026163124933.png"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>源代码时要获取 Json 中的返回信息，也就是需要反序列化</p><p><strong>反序列化过程中，它的父类如果没有实现序列化接口，那么将需要提供无参构造函数</strong></p><p>而<code>RespBean</code>并没有实现<code>Serializable</code>接口</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231026164052331.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/mocas_wang/article/details/107621010">java序列化与反序列化全讲解</a></p><p><a href="%5Bcom.fasterxml.jackson.databind.exc.InvalidDefinitionException-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/weixin_43091089/article/details/125201732)">com.fasterxml.jackson.databind.exc.InvalidDefinitionException</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="疑难杂症" scheme="https://heroxin.xyz/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
  </entry>
  
  <entry>
    <title>基于Validation组件自定义注解</title>
    <link href="https://heroxin.xyz/2023/10/25/Validation/"/>
    <id>https://heroxin.xyz/2023/10/25/Validation/</id>
    <published>2023-10-25T02:30:00.000Z</published>
    <updated>2023-10-25T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>@Validation是一套帮助我们继续对传输的参数进行数据校验的注解，通过配置Validation可以轻松优雅的完成对数据的约束检验。</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>在请求方法的参数前面添加@Valid/@Validated注解，表示对该对象模型进行校验</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/doLogin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> RespBean <span class="title function_">doLogin</span><span class="params">(<span class="meta">@Valid</span> LoginVo loginVo,HttpServletResponse response,HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userService.doLogin(loginVo,request,response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在属性上面定义需要的校验规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginVo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>   <span class="comment">// 非空判断</span></span><br><span class="line">    <span class="meta">@IsMobile()</span>  <span class="comment">// 自定义注解，判断是否为合法手机号</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email</span><span class="comment">// 判断邮箱格式是否合法</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><blockquote><p>Validation组件已经提供了非常丰富的校验注解，但是在实际业务中，难免会碰到一些现有注解不足以校验的情况。这时，我们可以考虑自定义Validation注解。</p></blockquote><p><strong>基于 Validation 组件自定义注解 @IsMobile 判断是否为合法手机号</strong></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>新建一个 <code>Annotation</code>类型的类</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231025191705505.png"></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>套用模板：</p><ul><li>更改<code>message</code>内容；</li><li>添加自定义校验规则类，见第三步（<code>IsMobileValidator.class</code>）</li><li>添加自定义方法</li><li>其他的保持不动</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        //  校验规则</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;IsMobileValidator.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> IsMobile &#123;</span><br><span class="line"><span class="comment">//    校验错误时返回的信息(必写)</span></span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;手机号码格式错误&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    自定义的方法</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    约束注解在验证时所属的组别（必写）</span></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    负载（必写）</span></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>添加自定义校验规则类（<code>IsMobileValidator.class</code>）</p><p>实现<code>ConstraintValidator</code></p><p>重写<code>initialize</code> 与<code>isValid</code>方法</p><p><code>initialize</code>初始化方法</p><p><code>isValid</code>方法中实现具体的校验规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.seckill.validator.IsMobile;</span><br><span class="line"><span class="keyword">import</span> org.thymeleaf.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IsMobileValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;IsMobile, String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">mobile_pattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[1]([3-9])[0-9]&#123;9&#125;$&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">contains</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   初始化，参数为 IsMobile中自定义方法返回值，用于检验前的检查</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(IsMobile constraintAnnotation)</span> &#123;</span><br><span class="line">        contains = constraintAnnotation.contains();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String value, ConstraintValidatorContext constraintValidatorContext)</span> &#123;</span><br><span class="line"><span class="comment">//        value 就是业务中被校验的值</span></span><br><span class="line">        <span class="keyword">if</span> (contains) &#123;</span><br><span class="line"><span class="comment">//            如果初始化成功，就进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> mobile_pattern.matcher(value);</span><br><span class="line">            <span class="keyword">return</span> matcher.matches();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>完成以上步骤就可以使用自定义注解了</p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="ValidVS-Validated"><a href="#ValidVS-Validated" class="headerlink" title="@ValidVS@Validated"></a><code>@Valid</code>VS<code>@Validated</code></h2><ol><li>当使用仅是注解字段属性并验证规范，<code>@Validated</code> 和 <code>@Valid</code> 注解的功能是相同的。</li><li>Spring Validation 验证框架提供了 <code>@Validated</code> 注解对参数进行验证，符合<strong>Spring’s JSR-303</strong>规范；而 <code>@Valid</code> 注解是 javax 提供的，符合标准的<strong>JSR-303</strong>规范。</li><li>在注解的使用上，<code>@Validated</code> 注解可以用于类型、方法和参数上；而 <code>@Valid</code> 还可以用于属性之上。</li><li><code>@Validated</code> 注解可以使用分组校验的功能，为同一个对象属性提供不同分组，并根据分组来校验属性参数；而 @Valid 注解不支持分组验证。</li><li><code>@Valid</code> 注解支持嵌套验证，当类的属性是一个复杂对象时，可以使用 <code>@Valid</code> 对该属性对象中的属性同时进行校验；<code>@Validated</code> 并不支持在属性上使用。</li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>使用 <code>Validation</code> 校验异常后，当参数发生异常时，通常可能抛出的为<code>BindException</code>异常、<code>ValidationException</code>异常(或其子类)和<code>MethodArgumentNotValidException</code>异常，可用通过<code>@ControllerAdvice</code>+<code>@ExceptionHandler</code>来全局处理异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.FieldError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidationException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseStatus(code = HttpStatus.BAD_REQUEST)</span></span><br><span class="line"><span class="meta">@ExceptionHandler(value = &#123;BindException.class, ValidationException.class, MethodArgumentNotValidException.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleParameterVerificationException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">log.error(<span class="string">&quot; handleParameterVerificationException has been invoked&quot;</span>, e);</span><br><span class="line">Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">resultMap.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;100001&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> MethodArgumentNotValidException) &#123;</span><br><span class="line"><span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> ((MethodArgumentNotValidException) e).getBindingResult();</span><br><span class="line"><span class="comment">// getFieldError获取的是第一个不合法的参数(P.S.如果有多个参数不合法的话)</span></span><br><span class="line"><span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> bindingResult.getFieldError();</span><br><span class="line"><span class="keyword">if</span> (fieldError != <span class="literal">null</span>) &#123;</span><br><span class="line">msg = fieldError.getDefaultMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindException) &#123;</span><br><span class="line"><span class="comment">// getFieldError获取的是第一个不合法的参数(P.S.如果有多个参数不合法的话)</span></span><br><span class="line"><span class="type">FieldError</span> <span class="variable">fieldError</span> <span class="operator">=</span> ((BindException) e).getFieldError();</span><br><span class="line"><span class="keyword">if</span> (fieldError != <span class="literal">null</span>) &#123;</span><br><span class="line">msg = fieldError.getDefaultMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConstraintViolationException) &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ConstraintViolationException的e.getMessage()形如</span></span><br><span class="line"><span class="comment"> *     &#123;方法名&#125;.&#123;参数名&#125;: &#123;message&#125;</span></span><br><span class="line"><span class="comment"> *  这里只需要取后面的message即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">msg = e.getMessage();</span><br><span class="line"><span class="keyword">if</span> (msg != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">lastIndex</span> <span class="operator">=</span> msg.lastIndexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (lastIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">msg = msg.substring(lastIndex + <span class="number">1</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// ValidationException 的其它子类异常</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">msg = <span class="string">&quot;处理参数时异常&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">resultMap.put(<span class="string">&quot;msg&quot;</span>, msg);</span><br><span class="line"><span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/m0_49496327/article/details/124121696">SpringBoot怎么使用Validation校验参数,看完你就会了@</a></p><p><a href="https://blog.csdn.net/justry_deng/article/details/86571671">SpringBoot使用Validation校验参数</a></p><p><a href="https://www.bilibili.com/video/BV1sf4y1L7KE?p=10">自定义注解参数校验</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="validation" scheme="https://heroxin.xyz/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>算法图解</title>
    <link href="https://heroxin.xyz/2023/10/23/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
    <id>https://heroxin.xyz/2023/10/23/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/</id>
    <published>2023-10-23T02:30:00.000Z</published>
    <updated>2023-10-23T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h1><p>（1）递归程序往往简洁易懂，但占用较大空间。递归层数过大会造成系统堆栈溢出。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（2）图是表示多对多关系的数据结构。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（3）Depth First Search on a graph uses Stack structure for its implementation.</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（4）只有当局部最优跟全局最优解一致的时候，贪心法才能给出正确的解。</p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（5）令S为活动选择问题（Activity Selection Problem）中所有活动的集合。则一定存在S的某个最大相容活动子集是包含了最早结束的活动<em>a</em></p><ul><li><input checked="" disabled="" type="checkbox"> T       </li></ul><ul><li><input disabled="" type="checkbox"> F</li></ul><p>（6）哈夫曼编码是一种最优的前缀码。对一个给定的字符集及其字符频率，其哈夫曼编码不一定是唯一的，但是每个字</p><p>符的哈夫曼码的<strong>长度</strong>一定是唯一的。</p><ul><li><input disabled="" type="checkbox"> T       </li></ul><ul><li><input checked="" disabled="" type="checkbox"> F</li></ul><h1 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h1><p>若某线性表最常用的操作是在表尾进行插入和删除，则利用哪种存储方式最合适？</p><div class="note success simple"><p>数组</p></div><p>下列对顺序存储的有序表（长度为 <em>n</em>）实现给定操作的算法中，平均时间复杂度为 <em>O</em>(1) 的是：</p><div class="note success simple"><p>获取第 <em>i</em>（1≤<em>i</em>≤<em>n</em>）个元素的算法</p></div><p>线性表L=（a1, a2 ,……，a100 ）用一维数组存储。删除线性表中的元素a50,需要移动元素的个数是（ ）。</p><div class="note success simple"><p>50</p></div><p>顺序表中第1个元素的存储地址是2000，每个元素的长度为4，则第5个元素的地址是（ ）</p><div class="note success simple"><p>2016</p></div><p>To run binary search in a sorted sequencial list of 600 elements, the maximum number of comparisons is:</p><div class="note success simple"><p>10</p></div><p>设 0≤<em>i</em>,<em>k</em>&lt;<em>n</em>，下面这段代码的时间复杂度是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (i&gt;k) &#123;</span><br><span class="line">    for (j=i; j&lt;n; j++)</span><br><span class="line">        a[j] = a[j-k]+1;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    for (j=i; j&gt;0; j--)</span><br><span class="line">        a[j] = a[k-j]+2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note success simple"><p>O(n)</p></div><p>下列程序段的时间复杂度是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int  sum = 0;</span><br><span class="line">for(int i=1;i&lt;n;i*=2)</span><br><span class="line">    for(int j=0;j&lt;i;j++)</span><br><span class="line">        sum++;</span><br></pre></td></tr></table></figure><div class="note success simple"><p>O(n)</p></div><p>快速排序算法是根据（ ）思想设计的算法。</p><div class="note success simple"><p>分治算法</p></div><p>（）关于分治法描述<strong>不正确</strong>的是：</p><div class="note success simple"><p>随机生成100个整数并存放在一个数组中，然后从中指定一个整数，则可用二分搜索算法在<em>O</em>(<em>l<strong>o</strong>g**n</em>)的时间内找到该整数。</p></div><p>具有n个结点的图，为了存储结点对之间的关系，可采用（ ）大小的矩阵。</p><div class="note success simple"><p>n * n</p></div><p>一个有n个顶点的简单有向图最多有 （ ） 条边</p><div class="note success simple"><p>n * (n - 1)</p></div><p>图的广度优先遍历需要借助的数据结构是</p><div class="note success simple"><p>队列</p></div><p>已知图的邻接表如下图所示，则从顶点A出发按广度优先遍历的结果是（ ）。</p><p><img src="https://images.ptausercontent.com/7cdc75b4-f301-4a9b-bb03-094f4830c217.png"></p><div class="note success simple"><p>ABCEDF</p></div><p>给定一个图的邻接矩阵如下，则从V1出发的宽度优先遍历序列（BFS，有多种选择时小标号优先）是：</p><p><img src="https://images.ptausercontent.com/165b8021-8357-409c-9ba9-b9efa4a88265.JPG"></p><div class="note success simple"><p>V1, V2, V3, V4, V5, V6, V7, V9, V8, V10</p></div><p>以下算法的功能是（）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void  graph1( adjmatrix GA, int i, int n, int *visited)</span><br><span class="line">&#123;</span><br><span class="line">   int k, j; Queue q;</span><br><span class="line">   cout&lt;&lt;i&lt;&lt;‘ ‘;   visited[i]= 1;</span><br><span class="line">   InitQueue( q);</span><br><span class="line">   EnQueue (q, i);</span><br><span class="line">   while ( !EmptyQueue(q) ) &#123;</span><br><span class="line">       k= OutQueue (q);</span><br><span class="line">       for( j=0; j&lt;n; j++) &#123;</span><br><span class="line">            if ( GA[k][j] != 0 &amp;&amp; GA[k][j] != MaxValue &amp;&amp; !visited[j] ) &#123;</span><br><span class="line">               cout&lt;&lt;j&lt;&lt;‘ ‘;  visited[j] = 1;</span><br><span class="line">               EnQueue (q, j);</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note success simple"><p>从顶点 i 出发进行广度优先遍历</p></div><p>图的广度优先遍历类似于二叉树的：</p><div class="note success simple"><p>层次遍历</p></div><p>在图中自c点开始进行广度优先遍历算法可能得到的结果为：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20231023130945384.png"></p><div class="note success simple"><p>c,f,a,d,e,b</p></div><p>对下图从顶点C出发进行深度优先搜索，哪个是错误的搜索序列？</p><p><img src="https://images.ptausercontent.com/ecb0590d-b6e7-4b90-b966-7619e4244e77.JPG"></p><div class="note success simple"><p>CDABEHFG</p></div><p>The following graph has Euler circuits. If the depth-first search is used to find an Euler circuit by concatenating paths, which sequence of the following is incorrect?</p><p><img src="https://images.ptausercontent.com/956b608a-c6ee-4acd-bcdc-d8d6ee2b9afa.png"></p><div class="note success simple"><p>5,3,5,4,2,5,6,1,5</p></div><p>图的深度优先遍历类似于二叉树的：</p><div class="note success simple"><p>先序遍历</p></div><p>下列说法不正确的是：</p><div class="note success simple"><p>图的深度遍历不适用于有向图</p></div><p>有向网如图所示，试用迪杰斯特拉算法求出从顶点a到其他各顶点间的最短路径，各顶点依次被确定的顺序为（ ）</p><p><img src="https://images.ptausercontent.com/7946021b-63bb-4a57-9ead-2f60967d82ff.png"></p><div class="note success simple"><p>a,c,f,e,d,g,b</p></div><p>使用 Dijkstra 算法求下图中从顶点 1 到其余各顶点的最短路径，将当前找到的从顶点 1 到顶点 2、3、4、5 的最短路径长度保存在数组 dist 中，求出第二条最短路径后，dist 中的内容更新为：</p><p><img src="https://images.ptausercontent.com/57b88fca-1a65-47b9-ac88-4d188fb92ede.png"></p><div class="note success simple"><p>21、3、14、6</p></div><p>使用迪杰斯特拉（Dijkstra）算法求下图中从顶点1到其他各顶点的最短路径，依次得到的各最短路径的目标顶点是：</p><p><img src="https://images.ptausercontent.com/ad667c00-6889-433b-bdf2-b1d9a96bec1e.JPG"></p><div class="note success simple"><p>6, 7, 5, 3, 2, 4</p></div><p>数据结构中Dijkstra算法用来解决哪个问题？</p><div class="note success simple"><p>最短路径</p></div><p>我们用一个有向图来表示航空公司所有航班的航线。下列哪种算法最适合解决找给定两城市间最经济的飞行路线问题？</p><div class="note success simple"><p>Dijkstra算法</p></div><h1 id="函数题"><a href="#函数题" class="headerlink" title="函数题"></a>函数题</h1><h2 id="递归实现指数函数"><a href="#递归实现指数函数" class="headerlink" title="递归实现指数函数"></a>递归实现指数函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">calc_pow</span><span class="params">( <span class="type">double</span> x, <span class="type">int</span> n )</span>&#123;</span><br><span class="line">    <span class="type">double</span> fact=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        calc_pow(x, n<span class="number">-1</span>);c</span><br><span class="line">        fact=<span class="built_in">pow</span>(x, n);  </span><br><span class="line">        <span class="keyword">return</span> fact;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="递归计算P函数"><a href="#递归计算P函数" class="headerlink" title="递归计算P函数"></a>递归计算P函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> <span class="title function_">P</span><span class="params">( <span class="type">int</span> n, <span class="type">double</span> x )</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((<span class="number">2</span>*n<span class="number">-1</span>)*P(n<span class="number">-1</span>,x)-(n<span class="number">-1</span>)*P(n<span class="number">-2</span>,x))/n;c</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="邻接表存储图的广度优先遍历"><a href="#邻接表存储图的广度优先遍历" class="headerlink" title="邻接表存储图的广度优先遍历"></a>邻接表存储图的广度优先遍历</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFS</span> <span class="params">( LGraph Graph, Vertex S, <span class="type">void</span> (*Visit)(Vertex) )</span>&#123;</span><br><span class="line">    Visit(S);</span><br><span class="line">    Visited[S] = <span class="literal">true</span>;</span><br><span class="line">    Vertex <span class="built_in">queue</span>[<span class="number">105</span>];</span><br><span class="line">    <span class="type">int</span> front = <span class="number">0</span>, rear = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>[rear++] = S;</span><br><span class="line">    PtrToAdjVNode p;</span><br><span class="line">    <span class="keyword">while</span>(front &lt; rear)&#123;</span><br><span class="line">        Vertex x = <span class="built_in">queue</span>[front++];</span><br><span class="line">        p = Graph-&gt;G[x].FirstEdge;</span><br><span class="line">        <span class="keyword">while</span>(p)&#123;</span><br><span class="line">            Vertex v = p-&gt;AdjV;</span><br><span class="line">            <span class="keyword">if</span>(!Visited[v])&#123;</span><br><span class="line">                Visit(v);</span><br><span class="line">                Visited[v] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">queue</span>[rear++] = v;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p-&gt;Next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="猜数字-交互版"><a href="#猜数字-交互版" class="headerlink" title="猜数字-交互版"></a>猜数字-交互版</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ir.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>, r = n;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">out.println(mid);</span><br><span class="line">out.flush();</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> ir.next();</span><br><span class="line"><span class="keyword">if</span>(s.equals(<span class="string">&quot;&lt;&quot;</span>)) &#123;</span><br><span class="line">r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">l = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">&quot;! &quot;</span> + r);</span><br><span class="line">out.flush();;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="两个有序序列的中位数"><a href="#两个有序序列的中位数" class="headerlink" title="两个有序序列的中位数"></a>两个有序序列的中位数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> a[N],b[N],c[<span class="number">2</span>*N];</span><br><span class="line">    <span class="type">int</span> n,i,ai=<span class="number">0</span>,bi=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;<span class="number">2</span>*n; i++) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (a[ai]&lt;=b[bi]) &#123;</span><br><span class="line">            c[i]=a[ai];</span><br><span class="line">            ai++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            c[i]=b[bi];</span><br><span class="line">            bi++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,c[(<span class="number">2</span>*n<span class="number">-1</span>)/<span class="number">2</span>]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组循环左移"><a href="#数组循环左移" class="headerlink" title="数组循环左移"></a>数组循环左移</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">   <span class="type">int</span> a[n];</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i =<span class="number">0</span>;i&lt;m%n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> p = a[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> j =<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">       &#123;</span><br><span class="line">           a[j<span class="number">-1</span>] = a[j];</span><br><span class="line">       &#125;</span><br><span class="line">       a[n<span class="number">-1</span>] = p;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(i == <span class="number">0</span>)</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,a[i]);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merging-Linked-Lists"><a href="#Merging-Linked-Lists" class="headerlink" title="Merging Linked Lists"></a>Merging Linked Lists</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> head1, head2, n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;head1, &amp;head2, &amp;n);</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>, pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; list;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; l1, l2, ans;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> address, num, next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;address, &amp;num, &amp;next);</span><br><span class="line"></span><br><span class="line">        list[address].first = num;</span><br><span class="line">        list[address].second = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> tmp = head1;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="number">-1</span>)&#123;</span><br><span class="line">        l1.<span class="built_in">emplace_back</span>(tmp, list[tmp].first);</span><br><span class="line">        tmp = list[tmp].second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = head2;</span><br><span class="line">    <span class="keyword">while</span>(tmp != <span class="number">-1</span>)&#123;</span><br><span class="line">        l2.<span class="built_in">emplace_back</span>(tmp, list[tmp].first);</span><br><span class="line">        tmp = list[tmp].second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> len1 = l1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> len2 = l2.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// first 是地址，second 是数值</span></span><br><span class="line">    <span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line">        <span class="type">int</span> pos1 = <span class="number">0</span>, pos2 = len2 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos2 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2--]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos1 &lt; len1) ans.<span class="built_in">push_back</span>(l1[pos1++]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> pos2 = <span class="number">0</span>, pos1 = len1 - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos1 &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">            ans.<span class="built_in">push_back</span>(l1[pos1--]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(pos2 &lt; len2) ans.<span class="built_in">push_back</span>(l2[pos2++]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; ans.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == ans.<span class="built_in">size</span>() - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%05d %d -1\n&quot;</span>, ans[i].first, ans[i].second);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%05d %d %05d\n&quot;</span>, ans[i].first, ans[i].second, ans[i + <span class="number">1</span>].first);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="统计工龄"><a href="#统计工龄" class="headerlink" title="统计工龄"></a>统计工龄</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, age, N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">51</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= <span class="number">50</span>;i++)</span><br><span class="line">        arr[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">        arr[age] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n,k,arr[N],i,j,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;arr[i]);</span><br><span class="line">    &#125;<span class="comment">//输入数据</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;k;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                t=arr[i];</span><br><span class="line">                arr[i]=arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//交换数值</span></span><br><span class="line">    &#125;<span class="comment">//排序次数</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[i]);</span><br><span class="line">    &#125;<span class="comment">//输出数组</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,arr[n<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数分解为若干项之和"><a href="#整数分解为若干项之和" class="headerlink" title="整数分解为若干项之和"></a>整数分解为若干项之和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> MAX_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> items[MAX_SIZE];</span><br><span class="line"><span class="type">int</span> count;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(<span class="type">int</span> remain_value, <span class="type">int</span> start, <span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(remain_value!=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=start; i&lt;=remain_value; i++) &#123;</span><br><span class="line">items[num] = i;</span><br><span class="line"><span class="built_in">f</span>(remain_value-i, i, num+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d=%d&quot;</span>,N,items[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;num; j++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+%d&quot;</span>,items[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(count%<span class="number">4</span>==<span class="number">0</span>) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(count%<span class="number">4</span>!=<span class="number">0</span>&amp;&amp;items[<span class="number">0</span>]!=N)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">count=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="built_in">f</span>(N, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="输出全排列"><a href="#输出全排列" class="headerlink" title="输出全排列"></a>输出全排列</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">void</span> <span class="title function_">arrange</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,num;</span><br><span class="line"><span class="keyword">if</span>(m==n)&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(num=<span class="number">1</span>;num&lt;=n;num++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line"><span class="keyword">if</span>(a[j]==num)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(j==m)&#123;</span><br><span class="line">a[m]=num;</span><br><span class="line">arrange(a, n, m+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    arrange(a, n, <span class="number">0</span>); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哪两个点之间的距离最近"><a href="#哪两个点之间的距离最近" class="headerlink" title="哪两个点之间的距离最近"></a>哪两个点之间的距离最近</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//参考的张明阳的代码</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">double</span> x[n+<span class="number">1</span>];</span><br><span class="line">    <span class="type">double</span> y[n+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d1;</span><br><span class="line">    <span class="type">int</span> d2;</span><br><span class="line">    <span class="type">double</span> _min=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="type">double</span> t=<span class="built_in">sqrt</span>((x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">t</span>&lt;_min)&#123;</span><br><span class="line">                _min=t;</span><br><span class="line">                d1=i;</span><br><span class="line">                d2=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((x[d1]+y[d1])&gt;(x[d2]+y[d2]))&#123;</span><br><span class="line">        <span class="type">int</span> t=d1;</span><br><span class="line">        d1=d2;</span><br><span class="line">        d2=t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;(%.2lf,%.2lf),(%.2lf,%.2lf),miniDist=%.3lf&quot;</span>,x[d1],y[d1],x[d2],y[d2],_min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="士兵排列"><a href="#士兵排列" class="headerlink" title="士兵排列"></a>士兵排列</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max 10000</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Compare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* e1, <span class="type">const</span> <span class="type">void</span>* e2)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)*((<span class="type">int</span>*)e1) - (<span class="type">int</span>)*((<span class="type">int</span>*)e2);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n,<span class="type">int</span> mid)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">sum += <span class="built_in">abs</span>(a[i]-mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x[Max] = &#123; <span class="number">0</span> &#125;, y[Max] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x[i], &amp;y[i]);</span><br><span class="line">&#125;</span><br><span class="line">qsort(x, n, <span class="keyword">sizeof</span>(x[<span class="number">0</span>]), Compare);</span><br><span class="line">qsort(y, n, <span class="keyword">sizeof</span>(y[<span class="number">0</span>]), Compare);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">x[i] = x[i] - i;</span><br><span class="line">&#125;</span><br><span class="line">qsort(x, n, <span class="keyword">sizeof</span>(x[<span class="number">0</span>]), Compare);</span><br><span class="line"><span class="type">int</span> Y_mid = y[n / <span class="number">2</span>], X_mid = x[n / <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> y_sum = <span class="number">0</span>, x_sum = <span class="number">0</span>;</span><br><span class="line">y_sum = add(y, n, Y_mid);</span><br><span class="line">x_sum = add(x, n, X_mid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x_sum + y_sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="词频统计"><a href="#词频统计" class="headerlink" title="词频统计"></a>词频统计</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">words = <span class="string">&quot;&quot;</span>.join([line <span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin])</span><br><span class="line">words = re.<span class="built_in">compile</span>(<span class="string">r&quot;\w+&quot;</span>, re.I).findall(words.lower().split(<span class="string">&#x27;#&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">words = [each.strip() <span class="keyword">for</span> each <span class="keyword">in</span> words]</span><br><span class="line">words = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> each: each[<span class="number">0</span>:<span class="number">15</span>] <span class="keyword">if</span> <span class="built_in">len</span>(each) &gt; <span class="number">15</span> <span class="keyword">else</span> each, words))</span><br><span class="line">counter = collections.Counter(words)</span><br><span class="line">rank = <span class="built_in">sorted</span>(counter.items(), key=<span class="keyword">lambda</span> each: (-each[<span class="number">1</span>], each[<span class="number">0</span>]), reverse=<span class="literal">False</span>) </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(rank)) </span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> rank[<span class="number">0</span>:<span class="built_in">int</span>(<span class="number">0.1</span>*<span class="built_in">len</span>(rank))]: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(each[<span class="number">1</span>], each[<span class="number">0</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打印学生选课清单"><a href="#打印学生选课清单" class="headerlink" title="打印学生选课清单"></a>打印学生选课清单</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i, age, N;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">51</span>];</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= <span class="number">50</span>;i++)</span><br><span class="line">        arr[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;age);</span><br><span class="line">        arr[age] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt;= <span class="number">50</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d:%d\n&quot;</span>, i, arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">classList</span>&#123;</span></span><br><span class="line"><span class="type">int</span> cid;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">classList</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;CL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">classTable</span>&#123;</span></span><br><span class="line">CL* head;</span><br><span class="line">CL* tail;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line">&#125;CT;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">CT* st[<span class="number">26</span>*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//hash </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">hs</span><span class="params">(<span class="type">char</span> s[])</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>)((s[<span class="number">3</span>]-<span class="string">&#x27;0&#x27;</span>)+(s[<span class="number">2</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">10</span>+(s[<span class="number">1</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">26</span>*<span class="number">10</span>+(s[<span class="number">0</span>]-<span class="string">&#x27;A&#x27;</span>)*<span class="number">26</span>*<span class="number">26</span>*<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">CT* t=(CT*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CT));</span><br><span class="line">t-&gt;head=(CL*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CL));</span><br><span class="line">t-&gt;head-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">t-&gt;cnt=<span class="number">0</span>;</span><br><span class="line">t-&gt;tail=t-&gt;head;</span><br><span class="line">st[i]=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="type">int</span> bn,stn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;bn,&amp;stn);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;stn;j++)&#123;</span><br><span class="line"><span class="type">char</span> sid[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="type">int</span> id=hs(sid);</span><br><span class="line">CL* t=(CL*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CL));</span><br><span class="line">t-&gt;cid=bn;</span><br><span class="line">t-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">st[id]-&gt;tail-&gt;next=t;</span><br><span class="line">st[id]-&gt;tail=st[id]-&gt;tail-&gt;next;</span><br><span class="line">(st[id]-&gt;cnt)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">char</span> sid[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,sid);</span><br><span class="line"><span class="type">int</span> id=hs(sid);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,st[id]-&gt;cnt);</span><br><span class="line">CL* p=st[id]-&gt;head-&gt;next;</span><br><span class="line"><span class="comment">//桶排序 </span></span><br><span class="line"><span class="type">int</span>* bk=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*(k+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line">bk[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(p)&#123;</span><br><span class="line">bk[p-&gt;cid]=<span class="number">1</span>;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(bk[i]==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(bk); </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="深入虎穴"><a href="#深入虎穴" class="headerlink" title="深入虎穴"></a>深入虎穴</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">List&lt;Integer&gt;[] g = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.setAll(g, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"><span class="type">int</span>[] inDeg = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">x = in.nextInt();</span><br><span class="line">g[i].add(x);</span><br><span class="line">inDeg[x]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(inDeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">s = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">q.offer(s);</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line">x = q.poll();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line">q.offer(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.print(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line"><span class="type">long</span>[] tree;</span><br><span class="line"><span class="type">long</span>[] tag;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SegmentTree</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">N = n;</span><br><span class="line">tree = <span class="keyword">new</span> <span class="title class_">long</span>[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">tag = <span class="keyword">new</span> <span class="title class_">long</span>[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line">build(a, <span class="number">1</span>, <span class="number">1</span>, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ls</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rs</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(pl == pr) &#123;</span><br><span class="line">tree[p] = a[pl - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">build(a, ls(p), pl, mid);</span><br><span class="line">build(a, rs(p), mid + <span class="number">1</span>, pr);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addTag</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">long</span> val)</span> &#123;</span><br><span class="line">tree[p] = (pr - pl + <span class="number">1</span>) * val;</span><br><span class="line">tag[p] = val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_down</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(tag[p] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line">addTag(ls(p), pl, mid, tag[p]);</span><br><span class="line">addTag(rs(p), mid + <span class="number">1</span>, pr, tag[p]);</span><br><span class="line">tag[p] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push_up</span><span class="params">(<span class="type">int</span> p)</span> &#123;</span><br><span class="line">tree[p] = tree[ls(p)] + tree[rs(p)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">long</span> val)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= pl &amp;&amp; pr &lt;= r) &#123;</span><br><span class="line">addTag(p, pl, pr, val);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">push_down(p, pl, pr);</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) update(ls(p), pl, mid, l, r, val);</span><br><span class="line"><span class="keyword">if</span>(mid &lt; r) update(rs(p), mid + <span class="number">1</span>, pr, l, r, val);</span><br><span class="line">push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> pl, <span class="type">int</span> pr, <span class="type">int</span> l, <span class="type">int</span> r)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= pl &amp;&amp; pr &lt;= r) &#123;</span><br><span class="line"><span class="keyword">return</span> tree[p];</span><br><span class="line">&#125;</span><br><span class="line">push_down(p, pl, pr);</span><br><span class="line"><span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> pl + pr &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="type">long</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= mid) res += query(ls(p), pl, mid, l, r);</span><br><span class="line"><span class="keyword">if</span>(mid &lt; r) res += query(rs(p), mid + <span class="number">1</span>, pr, l, r);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六度空间"><a href="#六度空间" class="headerlink" title="六度空间"></a>六度空间</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> List&lt;Integer&gt;[] g;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">n = in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">g = <span class="keyword">new</span> <span class="title class_">List</span>[n + <span class="number">1</span>];</span><br><span class="line">Arrays.setAll(g, e -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">u</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">g[u].add(v);</span><br><span class="line">g[v].add(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span>[] ans = <span class="keyword">new</span> <span class="title class_">double</span>[n + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans[i] = <span class="number">100.0</span> * bfs(i) / n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">out.printf(<span class="string">&quot;%d: %.2f&quot;</span>, i, ans[i]);</span><br><span class="line">out.println(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">bfs</span><span class="params">(<span class="type">int</span> e)</span> &#123;</span><br><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"><span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">q.offer(e);</span><br><span class="line">vis[e] = <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">1</span>, dis = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty()) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> q.size();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> q.poll();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y : g[x]) &#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[y]) &#123;</span><br><span class="line">vis[y] = <span class="literal">true</span>;</span><br><span class="line">cnt++;</span><br><span class="line">q.offer(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dis++;</span><br><span class="line"><span class="keyword">if</span>(dis &gt; <span class="number">6</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="功夫传人"><a href="#功夫传人" class="headerlink" title="功夫传人"></a>功夫传人</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 100005</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> winners[MAX];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;peoples[MAX];</span><br><span class="line">    <span class="type">int</span> k, id, x, N;</span><br><span class="line">    <span class="type">double</span> r,Z, sum=<span class="number">0.0</span>;</span><br><span class="line">    cin &gt;&gt; N &gt;&gt; Z &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        cin &gt;&gt; k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">            cin &gt;&gt; id;</span><br><span class="line">            peoples[i].<span class="built_in">push_back</span>(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            winners[i] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(N==<span class="number">1</span>)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">int</span>(winners[<span class="number">0</span>]*Z);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">     <span class="type">int</span> level=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())<span class="comment">//bfs层次遍历</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">size</span>();</span><br><span class="line">        level++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> top=q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;peoples[top].<span class="built_in">size</span>();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(peoples[top][j]);</span><br><span class="line">                <span class="type">double</span> temp=Z*winners[peoples[top][j]]*<span class="built_in">pow</span>(<span class="number">1</span>-r*<span class="number">0.01</span>,level);</span><br><span class="line">                sum+=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">cout &lt;&lt; <span class="built_in">int</span>(sum);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列出连通集"><a href="#列出连通集" class="headerlink" title="列出连通集"></a>列出连通集</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLOSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> vertex)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> vertex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">getInsideNext</span><span class="params">(<span class="type">int</span> y)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> matrix[<span class="number">12</span>][<span class="number">12</span>];</span><br><span class="line"><span class="type">int</span> isVisited[<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> e;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;e);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">            matrix[i][j]=CLOSE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> y,x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;e; i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;y,&amp;x);</span><br><span class="line">        matrix[y][x]=<span class="number">1</span>;</span><br><span class="line">        matrix[x][y]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            DFS(i);</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isVisited[j])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">12</span>; i++)</span><br><span class="line">        isVisited[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[i])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;&#123;&quot;</span>);</span><br><span class="line">            BFS(i);</span><br><span class="line">            <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!isVisited[j])&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot; &#125;\n&quot;</span>);</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot; &#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getInsideNext</span><span class="params">(<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;n; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[y][x]!=CLOSE)&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getNext</span><span class="params">(<span class="type">int</span> y,<span class="type">int</span> x)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x+<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(matrix[y][i]!=CLOSE) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(<span class="type">int</span> vertex)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,vertex);</span><br><span class="line">    isVisited[vertex]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> w=getInsideNext(vertex);</span><br><span class="line">    <span class="keyword">while</span>(w!=<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isVisited[w])&#123;</span><br><span class="line">            DFS(w);</span><br><span class="line">        &#125;</span><br><span class="line">        w=getNext(vertex,w);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//广度优先遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(<span class="type">int</span> vertex)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!isVisited[vertex])</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,vertex);</span><br><span class="line">    isVisited[vertex]=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> da[<span class="number">12</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>; x&lt;n; x++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix[vertex][x]!=CLOSE &amp;&amp; !isVisited[x])&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot; %d&quot;</span>,x);</span><br><span class="line">            da[size++]=x;</span><br><span class="line">            isVisited[x]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">        BFS(da[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="哈利波特的考试"><a href="#哈利波特的考试" class="headerlink" title="哈利波特的考试"></a>哈利波特的考试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="comment">//static Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> n;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span>[][] dis;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">INF</span> <span class="operator">=</span> (<span class="type">int</span>) <span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">n = in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">dis = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) Arrays.fill(dis[i], INF); <span class="comment">// 避免溢出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="type">int</span> u, v, w;</span><br><span class="line">u = in.nextInt() - <span class="number">1</span>;</span><br><span class="line">v = in.nextInt() - <span class="number">1</span>;</span><br><span class="line">w = in.nextInt();</span><br><span class="line">dis[u][v] = dis[v][u] = w;</span><br><span class="line">dis[u][u] = dis[v][v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">floyd();</span><br><span class="line"><span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="number">0</span>, distance = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">mx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j : dis[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(j != INF) mx = Math.max(mx, j);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">out.print(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mx &lt; distance) &#123;</span><br><span class="line">distance = mx;</span><br><span class="line">pos = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.print(pos + <span class="string">&quot; &quot;</span> + distance);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">floyd</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">dis[i][j] = Math.min(dis[i][j], dis[i][k] + dis[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装箱问题"><a href="#装箱问题" class="headerlink" title="装箱问题"></a>装箱问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="comment">//static Scanner sc = new Scanner(System.in);</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>) solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">List&lt;Integer&gt; box = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">v</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; box.size(); j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(box.get(j) &gt;= v) &#123;</span><br><span class="line">box.set(j, box.get(j) - v);</span><br><span class="line">idx = j + <span class="number">1</span>;</span><br><span class="line">f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f) &#123;</span><br><span class="line">box.add(<span class="number">100</span> - v);</span><br><span class="line">idx = box.size();</span><br><span class="line">&#125;</span><br><span class="line">out.println(v + <span class="string">&quot; &quot;</span> + idx);</span><br><span class="line">&#125;</span><br><span class="line">out.println(box.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="月饼"><a href="#月饼" class="headerlink" title="月饼"></a>月饼</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">InputReader</span> <span class="variable">ir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputReader</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">Read</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">static</span> <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">T</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//T = in.nextInt();</span></span><br><span class="line"><span class="keyword">while</span>(T-- &gt; <span class="number">0</span>)solve();</span><br><span class="line">out.flush();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">D</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">mk[] cake = <span class="keyword">new</span> <span class="title class_">mk</span>[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cake[i] = <span class="keyword">new</span> <span class="title class_">mk</span>();</span><br><span class="line">cake[i].storage = in.nextDouble();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">cake[i].sale = in.nextDouble();</span><br><span class="line">cake[i].unit_price = cake[i].sale / cake[i].storage;</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(cake, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;mk&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(mk a, mk b)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(a.unit_price &lt; b.unit_price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a.unit_price &gt; b.unit_price) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(mk i : cake) &#123;</span><br><span class="line"><span class="keyword">if</span>(i.storage &lt; D) &#123;</span><br><span class="line">D -= i.storage;</span><br><span class="line">sum += i.sale;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">sum += D * i.unit_price;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">out.printf(<span class="string">&quot;%.2f&quot;</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mk</span>&#123;</span><br><span class="line"><span class="type">double</span> storage, sale;</span><br><span class="line"><span class="type">double</span> unit_price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputReader</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">buf_size</span> <span class="operator">=</span> <span class="number">65536</span>;</span><br><span class="line">BufferedReader br;</span><br><span class="line">StringTokenizer st;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">InputReader</span><span class="params">(InputStream in)</span>&#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(in), buf_size);</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="keyword">while</span>(!st.hasMoreTokens()) &#123;</span><br><span class="line">st = <span class="keyword">new</span> <span class="title class_">StringTokenizer</span>(br.readLine());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> st.nextToken();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Double.parseDouble(next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextLong</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> Long.parseLong(next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span>&#123;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line"><span class="type">StreamTokenizer</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StreamTokenizer</span>(br);</span><br><span class="line"><span class="type">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">next</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.sval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">nextLine</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"><span class="keyword">return</span> br.readLine();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> (<span class="type">int</span>) st.nval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">s = st.nextToken();</span><br><span class="line"><span class="keyword">return</span> st.nval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="主观题"><a href="#主观题" class="headerlink" title="主观题"></a>主观题</h1><h2 id="一笔画"><a href="#一笔画" class="headerlink" title="一笔画"></a>一笔画</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[] deg = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.nextInt() - <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> in.nextInt() - <span class="number">1</span>;</span><br><span class="line">            deg[x]++;</span><br><span class="line">            deg[y]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : deg) <span class="keyword">if</span>((i &amp; <span class="number">1</span>) == <span class="number">1</span>) cnt++;</span><br><span class="line">        out.print(cnt == <span class="number">0</span> || cnt == <span class="number">2</span> ? <span class="string">&quot;Y&quot;</span> : <span class="string">&quot;N&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式---单例模式</title>
    <link href="https://heroxin.xyz/2023/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://heroxin.xyz/2023/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-06-13T02:30:00.000Z</published>
    <updated>2023-06-13T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><blockquote><p>设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。</p><p>使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p></blockquote><p>设计模式分为三大类（23种）：</p><ul><li>创建模型模式：工厂方法模式、抽象工厂模式、**<u>单例模式</u>**、建造者模式、原型模式</li><li>结构型模式：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</li><li>行为型模式：策略模式、模板方法模式、观察者模式、迭代子模式、责任模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</li></ul><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><blockquote><p>单例模式（singleton）：某个类只能生成一个实例，该类提供了一个全局访问点（一个公共方法）供外部获取该实例。</p></blockquote><p>优点：</p><ul><li><p>只有一个实例，节约内存资源，提高系统性能。</p></li><li><p>某些类创建比较频繁，对于一些大型的对象，这是一笔很大的系统开销。</p></li><li><p>省去了new操作符，降低了系统内存的使用频率，减轻GC压力。</p></li><li><p>有些类如交易所的核心交易引擎，控制着交易流程，如果该类可以创建多个的话，系统完全乱了。（比如一个军队出现了多个司令员同时指挥，肯定会乱成一团），所以只有使用单例模式，才能保证核心交易服务器独立控制整个流程。</p></li></ul><p>缺点：</p><ul><li>没有抽象层，不能拓展</li></ul><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 饿汉式</span></span><br><span class="line"><span class="comment">      构造私有：其他类无法调用构造方法创建实例对象</span></span><br><span class="line"><span class="comment">      提供静态成员变量，类型为单例类型，值为私有构造创建的唯一实例</span></span><br><span class="line"><span class="comment">      公有静态方法 getInstance()，方法的实现为返回静态成员变量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton01</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//      防止反射构造单例</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不能重复创建&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton01()：饿汉式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton01</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    防止反序列化构造单例</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton01.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton01.getInstance());</span><br><span class="line">        System.out.println(Singleton01.getInstance());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        反射破坏单例</span></span><br><span class="line">        <span class="comment">//        reflection(Singleton01.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        反序列化破坏单例</span></span><br><span class="line">        <span class="comment">//        serializable(Singleton01.getInstance());</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializable</span><span class="params">(Object instance)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray()));</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化创建实例：&quot;</span> + ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reflection</span><span class="params">(Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : clazz.getDeclaredConstructors()) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;反射创建实例：&quot;</span> + constructor.newInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="饿汉式-—-枚举"><a href="#饿汉式-—-枚举" class="headerlink" title="饿汉式 — 枚举"></a>饿汉式 — 枚举</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 枚举饿汉式</span></span><br><span class="line"><span class="comment">        不怕反射破坏单例，</span></span><br><span class="line"><span class="comment">        不怕反序列化破坏单例，</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton02</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    Singleton02() &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton02()：饿汉式 --- m&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton02 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton02.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton02.getInstance());</span><br><span class="line">        System.out.println(Singleton02.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式</span></span><br><span class="line"><span class="comment">      懒惰式加载，只有在第一次调用时才创建</span></span><br><span class="line"><span class="comment">      在多线程下，会创建多个实例，可以通过加锁来防止</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton03</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton03()：懒汉式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton03</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton03 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//        有值就不重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton03</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton03.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton03.getInstance());</span><br><span class="line">        System.out.println(Singleton03.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式-—-DCL"><a href="#懒汉式-—-DCL" class="headerlink" title="懒汉式 — DCL"></a>懒汉式 — DCL</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式 --- DCL 双检索</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton04</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton04()：懒汉式 -- DCL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton04</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton04 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//        有值就不重复创建</span></span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton04.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton04</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton04.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton04.getInstance());</span><br><span class="line">        System.out.println(Singleton04.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="懒汉式-—-内部类"><a href="#懒汉式-—-内部类" class="headerlink" title="懒汉式 — 内部类"></a>懒汉式 — 内部类</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">代码</button></li><li class="tab"><button type="button" data-href="#note-2">测试</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:03</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 懒汉式 --- 内部类</span></span><br><span class="line"><span class="comment">    对象的创建放在静态代码块中，由 jvm保证线程安全</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton05</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton05</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;private Singleton05()：懒汉式 -- 内部类&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    静态内部类，可以访问外部的私有变量，私有构造</span></span><br><span class="line">    <span class="comment">//    懒惰式加载，在调用时执行类的加载初始化链接</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">Singleton05</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton05</span>();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton05 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//        调用内部类</span></span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">otherMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;otherMethod()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heroxin.singleton;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Author Heroxin</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Create 2023-06-13-15:13</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    @Description:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingleton05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Singleton05.otherMethod();</span><br><span class="line">        System.out.println(<span class="string">&quot;===============&quot;</span>);</span><br><span class="line">        System.out.println(Singleton05.getInstance());</span><br><span class="line">        System.out.println(Singleton05.getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>参考文章：</p><p>​    <a href="https://blog.csdn.net/sugar_no1/article/details/88317950">Java中常用的设计模式</a></p><p>​    <a href="https://www.bilibili.com/video/BV15b4y117RJ/?p=60&spm_id_from=pageDriver&vd_source=58f742b47eee869bcdb1d4967d8bf5f5">单例模式</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Java" scheme="https://heroxin.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 磁盘扩容，vgdisplay 显示为空</title>
    <link href="https://heroxin.xyz/2023/06/06/Centos7_vgdisplay_null/"/>
    <id>https://heroxin.xyz/2023/06/06/Centos7_vgdisplay_null/</id>
    <published>2023-06-06T02:30:00.000Z</published>
    <updated>2023-06-06T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="本文适用情况："><a href="#本文适用情况：" class="headerlink" title="本文适用情况："></a>本文适用情况：</h1><ul><li>配置虚拟机时，分区是自行配置，没有使用默认分区</li><li>使用 vgdisplay 命令，什么也没有显示</li><li>Centos7 64x，根目录分区为 xfs 格式</li></ul><h1 id="扩容磁盘空间"><a href="#扩容磁盘空间" class="headerlink" title="扩容磁盘空间"></a>扩容磁盘空间</h1><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150810153.png"></p><h1 id="查看当前分区信息"><a href="#查看当前分区信息" class="headerlink" title="查看当前分区信息"></a>查看当前分区信息</h1><blockquote><p><strong>可见根目录挂载在 sda3</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145544073.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606151817362.png"></p><h1 id="安装分区工具"><a href="#安装分区工具" class="headerlink" title="安装分区工具"></a>安装分区工具</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install cloud-utils-growpart gdisk -y</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145606881.png"></p><h1 id="卷扩容"><a href="#卷扩容" class="headerlink" title="卷扩容"></a>卷扩容</h1><blockquote><p><strong>3 就是根目录所在分区</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">growpart /dev/sda 3</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145759615.png"></p><blockquote><p><strong>此时，分区大小已经变为调整后的大小</strong></p></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606145857428.png"></p><h1 id="文件系统扩容"><a href="#文件系统扩容" class="headerlink" title="文件系统扩容"></a>文件系统扩容</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">xfs_growfs /</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150005116.png"></p><blockquote><p><strong>扩容成功</strong></p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230606150043589.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p>🖋 <a href="https://blog.csdn.net/qq_40068214/article/details/124812732">解决centos7 根目录扩容vgdisplay数据卷为空不能扩容问题</a></p><p>🖍<a href="https://blog.csdn.net/weixin_43730142/article/details/129067852?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-129067852-blog-124812732.235%5Ev38%5Epc_relevant_sort_base1&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-129067852-blog-124812732.235%5Ev38%5Epc_relevant_sort_base1&utm_relevant_index=3">Linux操作系统之centos7根目录扩容（根目录在sda3 vgdisplay为空）</a></p><p>✏<a href="https://blog.csdn.net/Chen_qi_hai/article/details/108814596">VMware虚拟机扩展磁盘容量</a></p><p>🖌<a href="https://blog.csdn.net/weixin_44295084/article/details/125725574">对VMware已经创建的虚拟机进行磁盘扩容过程以及会遇到的问题</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="安装手册" scheme="https://heroxin.xyz/categories/%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="Linux" scheme="https://heroxin.xyz/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>MD5&amp;MD5加盐</title>
    <link href="https://heroxin.xyz/2023/06/04/MD5&amp;Salt/"/>
    <id>https://heroxin.xyz/2023/06/04/MD5&amp;Salt/</id>
    <published>2023-06-04T02:30:00.000Z</published>
    <updated>2023-06-04T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>👀 MD5 是一种常见的加密方式，常用于加密存储密码。全称为：Message-Digest Algoorithm 5，信息摘要算法</p><p>它具有以下特性：⛏</p><ul><li>压缩性：任意长度的数据，算出的 MD5 值都是固定的</li><li>容易计算：从原数据计算出 MD5 值很容易</li><li>抗修改性：改变原数据后，所得到的 MD5 值都有很大的差别</li><li>强抗碰撞：想找到两个不同的数据，使它们具有相同的 MD5 值是非常困难的。</li></ul><p>综上：<strong>每个数据都对应一个唯一的 MD5 值</strong></p><blockquote><p>例如：123456 的 MD5 值为：e10adc3949ba59abbe56e057f20f883e</p><p>MD5值 e10adc3949ba59abbe56e057f20f883e 对应的原数据为 123456</p></blockquote><p>也就是说，如果知道了 MD5 值，就可以反向推出加密前的数据（应为MD5是唯一的）</p><p>详情请看：<a href="https://www.zhihu.com/question/19790488">彩虹表</a></p><p><u>所以我们就无法单独使用 MD5 来进行数据的加密存储。</u></p><p>MD5 的实现方式有很多种，JDK自带的 MessageDigest 和 Spring 封装好的 DigestUtils</p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">MessageDigest</button></li><li class="tab"><button type="button" data-href="#note-2">DigestUtils</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">messageDigest</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;heroxin&quot;</span>;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;md5&quot;</span>);</span><br><span class="line">        md.update(password.getBytes());</span><br><span class="line">        <span class="type">String</span> <span class="variable">hashedPwd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="number">1</span>, md.digest()).toString(<span class="number">16</span>);</span><br><span class="line">        System.out.println(hashedPwd);</span><br><span class="line">        <span class="comment">//            ec76c5758966b3f63639fd84f524955a</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.digest.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">digestUtils</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> DigestUtils.md5Hex(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="MD5加盐"><a href="#MD5加盐" class="headerlink" title="MD5加盐"></a>MD5加盐</h1><p>为了提高安全性，可以采取加盐的方式。</p><p>就是生成一些随机数与 MD5 值进行组合，这些随机数称为 盐 (salt)</p><p>这样获取到的新字符串是服务解密为原数据的。</p><p>在存储时，数据库同时存储 MD5 值和 salt 值。验证正确性时使用 salt 进行 MD5即可。</p><p>具体的实现可以使用 Spring Security 中的 <strong>BCryptPasswordEncoder</strong></p><blockquote><p>BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥对密码进行加密。SHA系列是<a href="https://so.csdn.net/so/search?q=Hash&spm=1001.2101.3001.7020">Hash</a>算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p><p>详情请看：<a href="https://blog.csdn.net/u012888704/article/details/107406374">BCryptPasswordEncoder</a></p></blockquote><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">加密</button></li><li class="tab"><button type="button" data-href="#note-2">验证</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">bCryptPasswordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> bCryptPasswordEncoder.encode(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">    <span class="comment">//        $2a$10$4Xvl1DviJqS.ggItgMKmTO6JjbGbiX3btz/qdneVkPmNZ.zhO6br2</span></span><br><span class="line">    System.out.println(encode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bCryptPasswordEncoder</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">bc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="comment">//     前者为明文，后者为密文</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> bc.matches(<span class="string">&quot;heroxin&quot;</span>, <span class="string">&quot;$2a$10$4Xvl1DviJqS.ggItgMKmTO6JjbGbiX3btz/qdneVkPmNZ.zhO6br2&quot;</span>);</span><br><span class="line">    <span class="comment">//        true</span></span><br><span class="line">    System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Java" scheme="https://heroxin.xyz/tags/Java/"/>
    
    <category term="Spring" scheme="https://heroxin.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker Registry</title>
    <link href="https://heroxin.xyz/2023/05/30/DockerRegistry/"/>
    <id>https://heroxin.xyz/2023/05/30/DockerRegistry/</id>
    <published>2023-05-30T02:30:00.000Z</published>
    <updated>2023-05-30T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Docker-Registry-本地私有仓库配置"><a href="#Docker-Registry-本地私有仓库配置" class="headerlink" title="Docker Registry 本地私有仓库配置"></a>Docker Registry 本地私有仓库配置</h1><h2 id="查询本机IP"><a href="#查询本机IP" class="headerlink" title="查询本机IP"></a>查询本机IP</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><h2 id="生成自签名证书"><a href="#生成自签名证书" class="headerlink" title="生成自签名证书"></a>生成自签名证书</h2><p>要确保DockerRegistry本地镜像仓库的安全信，还需要一个安全认证证书，来保证其他Docker机器不能随意访问该机器上的本地镜像仓库。（如果已购买证书，就不需要生成了）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/docker/registry</span><br><span class="line">mkdir /usr/local/docker/registry/certs</span><br><span class="line">cd /usr/local/docker/registry/certs/</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -x509 -days 3560 -subj &#x27;/CN=192.168.196.101:5000/&#x27; -nodes -newkey rsa:2048 -keyout domain.key -out domain.crt</span><br></pre></td></tr></table></figure><blockquote><ul><li>-x509：是一个自签发证书的格式</li><li>-days 3650：证书的有效时间</li><li>192.168.196.101:5000：仓库的地址和端口</li><li>rsa:2048：证书算法长度</li><li>domain.key和domain.crt：生成的证书文件</li></ul></blockquote><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230530194542601.png"></p><h2 id="生成用户名和密码"><a href="#生成用户名和密码" class="headerlink" title="生成用户名和密码"></a>生成用户名和密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /usr/local/docker/registry/auth</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">htpasswd -Bbn heroxin   &gt; /usr/local/docker/registry/auth/htpasswd</span><br></pre></td></tr></table></figure><h2 id="启动Docker-Registry-本地镜像仓库服务"><a href="#启动Docker-Registry-本地镜像仓库服务" class="headerlink" title="启动Docker Registry 本地镜像仓库服务"></a>启动Docker Registry 本地镜像仓库服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 5000:5000 \</span><br><span class="line">--restart=always \</span><br><span class="line">--name registry \</span><br><span class="line">-v /usr/local/docker/registry:/var/lib/registry \</span><br><span class="line">-v /usr/local/docker/registry/auth:/auth \</span><br><span class="line">-e &quot;REGISTRY_AUTH=htpasswd&quot; \</span><br><span class="line">-e &quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot; \</span><br><span class="line">-e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \</span><br><span class="line">-v /usr/local/docker/registry/certs:/certs \</span><br><span class="line">-e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">-e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">registry:2</span><br></pre></td></tr></table></figure><h2 id="配置Docker-Registry-访问接口"><a href="#配置Docker-Registry-访问接口" class="headerlink" title="配置Docker Registry 访问接口"></a>配置Docker Registry 访问接口</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker/certs.d/192.168.196.101:5000</span><br><span class="line">cp /usr/local/docker/registry/certs/domain.crt /etc/docker/certs.d/192.168.196.101\:5000/</span><br></pre></td></tr></table></figure><h2 id="Docker-Registry-私有仓库使用登记"><a href="#Docker-Registry-私有仓库使用登记" class="headerlink" title="Docker Registry 私有仓库使用登记"></a>Docker Registry 私有仓库使用登记</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://sdo6tk7g.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="attr">&quot;insecure-registries&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;192.168.196.101:5000&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="准备镜像文件"><a href="#准备镜像文件" class="headerlink" title="准备镜像文件"></a>准备镜像文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker tag tomcat:latest 192.168.196.101:5000/mytomca</span><br></pre></td></tr></table></figure><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker login 192.168.196.101:5000</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531090428080.png"></p><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker push 192.168.196.101:5000/mytomcat</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531090636807.png"></p><h2 id="查看-DockerRegistry-仓库推送的文件"><a href="#查看-DockerRegistry-仓库推送的文件" class="headerlink" title="查看 DockerRegistry 仓库推送的文件"></a>查看 DockerRegistry 仓库推送的文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll /usr/local/docker/registry/docker/registry/v2/repositories/</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230531091157912.png" alt="image-20230531091157912"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Docker" scheme="https://heroxin.xyz/categories/Docker/"/>
    
    <category term="安装手册" scheme="https://heroxin.xyz/categories/%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="Docker" scheme="https://heroxin.xyz/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>线程池</title>
    <link href="https://heroxin.xyz/2023/04/28/ThreadPool/"/>
    <id>https://heroxin.xyz/2023/04/28/ThreadPool/</id>
    <published>2023-04-28T02:30:00.000Z</published>
    <updated>2023-05-28T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><h2 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h2><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>核心线程数，线程池创建好之后就准备就绪的线程数量，就等待来接收异步任务；只要线程池不销毁，就一直存在</td></tr><tr><td>int maximumPoolSize</td><td>最大线程数量，控制资源</td></tr><tr><td>long keepAliveTime</td><td>当前线程数量大于核心数量， 只要线程空闲大于指定时间，就会释放。核心线程是不释放的。</td></tr><tr><td>TimeUnit unit</td><td>超时单位</td></tr><tr><td>BlockingQueue<Runnable> workQueue</td><td>阻塞队列，如果任务数超过核心程数量，就会将多余的任务放到队列当中，只要线程空闲，就会从队列中取出任务</td></tr><tr><td>ThreadFactory threadFactory</td><td>线程的创建工厂，通常默认，不做修改</td></tr><tr><td>RejectedExecutionHandler handler</td><td>拒接策略，如果队列满了，按照我们的定义的拒绝策略来拒绝任务。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h2><table><thead><tr><th>拒绝策略名</th><th>释义</th></tr></thead><tbody><tr><td>AbortPolicy()</td><td>队列满了，抛出异常</td></tr><tr><td>CallerRunsPolicy()</td><td>直接 <strong>同步</strong> 调用它的这个任务的 run 方法，因为使用继承 runnable 接口实现多线程时，runnable 里的 run 方法是同步调用，想要异步调用就得使用 new thread().start();</td></tr><tr><td>DiscardPolicy()</td><td>队列满了，丢掉任务，不会抛出异常</td></tr><tr><td>DiscardOldestPolicy()</td><td>队列满了，尝试和最早进来的，还未执行的线程竞争，如果成功就执行，不成功就丢弃，不会抛出异常</td></tr></tbody></table><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">AbortPolicy</button></li><li class="tab"><button type="button" data-href="#note-2">CallerRunsPolicy</button></li><li class="tab"><button type="button" data-href="#note-3">DiscardPolicy</button></li><li class="tab"><button type="button" data-href="#note-4">DiscardOldestPolicy</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbortPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an &#123;<span class="doctag">@code</span> AbortPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbortPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RejectedExecutionException</span>(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                             <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                             e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> CallerRunsPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallerRunsPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Executes task r in the caller&#x27;s thread, unless the executor</span></span><br><span class="line"><span class="comment">     * has been shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">            r.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DiscardPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscardPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Does nothing, which has the effect of discarding task r.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DiscardOldestPolicy&#125; for the given executor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DiscardOldestPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Obtains and ignores the next task that the executor</span></span><br><span class="line"><span class="comment">     * would otherwise execute, if one is immediately available,</span></span><br><span class="line"><span class="comment">     * and then retries execution of task r, unless the executor</span></span><br><span class="line"><span class="comment">     * is shut down, in which case task r is instead discarded.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">            e.getQueue().poll();</span><br><span class="line">            e.execute(r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h2><table><thead><tr><th>方法名</th><th>释义</th></tr></thead><tbody><tr><td>newSingleThreadExecutor()</td><td>单个线程</td></tr><tr><td>newFixedThreadPool(int nThreads)</td><td>创建一个固定大小的线程池</td></tr><tr><td>newCachedThreadPool()</td><td>大小可变化的线程池</td></tr></tbody></table><blockquote><p>其他方法：newScheduledThreadPool()，创建一个定长线程池，支持定时及周期性任务执行。</p></blockquote><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">newSingleThreadExecutor</button></li><li class="tab"><button type="button" data-href="#note-2">newFixedThreadPool</button></li><li class="tab"><button type="button" data-href="#note-3">newCachedThreadPool</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newSingleThreadExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FinalizableDelegatedExecutorService</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newFixedThreadPool</span><span class="params">(<span class="type">int</span> nThreads)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">newCachedThreadPool</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> <span class="title class_">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="线程池运行流程"><a href="#线程池运行流程" class="headerlink" title="线程池运行流程"></a>线程池运行流程</h2><p>1、线程池创建，准备好 core 数量的核心线程，准备接受任务</p><p>2、新的任务进来，用 core 准备好的空闲线程执行。</p><ul><li>core 满了，就将再进来的任务放入阻塞队列中。空闲的 core 就会自己去阻塞队 列获取任务执行 </li><li>阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量 </li><li>max 都执行好了。Max-core 数量空闲的线程会在 keepAliveTime 指定的时间后自 动销毁。最终保持到 core 大小</li><li>如果线程数开到了 max 的数量，还有新任务进来，就会使用 reject 指定的拒绝策 略进行处理</li></ul><p>3、所有的线程创建都是由指定的 factory 创建的。</p><h2 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h2><ul><li><p>降低资源的消耗</p><p>通过重复利用已经创建好的线程降低线程的创建和销毁带来的损耗 </p></li><li><p>提高响应速度</p><p>因为线程池中的线程数没有超过线程池的最大上限时，有的线程处于等待分配任务 的状态，当任务来时无需创建新的线程就能执行</p></li><li><p>提高线程的可管理性</p><p>线程池会根据当前系统特点对池内的线程进行优化处理，减少创建和销毁线程带来 的系统开销。无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使 用线程池进行统一分配</p></li></ul><h2 id="最大线程定义方法"><a href="#最大线程定义方法" class="headerlink" title="最大线程定义方法"></a>最大线程定义方法</h2><ul><li><p>CPU密集型：电脑核数为几，就定义为几，可以保证CPU效率最高</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取电脑逻辑处理器个数</span></span><br><span class="line">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure></li><li><p>IO密集型：设置为 IO 任务数量的两倍</p></li></ul><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 线程池的三大方法</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//        单个线程</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();</span></span><br><span class="line">        <span class="comment">//        创建一个固定大小的线程池</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);</span></span><br><span class="line">        <span class="comment">//        可变化的线程池</span></span><br><span class="line">        <span class="comment">//        ExecutorService threadPool = Executors.newCachedThreadPool();</span></span><br><span class="line">        <span class="comment">//        定时任务线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 其他方法：创建定时任务线程池</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="comment">//        ScheduledExecutorService threadPool = Executors.newScheduledThreadPool(10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//        手动创建线程池</span></span><br><span class="line">        <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            Runtime.getRuntime().availableProcessors(),</span><br><span class="line">            <span class="number">3</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="comment">// 有四种拒绝策略</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()   <span class="comment">// 队列满了，抛出异常</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//            最大接受 maximumPoolSize + capacity，超过就会被拒绝策略接收</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                threadPool.execute(() -&gt; &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;   ok&quot;</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//            线程池用完，程序结束，关闭线程池</span></span><br><span class="line">            threadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><div class="note danger simple"><p>问题：一个线程池中，core：7，max：20，queue：50，100个并发进来怎么分配 ？</p></div><div class="note success simple"><p>7个会立即得到执行，50个进入队列，再开  13 个线程进行执行。剩下的 30 个使用拒绝策略执行。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Java" scheme="https://heroxin.xyz/tags/Java/"/>
    
    <category term="JUC" scheme="https://heroxin.xyz/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>函数式接口</title>
    <link href="https://heroxin.xyz/2023/04/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>https://heroxin.xyz/2023/04/28/%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</id>
    <published>2023-04-28T02:30:00.000Z</published>
    <updated>2023-05-28T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><blockquote><p>函数式接口：有且只有一个抽象方法的，可以有多个非抽象方法的接口，主要用于 Lambda 表达式</p><p>例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Function</span>&lt;T, R&gt; &#123;</span><br><span class="line"></span><br><span class="line"> R <span class="title function_">apply</span><span class="params">(T t)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="title function_">compose</span><span class="params">(Function&lt;? <span class="built_in">super</span> V, ? extends T&gt; before)</span> &#123;</span><br><span class="line">     Objects.requireNonNull(before);</span><br><span class="line">     <span class="keyword">return</span> (V v) -&gt; apply(before.apply(v));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="title function_">andThen</span><span class="params">(Function&lt;? <span class="built_in">super</span> R, ? extends V&gt; after)</span> &#123;</span><br><span class="line">     Objects.requireNonNull(after);</span><br><span class="line">     <span class="keyword">return</span> (T t) -&gt; after.apply(apply(t));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="title function_">identity</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> t -&gt; t;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>@FunctionalInterface ：用于检查是否符合函数式接口</p></blockquote><p><strong>Since jdk 1.8 ，java.util.function 包中主要是这四个方法，其他都是四个方法的拓展</strong></p> <div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">函数型接口</button></li><li class="tab"><button type="button" data-href="#note-2">断定型接口</button></li><li class="tab"><button type="button" data-href="#note-3">消费型接口</button></li><li class="tab"><button type="button" data-href="#note-4">供给型接口</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Function 函数型接口：第一个 String 为返回类型，第二个 String 为输入参数类型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">FunctionFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Function&lt;String, String&gt; function = (str) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(function.apply(<span class="string">&quot;heroxin&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Predicate 断定型接口，输入参数，返回布尔值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">PredicateFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Predicate&lt;String&gt; predicate = (str) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(predicate.test(<span class="string">&quot;heroxin&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Consumer 消费型接口：有输入参数，没有返回值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ConsumerFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Consumer&lt;String&gt; consumer = (str) -&gt; &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;;</span><br><span class="line">    consumer.accept(<span class="string">&quot;heroxin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Supplier 供给型接口：没有输入参数，有返回值</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">SupplierFunction</span><span class="params">()</span> &#123;</span><br><span class="line">    Supplier&lt;String&gt; supplier = () -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;heroxin&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    System.out.println(supplier.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Java" scheme="https://heroxin.xyz/tags/Java/"/>
    
    <category term="JUC" scheme="https://heroxin.xyz/tags/JUC/"/>
    
  </entry>
  
  <entry>
    <title>Lambda</title>
    <link href="https://heroxin.xyz/2023/04/20/Lambda/"/>
    <id>https://heroxin.xyz/2023/04/20/Lambda/</id>
    <published>2023-04-20T02:30:00.000Z</published>
    <updated>2023-04-20T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="原始写法"><a href="#原始写法" class="headerlink" title="原始写法"></a>原始写法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Iuser</span> <span class="keyword">implements</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span> + name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Iuser</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> String <span class="title function_">UserName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    String <span class="title function_">UserName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lambda01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (name) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;我是&quot;</span>+name;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> user.UserName(<span class="string">&quot;阿鑫&quot;</span>);</span><br><span class="line">        System.out.println(userName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Java" scheme="https://heroxin.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Maven锁定版本与版本常量</title>
    <link href="https://heroxin.xyz/2023/04/18/Maven%E9%94%81%E5%AE%9A%E7%89%88%E6%9C%AC%E4%B8%8E%E7%89%88%E6%9C%AC%E5%B8%B8%E9%87%8F/"/>
    <id>https://heroxin.xyz/2023/04/18/Maven%E9%94%81%E5%AE%9A%E7%89%88%E6%9C%AC%E4%B8%8E%E7%89%88%E6%9C%AC%E5%B8%B8%E9%87%8F/</id>
    <published>2023-04-18T02:30:00.000Z</published>
    <updated>2023-04-18T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Maven锁定版本与版本常量"><a href="#Maven锁定版本与版本常量" class="headerlink" title="Maven锁定版本与版本常量"></a>Maven锁定版本与版本常量</h1><p>今天在添加微服务模块是出现了个有趣的现象：</p><p>​    创建了多个微服务；</p><p>​    它们都引用同一个微服务–common；</p><p>​    在common中配置这些微服务的共同依赖；</p><p>​    common中使用锁定版本与版本常量的方式配置好了 spring cloud 、spring cloud alibaba；</p><p>​    在common中配置好 nacos</p><p>​    其他的微服务是通过 Spring Initializr 的方式生成的（没选择其他依赖），所以只有 springboot 的依赖</p><p>​    启动微服务，报错：nacos 和 spring cloud 版本不兼容。</p><p>纳尼？</p><p>版本不能出错，我之前使用过。</p><p>在微服务模块中加入 spring cloud 依赖，启动成功！</p><p>纳尼？？？</p><p>我不是在 common中配置好了吗？ 根据依赖传递，其他微服务中应该不用配置啊？</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dependencyManagement 叫做版本锁定，是为了避免因依赖冲突而产生的路径声明、声明顺序等问题，它不会真正的导入依赖，只有在你导入依赖后，进行对应的版本锁定。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>properties 叫做版本常量，在使用坐标时，对于同一个框架，引入多次时，它的版本信息就好多次出现，所以可以借用常量的思想，将这些版本号提取出来，在需要用到的地方，直接写版本常量名就可以了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术栈" scheme="https://heroxin.xyz/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
    <category term="Maven" scheme="https://heroxin.xyz/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>啊？</title>
    <link href="https://heroxin.xyz/2023/03/31/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>https://heroxin.xyz/2023/03/31/%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2023-03-31T02:30:00.000Z</published>
    <updated>2023-06-07T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.6.13<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.5<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.5.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-spring-boot.version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">aliyun-spring-boot.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun-spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="OOOO"><a href="#OOOO" class="headerlink" title="OOOO"></a>OOOO</h1><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230524165805467.png"></p><ol><li><p>PO(persistant object)：持久化对象</p><p>po 就是对应数据库中某个表的一条记录，多个记录可以用 po 的集合</p></li><li><p>DO(domain object)：领域对象</p><p>就是从现实世界抽象出来的有形或无形的业务实体</p></li><li><p>TO(Transfer object)：数据传输对象</p><p>不同的应用程序之间传输的对象</p></li><li><p>DTO(Data Transfer object)：数据传输对象</p><p>这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的 数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这 里，泛指用于展示层与服务层之间的数据传输对象。</p></li><li><p>VO(Value object)：值对象</p><p>通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出的业务对象 , 可以和表对应 , 也可以不 , 这根据业务的需要 。用 new 关键字创建，由 GC 回收的。</p><p>View object：视图对象； 接受页面传递来的数据，封装对象将业务处理完成的对象，封装成页面要用的数据</p></li><li><p>BO(Business object)：业务对象</p><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对 象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。business object: 业务对象 主要作 用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简 历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经 历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每 个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p></li></ol><h1 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        nacos--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        根据本地安装的nacos1.4.1，使用 2.2.5.RELEASE 版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        排除 netflix-ribbon ，加入 loadbalancer--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring cloud 从2021.0.5起，默认不在使用 bootstrap，需要导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    将服务注册到Nacos</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-GateWay</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># 服务地址：端口</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure></li><li><p>开启服务注册发现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Nacos配置中心"><a href="#Nacos配置中心" class="headerlink" title="Nacos配置中心"></a>Nacos配置中心</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        nacos--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        根据本地安装的nacos1.4.1，使用 2.2.5.RELEASE 版本--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        排除 netflix-ribbon ，加入 loadbalancer--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        spring cloud 从2021.0.5起，默认不在使用 bootstrap，需要导入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p><p><strong>bootsrtap.yaml</strong>，优先级高于 application.properties</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-Coupon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment"># 配置中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="comment"># 配置中心的文件后缀</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br><span class="line">        <span class="comment"># 配置文件所属组</span></span><br><span class="line">        <span class="attr">group:</span> <span class="string">dev</span></span><br><span class="line"><span class="comment">#        group: prop</span></span><br><span class="line">        <span class="comment"># 配置命名空间（习惯于一个微服务开一个命名空间，用组名区分开发环境与上线环境等）</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">6b7a84db-c36c-4197-ba58-b624c56947f2</span></span><br></pre></td></tr></table></figure></li><li><p>根据配置文件在Nacos添加配置文件 <strong>GuliMall-Coupon.yaml，group：dev</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230329154811598.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/img/blog/image-20230329162005945.png"></p></li><li><p>开启热部署</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刷新配置</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--   feign   --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   如果使用nacos作为注册中心的话，需要排除ribbon，并加入loadbalance依赖  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.heroxin.gulimall.common.utils.R;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将服务注册到spring中，指定服务提供者的名称</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;GuliMall-Coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line">   <span class="comment">// 服务提供者的路径   </span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">   R <span class="title function_">membercoupons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用服务</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">MemberEntity</span> <span class="variable">memberEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line">    memberEntity.setNickname(<span class="string">&quot;hero&quot;</span>);</span><br><span class="line"> <span class="comment">//  couponFeignService 就是调用远程w   </span></span><br><span class="line">    <span class="type">R</span> <span class="variable">membercoupons</span> <span class="operator">=</span> couponFeignService.membercoupons();</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;member&quot;</span>, memberEntity).put(<span class="string">&quot;coupons&quot;</span>,membercoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启远程调用功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加在服务消费者的启动类上</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringBoot跨域处理"><a href="#SpringBoot跨域处理" class="headerlink" title="SpringBoot跨域处理"></a>SpringBoot跨域处理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>).</span><br><span class="line">            allowedOriginPatterns(<span class="string">&quot;*&quot;</span>). <span class="comment">//允许跨域的域名，可以用*表示允许任何域名使用</span></span><br><span class="line">            <span class="comment">//                allowedOrigins(&quot;*&quot;).    //在Springboot2.4对应Spring5.3后在设置allowCredentials(true)的基础上不能直接使用通配符设置allowedOrigins，而是需要指定特定的URL。如果需要设置通配符，需要通过allowedOriginPatterns指定</span></span><br><span class="line">            allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>) . <span class="comment">//允许任何方法（post、get等）</span></span><br><span class="line">            allowedHeaders(<span class="string">&quot;*&quot;</span>). <span class="comment">//允许任何请求头</span></span><br><span class="line">            allowCredentials(<span class="literal">true</span>). <span class="comment">//带上cookie信息</span></span><br><span class="line">            exposedHeaders(HttpHeaders.SET_COOKIE).maxAge(<span class="number">3600L</span>); <span class="comment">//maxAge(3600)表明在3600秒内，不需要再发送预检验请求，可以缓存该结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#    将服务注册到Nacos，需要nacos地址和服务名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">  <span class="comment"># 服务名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">GuliMall-GateWay</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">    <span class="comment"># 注册中心地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">    <span class="comment"># 路由规则</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#        product</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_rout</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://GuliMall-Product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#        thirdparty</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">thirdparty_rout</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://GuliMall-ThirdParty</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/thirdparty/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/thirdparty/(?&lt;segment&gt;/?.*),</span> <span class="string">/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="处理跨域请求"><a href="#处理跨域请求" class="headerlink" title="处理跨域请求"></a>处理跨域请求</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.reactive.CorsWebFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 处理跨域请求</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、配置跨域</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line"></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Mybatis-Plus-逻辑删除"><a href="#Mybatis-Plus-逻辑删除" class="headerlink" title="Mybatis-Plus 逻辑删除"></a>Mybatis-Plus 逻辑删除</h1><ol><li><p>配置规则（高版本可以省略）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 表示已删除</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> </span><br></pre></td></tr></table></figure></li><li><p>加上逻辑删除注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure></li></ol><h1 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h1><blockquote><p>在 javax 包下</p></blockquote><ol><li><p>添加规则</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 品牌名</span></span><br><span class="line"><span class="comment">      * jsr303 数据校验</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Not(message = &quot;品牌名不能为空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure></li><li><p>开启校验</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@valild</span> 开启校验功能</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span>  <span class="meta">@RequestBody</span> BrandEntity brand)</span>&#123;</span><br><span class="line">    brandService.save(brand);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="VO"><a href="#VO" class="headerlink" title="VO"></a>VO</h1><p>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p><p>前后端进行数据传输时，只需要实体类中的某些字段或者需要表中没有的字段时，可以设置一个VO封装满足自己需求的实体类。</p><h1 id="Windows10-端口占用"><a href="#Windows10-端口占用" class="headerlink" title="Windows10 端口占用"></a>Windows10 端口占用</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">netstat –aon |findstr “80”</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">TASKKILL /PID 20976 /F</span><br></pre></td></tr></table></figure><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># 默认配置</span></span><br><span class="line">    <span class="attr">password:</span>  <span class="comment"># redis没有设置密码就不要设置了</span></span><br></pre></td></tr></table></figure></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        压入缓存，缓存中的数据是 json 字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">catalogJson</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJson&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catalogJson)) &#123;</span><br><span class="line">        <span class="comment">//            缓存中没有数据，将查到的数据放入缓存</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catalogJsonFromdb = getCatalogJsonFromdb();</span><br><span class="line">        <span class="comment">//            序列化</span></span><br><span class="line">        <span class="comment">//            将数据转化为json，json跨语言，跨平台兼容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> JSON.toJSONString(catalogJsonFromdb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catalogJson&quot;</span>, string, <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//        反序列化，将json转化为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catalogJson, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Redis分布式锁"><a href="#Redis分布式锁" class="headerlink" title="Redis分布式锁"></a>Redis分布式锁</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        redis分布式锁--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>RedissonClient</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有对redisson的使用都是通过调用redissonclient对象实现的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod = &quot;shutdown&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="comment">//        创建配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.196.101:6379&quot;</span>);</span><br><span class="line">        <span class="comment">//        根据config配置创建从redissonclient实例</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码 </p><p><a href="https://blog.csdn.net/qq_35843095/article/details/109815062">看门狗</a> </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">testRLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//        获取一把锁，只要锁的名字相同，就是同一把锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line">    <span class="comment">//        加锁，锁的过期时间为 30 s</span></span><br><span class="line">    <span class="comment">//        锁会自动续期 watchdog ： 如果业务执行时间过长，运行期间会自动续期到 30s</span></span><br><span class="line">    <span class="comment">//                  不用担心业务运行过程中锁过期而被删除</span></span><br><span class="line">    <span class="comment">//        加锁的业务只要运行完成，就不会进行锁续期。所以及时不手动解锁，在 30s 后锁就会被删除</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//        业务代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//            解锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>读写锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一定能读到最新数据，修改期间，写锁是一个排它锁（互斥锁、独享锁），读锁是一个共享锁</span></span><br><span class="line"><span class="comment">     * 写锁没释放,读锁必须等待</span></span><br><span class="line"><span class="comment">     * 读 + 读 ：相当于无锁，并发读，只会在Redis中记录好，所有当前的读锁。他们都会同时加锁成功</span></span><br><span class="line"><span class="comment">     * 写 + 读 ：必须等待写锁释放</span></span><br><span class="line"><span class="comment">     * 写 + 写 ：阻塞方式</span></span><br><span class="line"><span class="comment">     * 读 + 写 ：有读锁。写也需要等待</span></span><br><span class="line"><span class="comment">     * 只要有读或者写的存都必须等待</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testWriteLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redissonClient.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//改数据加写锁，读数据加读锁</span></span><br><span class="line">        rLock.lock();</span><br><span class="line">        s = UUID.randomUUID().toString();</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        ops.set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testReadLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> redissonClient.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="comment">//加读锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        rLock.lock();</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        s = ops.get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">10</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>信号量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车库停车</span></span><br><span class="line"><span class="comment">     * 3车位，3是自己在redis中设置的，key为信号量名，值为3</span></span><br><span class="line"><span class="comment">     * 信号量也可以做分布式限流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="comment">// park.acquire();     //获取一个信号、获取一个值,占一个车位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> park.tryAcquire();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//执行业务</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok=&gt;&quot;</span> + flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    park.release();     <span class="comment">//释放一个车位</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>闭锁</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放假、锁门</span></span><br><span class="line"><span class="comment">     * 1班没人了</span></span><br><span class="line"><span class="comment">     * 5个班，全部走完，我们才可以锁大门</span></span><br><span class="line"><span class="comment">     * 分布式闭锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);</span><br><span class="line">    door.await();       <span class="comment">//等待闭锁完成</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();       <span class="comment">//计数-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;班的人都走了...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringCache"><a href="#SpringCache" class="headerlink" title="SpringCache"></a>SpringCache</h1><blockquote><p>Spring-Cache的不足之处：</p><p>1）、读模式</p><p>缓存穿透：查询一个null数据。解决方案：缓存空数据</p><p>缓存击穿：大量并发进来同时查询一个正好过期的数据。解决方案：加锁 ? 默认是无加锁的;使用sync = true来解决击穿问题</p><p>缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间</p><p>2)、写模式：（缓存与数据库一致）</p><p>1）、读写加锁。</p><p>2）、引入Canal,感知到MySQL的更新去更新Redis</p><p>3）、读多写多，直接去数据库查询就行</p><p>总结：</p><p>常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：写模式(只要缓存的数据有过期时间就足够了)</p><p>特殊数据：特殊设计</p><p>原理：</p><p>CacheManager(RedisCacheManager)-&gt;Cache(RedisCache)-&gt;Cache负责缓存的读写</p></blockquote><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        cache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#    配置缓存</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="comment">#    使用redis作为缓存</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="comment">#    设置过期时间为一小时，</span></span><br><span class="line">      <span class="attr">time-to-live:</span>  <span class="number">000</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.cache.CacheProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        <span class="comment">// config = config.entryTtl();</span></span><br><span class="line">        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()));</span><br><span class="line">        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">        <span class="comment">//将配置文件中所有的配置都生效</span></span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开启缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliMallProductApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GuliMallProductApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置缓存分区、key</span></span><br><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Category</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> entities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>缓存失效模式（更新后删除缓存）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    缓存失效模式使用</span></span><br><span class="line"><span class="meta">@CacheEvict(value = &quot;category&quot;,allEntries = true)</span>       <span class="comment">//删除某个分区下的所有数据</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascade</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.updateById(category);</span><br><span class="line">    System.out.println(category.getName());</span><br><span class="line">    categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="SpringSession"><a href="#SpringSession" class="headerlink" title="SpringSession"></a>SpringSession</h1><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--        spring-session--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line"><span class="comment">#      session 过期时间</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">30m</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.196</span><span class="number">.101</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"><span class="comment">#    spring session</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">  <span class="comment">#存储类型</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure></li><li><p>开启注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GuliMallAuthApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GuliMallAuthApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>对应的对象实现序列化</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemberResponseVo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="知识点" scheme="https://heroxin.xyz/categories/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
    <category term="Spring" scheme="https://heroxin.xyz/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>GuliMall-报错集锦</title>
    <link href="https://heroxin.xyz/2023/03/23/GuliMall/"/>
    <id>https://heroxin.xyz/2023/03/23/GuliMall/</id>
    <published>2023-03-23T02:30:00.000Z</published>
    <updated>2023-05-10T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="renren-fast"><a href="#renren-fast" class="headerlink" title="renren-fast"></a>renren-fast</h2><h3 id="pom-xml爆红，插件下载不到"><a href="#pom-xml爆红，插件下载不到" class="headerlink" title="pom.xml爆红，插件下载不到"></a>pom.xml爆红，插件下载不到</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212102463.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212117041.png"></p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>把插件注释掉就好，不影响启动。</p><p>pom.xml 此时还是爆红，别在意，启动项目</p><h3 id="项目启动失败"><a href="#项目启动失败" class="headerlink" title="项目启动失败"></a>项目启动失败</h3><p>找不到实体中的 get 和 set 方法</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212409337.png"></p><p>首先引入 lombok 插件，还是出问题。</p><p>查看lombok插件使用的版本是 1.18.24，而 renren-fast 引用的是 1.18.4，版本不一致。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212615039.png" alt="image-20230323212615039"></p><h4 id="解决方法：-1"><a href="#解决方法：-1" class="headerlink" title="解决方法："></a>解决方法：</h4><p>将 renren-fast 应用的版本也改为 1.18.24，启动成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323212918791.png"></p><h2 id="renren-fast-vue"><a href="#renren-fast-vue" class="headerlink" title="renren-fast-vue"></a>renren-fast-vue</h2><h3 id="cnpm-install报错"><a href="#cnpm-install报错" class="headerlink" title="cnpm install报错"></a>cnpm install报错</h3><h4 id="解决方法：-2"><a href="#解决方法：-2" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li><p>查找资料得知，nodejs 和 node-sess 有对应的版本要求 <a href="https://www.npmjs.com/package/node-sass?activeTab=readme">详见</a></p><p>我得nodejs版本是18+，所以我需要8.0+的node-sess</p><p>修改renren-fast-vue目录下的 package.json 和 package-lock.json</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323211350109.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323211436217.png"></p></li><li><p>报错：<strong><a href="mailto:&#99;&#x68;&#x72;&#111;&#x6d;&#x65;&#x64;&#x72;&#105;&#118;&#101;&#x72;&#x40;&#x32;&#46;&#50;&#55;&#x2e;&#50;&#x69;&#110;&#115;&#x74;&#x61;&#108;&#x6c;">&#99;&#x68;&#x72;&#111;&#x6d;&#x65;&#x64;&#x72;&#105;&#118;&#101;&#x72;&#x40;&#x32;&#46;&#50;&#55;&#x2e;&#50;&#x69;&#110;&#115;&#x74;&#x61;&#108;&#x6c;</a>: node install.js</strong> </p><p>解决方法：</p><p>​    先删除 renren-fast-vue 下的 node_modules 文件夹</p><p>​    执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver</span><br></pre></td></tr></table></figure><p>再次执行 cnpm install ，不报错</p></li></ol><h3 id="cnpm-run-dev-报错，有些依赖未找到"><a href="#cnpm-run-dev-报错，有些依赖未找到" class="headerlink" title="cnpm run dev 报错，有些依赖未找到"></a>cnpm run dev 报错，有些依赖未找到</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230323210638031.png"></p><h4 id="解决方法：-3"><a href="#解决方法：-3" class="headerlink" title="解决方法："></a>解决方法：</h4><p>​    重新下载依赖</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install qs</span><br><span class="line">cnpm install svg-baker-runtime</span><br><span class="line">cnpm install vue-hot-reload-api</span><br></pre></td></tr></table></figure><h2 id="renren-generator"><a href="#renren-generator" class="headerlink" title="renren-generator"></a>renren-generator</h2><h3 id="ServiceImpl层报错"><a href="#ServiceImpl层报错" class="headerlink" title="ServiceImpl层报错"></a>ServiceImpl层报错</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230325190846909.png" alt="image-20230325190846909"></p><h4 id="解决方法：-4"><a href="#解决方法：-4" class="headerlink" title="解决方法："></a>解决方法：</h4><p>​    从github 上clone 的renren-generator 的项目中，pageutils和query等工具类是不全的，有很多bug，导入课程提供的utils后解决</p><h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="启动项目失败："><a href="#启动项目失败：" class="headerlink" title="启动项目失败："></a>启动项目失败：</h3><p><strong><u>No Feign Client for loadBalancing defined. Did you forget to include spring-cloud-starter-loadbalancer?</u></strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230327184014499.png" alt="image-20230327184014499"></p><h4 id="解决方法：-5"><a href="#解决方法：-5" class="headerlink" title="解决方法："></a>解决方法：</h4><blockquote><p>​    由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错</p></blockquote><p>由于SpringCloud Feign在Hoxton.M2 RELEASED版本之后不再使用Ribbon而是使用spring-cloud-loadbalancer，所以不引入spring-cloud-loadbalancer会报错。</p><p>我们这里使用的是nacoss，所以从nacoss中排除ribbon的依赖，并加入loadbalancer依赖</p><p>在pom中引入依赖即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230329173832511.png" alt="image-20230329173832511"></p><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>引入了Mybatis依赖，它是有默认的数据库配置，而网关显然没有数据库</p><h3 id="解决方法：-6"><a href="#解决方法：-6" class="headerlink" title="解决方法："></a>解决方法：</h3><p>排除数据库配置的扫描</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230329174053938.png"></p><h2 id="报错：java-找不到符号"><a href="#报错：java-找不到符号" class="headerlink" title="报错：java: 找不到符号"></a>报错：java: 找不到符号</h2><p>符号:   方法 allowedOriginPatterns(java.lang.String)<br>位置: 类 org.springframework.web.servlet.config.annotation.CorsRegistration</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330115142087.png" alt="image-20230330115142087"></p><h3 id="解决方法：-7"><a href="#解决方法：-7" class="headerlink" title="解决方法："></a>解决方法：</h3><p>​    SpringBoot升级后，Lombok版本对应的Api发生改动，这个方法名已经不对了。改为</p><p><strong>.allowedOrigins(“*”)</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330115446476.png"></p><h2 id="报错：When-allowCredentials-is-true-allowedOrigins-cannot-contain-the-special-value-“-”-since-that-cannot-be-set-on-the-“Access-Control-Allow-Origin”-response-header-To-allow-credentials-to-a-set-of-origins-list-them-explicitly-or-consider-using-“allowedOriginPatterns”-instead"><a href="#报错：When-allowCredentials-is-true-allowedOrigins-cannot-contain-the-special-value-“-”-since-that-cannot-be-set-on-the-“Access-Control-Allow-Origin”-response-header-To-allow-credentials-to-a-set-of-origins-list-them-explicitly-or-consider-using-“allowedOriginPatterns”-instead" class="headerlink" title="报错：When allowCredentials is true, allowedOrigins cannot contain the special value “*” since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using “allowedOriginPatterns” instead."></a>报错：When allowCredentials is true, allowedOrigins cannot contain the special value “*” since that cannot be set on the “Access-Control-Allow-Origin” response header. To allow credentials to a set of origins, list them explicitly or consider using “allowedOriginPatterns” instead.</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230330135620481.png"></p><h3 id="解决方法：-8"><a href="#解决方法：-8" class="headerlink" title="解决方法："></a>解决方法：</h3><p>这是因为springboot升级成2.4.0以上时对AllowedOrigin设置发生了改变，不能有”*“</p><p>将</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><p>替换为</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170025876.png" alt="image-20230402170025876"></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>前后端数据应当统一，原来项目给的是 ：后端accessId，前端accessid，改为一致即可</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170107622.png"></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230402170137755.png"></p><h2 id="cascader级联菜单不显示样式"><a href="#cascader级联菜单不显示样式" class="headerlink" title="cascader级联菜单不显示样式"></a>cascader级联菜单不显示样式</h2><h3 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406095221286.png"></p><h3 id="解决方法：-9"><a href="#解决方法：-9" class="headerlink" title="解决方法："></a>解决方法：</h3><p>在  /renren-fast-vue/src/main.js 中引入</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="报错：Parameter-‘name’-not-found-Available-parameters-are-arg1-arg0-param1-param2"><a href="#报错：Parameter-‘name’-not-found-Available-parameters-are-arg1-arg0-param1-param2" class="headerlink" title="报错：Parameter ‘name’ not found. Available parameters are [arg1, arg0, param1, param2]"></a>报错：Parameter ‘name’ not found. Available parameters are [arg1, arg0, param1, param2]</h2><p>说是name字段找不到，但是我前后命名都是统一的，检查了几次没问题</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406170822772.png" alt="image-20230406170822772"></p><h3 id="解决方法：-10"><a href="#解决方法：-10" class="headerlink" title="解决方法："></a>解决方法：</h3><p>错误原因是应为mapper文件中，一个方法如果有多个参数，最好使用@param来与表中字段绑定</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230406171133811.png" alt="image-20230406171133811"></p><h2 id="报错：Error-in-mounted-hook-“ReferenceError-PubSub-is-not-defined”"><a href="#报错：Error-in-mounted-hook-“ReferenceError-PubSub-is-not-defined”" class="headerlink" title="报错：Error in mounted hook: “ReferenceError: PubSub is not defined”"></a>报错：Error in mounted hook: “ReferenceError: PubSub is not defined”</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230407201844387.png" alt="image-20230407201844387"></p><h2 id="使用-multi-upload-组件上传图片报错：InvalidAccessKeyId"><a href="#使用-multi-upload-组件上传图片报错：InvalidAccessKeyId" class="headerlink" title="使用 multi-upload 组件上传图片报错：InvalidAccessKeyId"></a>使用 multi-upload 组件上传图片报错：InvalidAccessKeyId</h2><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230409155438612.png" alt="image-20230409155438612"></p><p>报错原因：</p><p>​    它说是 accessKeyId 获取不到，看请求数据中的 <strong>ossaccessKeyId</strong> 值为 undefined，也就是发送请求时，没有发送这个值。但我使用的是组件，后端发送的签名也咩问题。</p><p>​    此时应该去前端代码中看看 accessKeyId 是否被定义，名称是否一致。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230409155948788.png"></p><p>前端引用的是 accessid 而后端传的是 assessId ，改为一致即可。有事一个前后端数据不一致造成的</p><h2 id="发布商品-规格参数没有显示"><a href="#发布商品-规格参数没有显示" class="headerlink" title="发布商品-规格参数没有显示"></a>发布商品-规格参数没有显示</h2><p>上架商品时，报错sql语句有问题，查看发现：查询规格参数那步，查到一个空列表。</p><p><strong>控制台报错：Cannot read properties of null (reading ‘forEach’)</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230509195136824.png" alt="image-20230509195136824"></p><h3 id="解决方法：-27条消息-谷粒商城P85问题记录—发布商品时规格参数不显示-2022-4-8-猴急猴急的博客-CSDN博客"><a href="#解决方法：-27条消息-谷粒商城P85问题记录—发布商品时规格参数不显示-2022-4-8-猴急猴急的博客-CSDN博客" class="headerlink" title="解决方法：(27条消息) 谷粒商城P85问题记录—发布商品时规格参数不显示-2022/4/8_猴急猴急的博客-CSDN博客"></a>解决方法：<a href="https://blog.csdn.net/weixin_46626422/article/details/124030177">(27条消息) 谷粒商城P85问题记录—发布商品时规格参数不显示-2022/4/8_猴急猴急的博客-CSDN博客</a></h3><h2 id="SwitchHost：无法访问gulimall-com"><a href="#SwitchHost：无法访问gulimall-com" class="headerlink" title="SwitchHost：无法访问gulimall.com"></a>SwitchHost：无法访问gulimall.com</h2><h3 id="解决方法：关闭代理"><a href="#解决方法：关闭代理" class="headerlink" title="解决方法：关闭代理"></a>解决方法：关闭代理</h3><h2 id="添加search功能，nginx中server-name：-gulimall-com-不起作用"><a href="#添加search功能，nginx中server-name：-gulimall-com-不起作用" class="headerlink" title="添加search功能，nginx中server_name：*.gulimall.com 不起作用"></a>添加search功能，nginx中server_name：*.gulimall.com 不起作用</h2><h3 id="解决方法：server-name-gulimall-com-gulimall-com"><a href="#解决方法：server-name-gulimall-com-gulimall-com" class="headerlink" title="解决方法：server_name gulimall.com *.gulimall.com;"></a>解决方法：server_name gulimall.com *.gulimall.com;</h3><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230514153822904.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="疑难杂症" scheme="https://heroxin.xyz/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="Wrong" scheme="https://heroxin.xyz/tags/Wrong/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ工作模式与实现方式</title>
    <link href="https://heroxin.xyz/2023/03/21/RabbitMQ02/"/>
    <id>https://heroxin.xyz/2023/03/21/RabbitMQ02/</id>
    <published>2023-03-21T02:30:00.000Z</published>
    <updated>2023-11-01T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Work-queues"><a href="#Work-queues" class="headerlink" title="Work queues"></a>Work queues</h1><ul><li>不需要设置交换机，只需指定唯一的消息队列即可进行消息传递</li><li>可以有多个消费者，多个消费者通过轮询从队列中取消息</li><li>消息被接受后，队列将消息移除</li><li>消费在可以在没有处理完消息的情况下继续获取消息</li><li>通过设置 <strong>spring.rabbitmq.listener.simple.prefetch: 1</strong> 来设置每次处理完消息后才能获取下一条</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170348663.png"></p><h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringRabbitListener</span> &#123;</span><br><span class="line"><span class="comment">//   workqueue</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenSimpleQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;消费者02 接收到simple.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>监听队列，自动绑定消息。通过设置休眠来模拟不同的消费能力</strong></p><h2 id="publisher"><a href="#publisher" class="headerlink" title="publisher"></a>publisher</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    workqueue</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendMessage02</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;hello,spring amqp_&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, message + i);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Publish-Subscribe"><a href="#Publish-Subscribe" class="headerlink" title="Publish/Subscribe"></a>Publish/Subscribe</h1><ul><li>需要设置交换机，并将队列绑定到交换机</li><li>常见的交换机类型有 fanout、direct、topic</li><li>可以通过基于配置和基于注解的方式来声明交换机、声明队列、绑定队列到交换机</li></ul><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230228170639037.png"></p><blockquote><ul><li>fanout：广播模式，路由key 为空</li><li>direct：定义路由 key</li><li>topic：路由key支持通配符<ol><li>*：匹配一个</li><li>#：匹配零个或多个</li></ol></li><li>headers：<ul><li>whereAny：匹配任意一个</li><li>whereAll：必须都满足</li></ul></li></ul></blockquote><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout</button></li><li class="tab"><button type="button" data-href="#note-2">Direct</button></li><li class="tab"><button type="button" data-href="#note-3">Topic</button></li><li class="tab"><button type="button" data-href="#note-4">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.fanout</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;heroxin.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   fanout 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//   fanout 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">fanoutBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.direct</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;heroxin.direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    direct 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(directExchange()).with(<span class="string">&quot;hero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    direct 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">directBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(directExchange()).with(<span class="string">&quot;xin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明交换机  heroxin.topic</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(<span class="string">&quot;heroxin.topic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    topic 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(topicExchange()).with(<span class="string">&quot;#.hero.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    topic 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">topicBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(topicExchange()).with(<span class="string">&quot;*.xin.*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//  声明交换机  heroxin.headers</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HeadersExchange <span class="title function_">headersExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeadersExchange</span>(<span class="string">&quot;heroxin.headers&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列一 queue01</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  声明队列二 queue02</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;queue02&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    headers 绑定队列一到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">headersBinding01</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue01()).to(headersExchange()).whereAny(map).match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    headers 绑定队列二到交换机</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">headersBinding02</span><span class="params">()</span> &#123;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue02()).to(headersExchange()).whereAll(map).match();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout</button></li><li class="tab"><button type="button" data-href="#note-2">Direct</button></li><li class="tab"><button type="button" data-href="#note-3">Topic</button></li><li class="tab"><button type="button" data-href="#note-4">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendFanout</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.fanout&quot;</span>, <span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDirect01</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [hero] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.direct&quot;</span>, <span class="string">&quot;hero&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDirect02</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [xin] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.direct&quot;</span>, <span class="string">&quot;xin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopic01</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [#.hero.#] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.topic&quot;</span>, <span class="string">&quot;hero.xin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendTopic02</span><span class="params">(Object msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [*.xin.*] 消息&quot;</span> + msg);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.topic&quot;</span>, <span class="string">&quot;hero.xin.heroxin&quot;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-4"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessageProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQSender</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHeaders01</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [都能接收到] 消息&quot;</span> + msg);</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;fast&quot;</span>);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(), properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.headers&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHeaders02</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;发送 [只有队列一接受] 消息&quot;</span> + msg);</span><br><span class="line">        <span class="type">MessageProperties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageProperties</span>();</span><br><span class="line">        properties.setHeader(<span class="string">&quot;color&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">        properties.setHeader(<span class="string">&quot;speed&quot;</span>, <span class="string">&quot;low&quot;</span>);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>(msg.getBytes(), properties);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;heroxin.headers&quot;</span>, <span class="string">&quot;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h2><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">Fanout,Direct,Topic</button></li><li class="tab"><button type="button" data-href="#note-2">Headers</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到queue01的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听队列二</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者02 接收到queue02的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MQReceiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue01&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue01</span><span class="params">(Message msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者01 接收到queue01的消息为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()) + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  监听队列二</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;queue02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenQueue02</span><span class="params">(Message msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消费者02 接收到queue02的消息为：&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(msg.getBody()) + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/mq&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MQSender mqSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---fanout</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fanout&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqFanout</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendFanout(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---direct</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/direct01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqDirect01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendDirect01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/direct02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqDirect02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendDirect02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---topic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/topic01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqTopic01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendTopic01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/topic02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqTopic02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendTopic02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试rabbitMQ---headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/headers01&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqHeaders01</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendHeaders01(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/headers02&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mqHeaders02</span><span class="params">()</span> &#123;</span><br><span class="line">        mqSender.sendHeaders02(<span class="string">&quot;Heroxin Hello Fei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="补充：基于注解配置"><a href="#补充：基于注解配置" class="headerlink" title="补充：基于注解配置"></a>补充：基于注解配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    directExchange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列一</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">    bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue01&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue01</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者01 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听队列二</span></span><br><span class="line"><span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">    bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">        value = @Queue(name = &quot;direct.queue02&quot;),</span></span><br><span class="line"><span class="meta">        exchange = @Exchange(name = &quot;heroxin.direct&quot;),</span></span><br><span class="line"><span class="meta">        key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectqueue02</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者02 接收到direct.queue的消息为：&quot;</span> + msg + <span class="string">&quot;,&quot;</span> + LocalTime.now());</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="分布式" scheme="https://heroxin.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="异步通信" scheme="https://heroxin.xyz/categories/%E5%BC%82%E6%AD%A5%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="SpringCloud" scheme="https://heroxin.xyz/tags/SpringCloud/"/>
    
    <category term="SpringBoot" scheme="https://heroxin.xyz/tags/SpringBoot/"/>
    
    <category term="RabbitMQ" scheme="https://heroxin.xyz/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Connection Failed</title>
    <link href="https://heroxin.xyz/2023/03/07/Connection%20Failed/"/>
    <id>https://heroxin.xyz/2023/03/07/Connection%20Failed/</id>
    <published>2023-03-07T02:30:00.000Z</published>
    <updated>2023-03-07T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Xshell 连接不到虚拟机，显示 <strong>Connection faild</strong></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308105905410.png"></p><p>但是之前可以连接，配置什么的也没动，防火墙也开放了</p><p>在虚拟机内查看 ens33 也发现没问题</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308110408855.png"></p><p>查看 ifconfg 时发现 ip 为 127.0.0.1 ，不对劲，应该是网卡出问题了</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308105844632.png"></p><p>此时查看 network 状态，发现是 faild </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status network</span><br></pre></td></tr></table></figure><p>重启 network 报错：<strong>Job for network.service failed because the  control process exited with error code. See “systemctl status  network.service” and “journalctl -xe” for details.</strong></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>在CentOS系统上，有NetworkManager和network两种网络管理工具。如果两种都配置会引起冲突，而且NetworkManager在网络断开的时候，会清理路由，如果一些自定义的路由，没有加入到NetworkManager的配置文件中，路由就被清理掉，网络连接后需要自定义添加上去。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ul><li><p>关闭 NetworkManager </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop NetworkManager</span><br></pre></td></tr></table></figure></li><li><p>重启网络</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113758339.png"></p></li></ul><p>查看IP，成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113932427.png"></p><p>连接虚拟机，成功</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230308113852226.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="疑难杂症" scheme="https://heroxin.xyz/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
    <category term="Linux" scheme="https://heroxin.xyz/tags/Linux/"/>
    
    <category term="Wrong" scheme="https://heroxin.xyz/tags/Wrong/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch</title>
    <link href="https://heroxin.xyz/2023/03/04/ElasticSearch/"/>
    <id>https://heroxin.xyz/2023/03/04/ElasticSearch/</id>
    <published>2023-03-04T02:30:00.000Z</published>
    <updated>2023-06-07T07:25:47.351Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a>Elasticsearch</h1><blockquote><p>elasticsearch是一款非常强大的开源搜索引擎，可以帮助我们从海量数据中找到需要的内容</p><p>elasticsearch结合kibana、Logstash、Beats，也就是elastic stack（ELK）。被广泛应用在日志数据分析、实时监控等领域。</p><p>elasticsearch是elastic stack的核心，负责存储、搜索、分析数据。</p></blockquote><h2 id="elasticsearch发展"><a href="#elasticsearch发展" class="headerlink" title="elasticsearch发展"></a>elasticsearch发展</h2><h3 id="Lucene"><a href="#Lucene" class="headerlink" title="Lucene"></a>Lucene</h3><p>​        <strong>Lucene</strong>是一套用于全文检索和搜寻的开源程式库，由Apache软件基金会支持和提供。基于倒排索引，提供了搜索引擎的核心API。由Java编写，有高性能，易扩展等优点。由DougCutting于1999年研发。</p><p>​        但是仅限于Java语言开发，不适用于其他语言，学习难度大，不支持分布式水平扩展</p><h3 id="elasticsearch"><a href="#elasticsearch" class="headerlink" title="elasticsearch"></a>elasticsearch</h3><p>​        Elasticsearch是一个开源的分布式、RESTful 风格的搜索和数据分析引擎，它的底层是开源库Apache Lucene。算是lucene外面一层华丽的包装，有支持分布式水平拓展，提供Restful接口，可被任何语言调用等优点</p><h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><p>传统数据库（如Mysql）采用的是正向索引，而elasticsearch采用的是倒排索引</p><div class="note blue icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><ul><li>倒排索引：对文档内容分词，对词条创建索引，并记录词条所在文档的信息，查询时先根据词条查询到文章id，而后获取到文章</li><li>正向索引：基于文档id创建索引，查询词条时必须先找到文档，而后判断是否包含词条</li></ul></div><ol><li>文档：对应mysql数据表中的一行数据</li><li>词条：对文档中的内容进行分词，得到的词语就是词条</li><li>词条词典：记录所有词条，以及词条和倒排列表之间的关系，会给词条创建索引，提高查询和插入效率</li><li>倒排索引：记录词条所在的文档id，词条出现的频率，词条在文档中的位置信息</li><li>索引：相同类型的文档的集合</li><li>映射：索引中文档的字段约束信息，类似表的结构约束</li></ol><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230303191503481.png"></p><h3 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h3><p>es在创建倒排索引时，需要对文档进行分词，这个操作就是分词器来完成的。</p><p>它会将一个句子分为一个个‘字’或者一个个‘词’，原版是无法对中文进行分词的，我们使用 ik 分词器来完成对中文的分词。</p><p>ik分词器包含两种模式：</p><ul><li>ik_smart:最少切分，粗粒度</li><li>ik_max_word:最细切分，细粒度</li></ul><p>ik分词器的安装见</p><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>安装过程详见：<a href="https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/">Centos7安装Elasticsearch | Heroxin</a></p></div><p>ik分词器-拓展词库</p><p>要拓展ik分词器的词库，只需要修改ik分词器目录中的config目录中的IKAnalyzer.cfg.xml 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后再同一目录下的ext.dic文件中，添加自己想要拓展的词语即可</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><div class="note green icon-padding simple"><i class="note-icon fas fa-fan"></i><p>安装过程详见：<a href="https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/">Centos7安装Elasticsearch | Heroxin</a></p></div><h2 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h2><blockquote><p>将索引库操作联想为对数据库的操作，创建数据库、查询数据库、约束、….</p></blockquote><ol><li><p>mapping：是对所应库中文档的约束，常见的mapping包括：</p><ul><li>type：字段数据类型，常见的简单类型有：<ul><li>字符串：text(可分词的文本)、keyword</li><li>数值：long、integer、short、byte、double、float</li><li>布尔：boolean</li><li>日期：data</li><li>对象：object</li></ul></li><li>index：是否创建索引，默认为true</li><li>analyzer：使用哪种分词器</li><li>properties：该字段的子字段</li></ul></li><li><p>创建索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /索引库名称</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;字段名&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名2&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: &quot;false&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;字段名3&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;子字段&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // ...略</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建索引库</span><br><span class="line">PUT /heroxin</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;firstName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;lastName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /索引库名</span><br></pre></td></tr></table></figure></li><li><p>删除索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /索引库名</span><br></pre></td></tr></table></figure></li><li><p>修改索引库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 所应库和mapping一旦创建就无法修改，但是可以添加新的字段</span><br><span class="line"></span><br><span class="line">PUT /索引库名/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;新字段名&quot;:&#123;</span><br><span class="line">      &quot;type&quot;: &quot;integer&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据迁移</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建好索引之后，如果非得修改已存在字段，</span><br><span class="line"># 则可以创建一个新的索引，然后将原来索引中的数据导入到新的索引当中</span><br><span class="line"></span><br><span class="line"># 创建新的索引库,将字段属性进行修改，</span><br><span class="line">PUT /new_heroxin</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;properties&quot;: &#123;</span><br><span class="line">      &quot;info&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;email&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">        &quot;index&quot;: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;name&quot;:&#123;</span><br><span class="line">        &quot;type&quot;: &quot;object&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;firstName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;lastName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据迁移</span><br><span class="line">POST _reindex</span><br><span class="line">&#123;</span><br><span class="line">&quot;source&quot;:&#123;</span><br><span class="line">&quot;index&quot;:&quot;heroxin&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&quot;dest&quot;:&#123;</span><br><span class="line">&quot;index&quot;:&quot;new&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><blockquote><p>联想为数据库中表的操作，构表语句、新增/修改字段……</p></blockquote><ol><li><p>添加文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /索引库名/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;: &quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;: &quot;值2&quot;,</span><br><span class="line">    &quot;字段3&quot;: &#123;</span><br><span class="line">        &quot;子属性1&quot;: &quot;值3&quot;,</span><br><span class="line">        &quot;子属性2&quot;: &quot;值4&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /heroxin/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;:&quot;光彩斐然&quot;,</span><br><span class="line">  &quot;email&quot;:&quot;hero_xin@163.com&quot;,</span><br><span class="line">  &quot;name&quot;:&#123;</span><br><span class="line">    &quot;firstName&quot;:&quot;wen&quot;,</span><br><span class="line">    &quot;lastName&quot;:&quot;xin&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE /索引库名/_doc/文档id</span><br><span class="line">GET /heroxin/_doc/1</span><br></pre></td></tr></table></figure></li><li><p>删除文档</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE /索引库名/_doc/文档id</span><br><span class="line">DELETE /heroxin/_doc/1</span><br></pre></td></tr></table></figure></li><li><p>修改</p><ul><li><p>局部修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /heroxin/_update/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;doc&quot;:&#123;</span><br><span class="line">    &quot;email&quot;:&quot;wen@163.com&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全量修改</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /heroxin/_doc/1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;info&quot;:&quot;光彩斐然&quot;,</span><br><span class="line">  &quot;email&quot;:&quot;hero_xin@163.com&quot;,</span><br><span class="line">  &quot;name&quot;:&#123;</span><br><span class="line">    &quot;firstName&quot;:&quot;wen&quot;,</span><br><span class="line">    &quot;lastName&quot;:&quot;xin&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h2><blockquote><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是组装DSL语句，通过http请求发送给ES。官方文档地址：<a href="https://www.elastic.co/guide/en/elasticsearch/client/index.html">https://www.elastic.co/guide/en/elasticsearch/client/index.html</a></p></blockquote><ol><li><p>导入依赖（和你的es版本一样）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>因为SpringBoot默认的ES版本是和咱的不一样，所以我们需要覆盖默认的ES版本</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.12.1<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    创建索引库</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCreateHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建Request对象</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        请求参数，MAPPING_TEMPLATE是静态常量字符串，内容是创建索引库的DSL语句</span></span><br><span class="line">        request.source(MAPPING_TEMPLATE, XContentType.JSON);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    删除索引库</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建Request对象</span></span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    判断索引库是否存在</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testExistsHotelIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//        创建request对象</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">request</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        输出</span></span><br><span class="line">        System.out.println(exists);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelDocumentTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HotelService hotelService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 文档查询</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testAddDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.查询数据库hotel数据</span></span><br><span class="line">        <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">47478</span>);</span><br><span class="line">        <span class="comment">// 2.转换为HotelDoc</span></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">        <span class="comment">// 3.转JSON</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotelDoc.getId().toString());</span><br><span class="line">        <span class="comment">// 2.准备请求参数DSL，其实就是文档的JSON字符串</span></span><br><span class="line">        request.source(json, XContentType.JSON);</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request      // GET /hotel/_doc/&#123;id&#125;</span></span><br><span class="line">        <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 3.解析响应结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line"></span><br><span class="line">        <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testDeleteDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request      // DELETE /hotel/_doc/&#123;id&#125;</span></span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.发送请求</span></span><br><span class="line">        client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testUpdateById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;47478&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.准备参数</span></span><br><span class="line">        request.doc(</span><br><span class="line">                <span class="string">&quot;price&quot;</span>, <span class="string">&quot;870&quot;</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 查询所有的酒店数据</span></span><br><span class="line">        List&lt;Hotel&gt; list = hotelService.list();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.准备Request</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        <span class="comment">// 2.准备参数</span></span><br><span class="line">        <span class="keyword">for</span> (Hotel hotel : list) &#123;</span><br><span class="line">            <span class="comment">// 2.1.转为HotelDoc</span></span><br><span class="line">            <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">            <span class="comment">// 2.2.转json</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(hotelDoc);</span><br><span class="line">            <span class="comment">// 2.3.添加请求</span></span><br><span class="line">            request.add(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>)</span><br><span class="line">                    .id(hotel.getId().toString())</span><br><span class="line">                    .source(json, XContentType.JSON)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.发送请求</span></span><br><span class="line">        client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DSL查询语法"><a href="#DSL查询语法" class="headerlink" title="DSL查询语法"></a>DSL查询语法</h2><blockquote><p>联想mysql的查询</p></blockquote><ol><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;查询类型&quot;: &#123;</span><br><span class="line">      &quot;查询条件&quot;: &quot;条件值&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 示例</span><br><span class="line">// 查询所有</span><br><span class="line">GET /indexName/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>全文检索查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;字段&quot;: &quot;字段内容&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#演示</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;all&quot;: &quot;上海&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>精确查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 精确查询</span><br><span class="line">#    一般是查找keyword，数值，日期，Boolean等类型字段，不会对搜索条件 分词</span><br><span class="line">#   term：根据词条精确值查询</span><br><span class="line">#   range：根据值的范围查询</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;city&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;上海&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;range&quot;: &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;gte&quot;: 10,</span><br><span class="line">        &quot;lte&quot;: 200</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复合查询</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复合查</span><br><span class="line">#   function score 查询 （加分）</span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;function_score&quot;: &#123;</span><br><span class="line">      &quot;query&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;all&quot;: &quot;外滩&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;functions&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;filter&quot;: &#123;&quot;term&quot;: &#123;</span><br><span class="line">            &quot;brand&quot;: &quot;如家&quot;</span><br><span class="line">          &#125;&#125;,</span><br><span class="line">          &quot;weight&quot;: 10</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;boost_mode&quot;: &quot;sum&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   Boolean Query 查询，布尔查询是一个或多个子查询的组合</span><br><span class="line"></span><br><span class="line"># 搜索名字包含&quot;如家&quot;，价格不高于400，坐标在指定范围内10km的酒店</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123;&quot;match&quot;: &#123;</span><br><span class="line">          &quot;name&quot;: &quot;如家&quot;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;must_not&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;range&quot;: &#123;</span><br><span class="line">            &quot;price&quot;: &#123;</span><br><span class="line">              &quot;gt&quot;: 400</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      &quot;filter&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;geo_distance&quot;: &#123;</span><br><span class="line">            &quot;distance&quot;: &quot;10km&quot;,</span><br><span class="line">            &quot;location&quot;: &#123;</span><br><span class="line">              &quot;lat&quot;: 31.21,</span><br><span class="line">              &quot;lon&quot;: 121.5</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  默认更具_score排序  </span><br><span class="line"></span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;desc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分页</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#   默认返回10条数据</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match_all&quot;: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;sort&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;price&quot;: &#123;</span><br><span class="line">        &quot;order&quot;: &quot;asc&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ], </span><br><span class="line">  &quot;from&quot;: 0,</span><br><span class="line">  &quot;size&quot;: 20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>高亮处理</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#  默认情况下搜索字段必须与高亮字段一致</span><br><span class="line">GET /hotel/_search</span><br><span class="line">&#123;</span><br><span class="line"> &quot;query&quot;: &#123;</span><br><span class="line">   &quot;match&quot;: &#123;</span><br><span class="line">     &quot;all&quot;: &quot;如家&quot;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;highlight&quot;: &#123;</span><br><span class="line">   &quot;fields&quot;: &#123;</span><br><span class="line">     &quot;name&quot;: &#123;</span><br><span class="line">       &quot;require_field_match&quot;: &quot;false&quot;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RestClient操作搜索"><a href="#RestClient操作搜索" class="headerlink" title="RestClient操作搜索"></a>RestClient操作搜索</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelSearchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testmatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits1) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testtrem</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        dsl语句</span></span><br><span class="line">        request.source().query(QueryBuilders.termQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        发送请求</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">search</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        System.out.println(search);</span><br><span class="line"><span class="comment">//        解析相应</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> search.getHits();</span><br><span class="line">        <span class="type">long</span> <span class="variable">value</span> <span class="operator">=</span> hits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到：&quot;</span> + value + <span class="string">&quot;  条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits1 = hits.getHits();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits1) &#123;</span><br><span class="line"><span class="comment">//            获取文档source</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hoteldoc :&quot;</span> + sourceAsString);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://192.168.196.101:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技术栈" scheme="https://heroxin.xyz/categories/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    <category term="ElasticSearch" scheme="https://heroxin.xyz/categories/ElasticSearch/"/>
    
    <category term="分布式" scheme="https://heroxin.xyz/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="ElasticSearch" scheme="https://heroxin.xyz/tags/ElasticSearch/"/>
    
    <category term="分布式" scheme="https://heroxin.xyz/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Elasticsearch</title>
    <link href="https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/"/>
    <id>https://heroxin.xyz/2023/03/03/Centos7_Install_Elasticsearch/</id>
    <published>2023-03-03T02:30:00.000Z</published>
    <updated>2023-03-03T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-部署单点es"><a href="#1-部署单点es" class="headerlink" title="1.部署单点es"></a>1.部署单点es</h1><h2 id="1-1-创建网络"><a href="#1-1-创建网络" class="headerlink" title="1.1.创建网络"></a>1.1.创建网络</h2><p>因为我们还需要部署kibana容器，因此需要让es和kibana容器互联。这里先创建一个网络：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><h2 id="1-2-加载镜像"><a href="#1-2-加载镜像" class="headerlink" title="1.2.加载镜像"></a>1.2.加载镜像</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.12.1</span><br><span class="line">docker pull kibana:7.12.1</span><br></pre></td></tr></table></figure><h2 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h2><p>运行docker命令，部署单点es：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name es \</span><br><span class="line">    -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">    -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">    -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">    -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">    --privileged \</span><br><span class="line">    --network es-net \</span><br><span class="line">    -p 9200:9200 \</span><br><span class="line">    -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br></pre></td></tr></table></figure><p>命令解释：</p><ul><li><code>-e &quot;cluster.name=es-docker-cluster&quot;</code>：设置集群名称</li><li><code>-e &quot;http.host=0.0.0.0&quot;</code>：监听的地址，可以外网访问</li><li><code>-e &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</code>：内存大小</li><li><code>-e &quot;discovery.type=single-node&quot;</code>：非集群模式</li><li><code>-v es-data:/usr/share/elasticsearch/data</code>：挂载逻辑卷，绑定es的数据目录</li><li><code>-v es-logs:/usr/share/elasticsearch/logs</code>：挂载逻辑卷，绑定es的日志目录</li><li><code>-v es-plugins:/usr/share/elasticsearch/plugins</code>：挂载逻辑卷，绑定es的插件目录</li><li><code>--privileged</code>：授予逻辑卷访问权</li><li><code>--network es-net</code> ：加入一个名为es-net的网络中</li><li><code>-p 9200:9200</code>：端口映射配置</li></ul><p>在浏览器中输入：<a href="http://192.168.150.101:9200/">http://192.168.150.101:9200</a> 即可看到elasticsearch的响应结果：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115333903.png"></p><h1 id="2-部署kibana"><a href="#2-部署kibana" class="headerlink" title="2.部署kibana"></a>2.部署kibana</h1><p>kibana可以给我们提供一个elasticsearch的可视化界面，便于我们学习。</p><h2 id="2-1-部署"><a href="#2-1-部署" class="headerlink" title="2.1.部署"></a>2.1.部署</h2><p>运行docker命令，部署kibana</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601  \</span><br><span class="line">kibana:7.12.1</span><br></pre></td></tr></table></figure><ul><li><code>--network es-net</code> ：加入一个名为es-net的网络中，与elasticsearch在同一个网络中</li><li><code>-e ELASTICSEARCH_HOSTS=http://es:9200&quot;</code>：设置elasticsearch的地址，因为kibana已经与elasticsearch在一个网络，因此可以用容器名直接访问elasticsearch</li><li><code>-p 5601:5601</code>：端口映射配置</li></ul><p>此时，在浏览器输入地址访问：<a href="http://192.168.150.101:5601，即可看到结果">http://192.168.150.101:5601，即可看到结果</a></p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115500954.png"></p><h2 id="2-2-DevTools"><a href="#2-2-DevTools" class="headerlink" title="2.2.DevTools"></a>2.2.DevTools</h2><p>kibana中提供了一个DevTools界面</p><p>这个界面中可以编写DSL来操作elasticsearch。并且对DSL语句有自动补全功能。</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304115548862.png"></p><h1 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h1><h2 id="3-1-在线安装ik插件（较慢）"><a href="#3-1-在线安装ik插件（较慢）" class="headerlink" title="3.1.在线安装ik插件（较慢）"></a>3.1.在线安装ik插件（较慢）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器内部</span></span><br><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在线下载并安装</span></span><br><span class="line">./bin/elasticsearch-plugin  install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">退出</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><h2 id="3-2-离线安装ik插件（推荐）"><a href="#3-2-离线安装ik插件（推荐）" class="headerlink" title="3.2.离线安装ik插件（推荐）"></a>3.2.离线安装ik插件（推荐）</h2><h3 id="1）查看数据卷目录"><a href="#1）查看数据卷目录" class="headerlink" title="1）查看数据卷目录"></a>1）查看数据卷目录</h3><p>安装插件需要知道elasticsearch的plugins目录位置，而我们用了数据卷挂载，因此需要查看elasticsearch的数据卷目录，通过下面命令查看:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><p>显示结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;CreatedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-06T10:06:34+08:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mountpoint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/volumes/es-plugins/_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es-plugins&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Options&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;local&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>说明plugins目录被挂载到了：<code>/var/lib/docker/volumes/es-plugins/_data </code>这个目录中。</p><h3 id="2）解压缩分词器安装包"><a href="#2）解压缩分词器安装包" class="headerlink" title="2）解压缩分词器安装包"></a>2）解压缩分词器安装包</h3><p>下面我们需要把课前资料中的ik分词器解压缩，重命名为ik</p><p><img src="assets/image-20210506110249144.png" alt="image-20210506110249144"></p><h3 id="3）上传到es容器的插件数据卷中"><a href="#3）上传到es容器的插件数据卷中" class="headerlink" title="3）上传到es容器的插件数据卷中"></a>3）上传到es容器的插件数据卷中</h3><p>也就是<code>/var/lib/docker/volumes/es-plugins/_data </code>：</p><p><img src="assets/image-20210506110704293.png" alt="image-20210506110704293"></p><h3 id="4）重启容器"><a href="#4）重启容器" class="headerlink" title="4）重启容器"></a>4）重启容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、重启容器</span></span><br><span class="line">docker restart es</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看es日志</span></span><br><span class="line">docker logs -f es</span><br></pre></td></tr></table></figure><h3 id="5）测试："><a href="#5）测试：" class="headerlink" title="5）测试："></a>5）测试：</h3><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：最少切分</p></li><li><p><code>ik_max_word</code>：最细切分</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;程序&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;员&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;学习&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;java&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ENGLISH&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;太棒&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;了&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-扩展词词典"><a href="#3-3-扩展词词典" class="headerlink" title="3.3 扩展词词典"></a>3.3 扩展词词典</h2><p>随着互联网的发展，“造词运动”也越发的频繁。出现了很多新的词语，在原有的词汇列表中并不存在。比如：“奥力给”，“传智播客” 等。</p><p>所以我们的词汇也需要不断的更新，IK分词器提供了扩展词汇的功能。</p><p>1）打开IK分词器config目录：</p><p><img src="https://heroxin.oss-cn-beijing.aliyuncs.com/blog/img/image-20230304151647033.png"></p><p>2）在IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 *** 添加扩展词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）新建一个 ext.dic，可以参考config目录下复制一个配置文件进行修改</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">传智播客</span></span><br><span class="line"><span class="attr">奥力给</span></span><br></pre></td></tr></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker restart es</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure><p>日志中已经成功加载ext.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业超过90%,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h2 id="3-4-停用词词典"><a href="#3-4-停用词词典" class="headerlink" title="3.4 停用词词典"></a>3.4 停用词词典</h2><p>在互联网项目中，在网络间传输的速度很快，所以很多语言是不允许在网络上传递的，如：关于宗教、政治等敏感词语，那么我们在搜索时也应该忽略当前词汇。</p><p>IK分词器也提供了强大的停用词功能，让我们在索引时就直接忽略当前的停用词汇表中的内容。</p><p>1）IKAnalyzer.cfg.xml配置文件内容添加：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典  *** 添加停用词词典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3）在 stopword.dic 添加停用词</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">习大大</span></span><br></pre></td></tr></table></figure><p>4）重启elasticsearch </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">docker restart elasticsearch</span><br><span class="line">docker restart kibana</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 日志</span></span><br><span class="line">docker logs -f elasticsearch</span><br></pre></td></tr></table></figure><p>日志中已经成功加载stopword.dic配置文件</p><p>5）测试效果：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;传智播客Java就业率超过95%,习大大都点赞,奥力给！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意当前文件的编码必须是 UTF-8 格式，严禁使用Windows记事本编辑</p></blockquote><h1 id="4-部署es集群"><a href="#4-部署es集群" class="headerlink" title="4.部署es集群"></a>4.部署es集群</h1><p>部署es集群可以直接使用docker-compose来完成，不过要求你的Linux虚拟机至少有<strong>4G</strong>的内存空间</p><p>首先编写一个docker-compose文件，内容如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;2.2&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  es01:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es01</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es01</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es02,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data01:/usr/share/elasticsearch/data</span><br><span class="line">    ports:</span><br><span class="line">      - 9200:9200</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es02:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es02</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es02</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es03</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data02:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line">  es03:</span><br><span class="line">    image: docker.elastic.co/elasticsearch/elasticsearch:7.12.1</span><br><span class="line">    container_name: es03</span><br><span class="line">    environment:</span><br><span class="line">      - node.name=es03</span><br><span class="line">      - cluster.name=es-docker-cluster</span><br><span class="line">      - discovery.seed_hosts=es01,es02</span><br><span class="line">      - cluster.initial_master_nodes=es01,es02,es03</span><br><span class="line">      - bootstrap.memory_lock=<span class="literal">true</span></span><br><span class="line">      - <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">    ulimits:</span><br><span class="line">      memlock:</span><br><span class="line">        soft: -1</span><br><span class="line">        hard: -1</span><br><span class="line">    volumes:</span><br><span class="line">      - data03:/usr/share/elasticsearch/data</span><br><span class="line">    networks:</span><br><span class="line">      - elastic</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  data01:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data02:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line">  data03:</span><br><span class="line">    driver: <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  elastic:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure><p>Run <code>docker-compose</code> to bring up the cluster:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ElasticSearch" scheme="https://heroxin.xyz/categories/ElasticSearch/"/>
    
    <category term="安装手册" scheme="https://heroxin.xyz/categories/%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
    
    
    <category term="安装手册" scheme="https://heroxin.xyz/tags/%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/"/>
    
    <category term="ElasticSearch" scheme="https://heroxin.xyz/tags/ElasticSearch/"/>
    
  </entry>
  
</feed>
